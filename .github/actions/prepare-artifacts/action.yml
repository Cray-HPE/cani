#
# MIT License
#
# (C) Copyright 2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
inputs:
  STREAM:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: Prepare Artifacts
      id: prepare_artifacts
      shell: bash
      env:
          REPOSITORY: csm-rpms
          ORG: hpe
          STREAM: ${{ inputs.STREAM }}
          WAIT: 45
      run: |
          sudo apt-get install -y rename

          # Wait for our RPM(s) to finish building and publishing.
          echo Looking for "vcs.branch=${{ github.ref_name }};rpm.metadata.name=${GITHUB_REPOSITORY#*/}"
          while ! jf rt s --fail-no-op=true "${REPOSITORY}/${ORG}/${STREAM}/" --props "vcs.branch=${{ github.ref_name }};rpm.metadata.name=${GITHUB_REPOSITORY#*/}" --exclude-props "rpm.metadata.arch=src"; do
           echo "Waiting for artifacts to be available; retrying in ${WAIT} seconds ... " >&2
           sleep ${WAIT}
          done

          # Give parallel builds a chance incase they published at slightly different times.
          sleep ${WAIT}

          # Make a workspace
          DIR_DOWNLOAD=$(mktemp -d)
          DIR_UPLOAD=$(mktemp -d)
          echo DIR_DOWNLOAD=${DIR_DOWNLOAD} >>$GITHUB_ENV
          echo DIR_UPLOAD=${DIR_UPLOAD} >>$GITHUB_ENV

          # This renaming code is clunky, and to avoid mistakes let's work on src and non-src RPMs in separate loops.
          # This effectively ensures that we provide artifacts for the distros we build for by uploading the artifacts with the distro in their name.

          # Working on non-SRC
          jf rt download "${REPOSITORY}/${ORG}/${STREAM}/" ${DIR_DOWNLOAD}/ --props "vcs.branch=${{ github.ref_name }};rpm.metadata.name=${GITHUB_REPOSITORY#*/}" --exclude-props "rpm.metadata.arch=src";
          for dir in ${DIR_DOWNLOAD}/${ORG}/${STREAM}/*; do
             os_dir=$(basename $dir)

             # trim any dashes, use a compact name.
             os=${os_dir/-/}

             # export for the -exec to work.
             export os
             find ${DIR_DOWNLOAD}/${ORG}/${STREAM}/${os_dir} -name *.rpm -exec rename -v 's/\.rpm/.'"${os}"'.rpm/' '{}' \;
          done

          # Move all the renamed RPMs into the upload dir.
          find ${DIR_DOWNLOAD}/${ORG}/${STREAM} -name *.rpm -exec mv '{}' ${DIR_UPLOAD}/ \;

          # Cleanup ... prepare to work on src RPMs.
          rm -rf ${DIR_DOWNLOAD}/${ORG}/${STREAM}/

          # Wait for our source RPMs to finish publishing.
          while ! jf rt s --fail-no-op=true "${REPOSITORY}/${ORG}/${STREAM}/" --props "vcs.branch=${{ github.ref_name }};rpm.metadata.name=${GITHUB_REPOSITORY#*/};rpm.metadata.arch=src"; do
           echo "Waiting for artifacts to be available; retrying in ${WAIT} seconds ... " >&2
           sleep ${WAIT}
          done

          # Give parallel builds a chance incase they published at slightly different times.
          sleep ${WAIT}

          # Rename src RPMs
          jf rt download "${REPOSITORY}/${ORG}/${STREAM}/" ${DIR_DOWNLOAD}/ --props "vcs.branch=${{ github.ref_name }};rpm.metadata.name=${GITHUB_REPOSITORY#*/};rpm.metadata.arch=src";
          for dir in ${DIR_DOWNLOAD}/${ORG}/${STREAM}/*; do
             os_dir=$(basename $dir)


             # trim any dashes, use a compact name.
             os=${os_dir/-/}

             # export for the -exec to work.
             export os
             find ${DIR_DOWNLOAD}/${ORG}/${STREAM}/${os_dir} -name *.rpm -exec rename -v 's/\.src\.rpm/.'"${os}"'.src.rpm/' '{}' \;
          done

          # Move all the renamed RPMs into the upload dir.
          find ${DIR_DOWNLOAD}/${ORG}/${STREAM} -name *.rpm -exec mv '{}' ${DIR_UPLOAD}/ \;

          # Display what we have done.
          ls -l ${DIR_UPLOAD}
