#
# MIT License
#
# (C) Copyright 2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
name: Promote a build to a release candidate
on:
  push:
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+a[0-9]+'
      - 'v?[0-9]+.[0-9]+.[0-9]+b[0-9]+'
      - 'v?[0-9]+.[0-9]+.[0-9]+rc[0-9]+'
  workflow_dispatch:

env:
  STREAM: unstable
jobs:
  Promote:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v3

      - name: Jfrog setup
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: https://artifactory.algol60.net
          JF_USER: ${{ secrets.ARTIFACTORY_ALGOL60_USERNAME }}
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ALGOL60_TOKEN }}

      - uses: ./.github/actions/prepare-artifacts
        with:
          STREAM: ${{ env.STREAM }}

      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # if the job is re-ran to catch missed artifacts, allow updates
          generateReleaseNotes: true
          artifacts: ${{ env.DIR_UPLOAD }}/*
          prerelease: true
          makeLatest: false

# once out of alpha, remove this and use the one in promote-release.yml
# (alpha docs not needed once stable docs exist)
  generate_publish_docs:
    name: generate docs and publish with mike
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Also fetch git-tags

    - uses: actions/setup-go@v4
      with:
        go-version: '1.20' # The Go version to download (if necessary) and use.
  
    # generate updated docs from any changes made to cani codebase
    - run: go run main.go makedocs

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: configure git user for bot commits
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    - name: install requirements with nox
      run: |
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
      
    - name: deploy docs with mike ðŸš€ and set as latest
      run: |
        mike deploy -F mkdocs.yml -b gh-pages --push --update-aliases ${{ github.ref_name}} latest
        mike set-default -F mkdocs.yml -b gh-pages --push latest

    - name: list doc versions ðŸš€
      run: |
        mike list -F mkdocs.yml -b gh-pages
        