openapi: 3.0.1
info:
  title: Hardware State Manager API
  description: |-
    The Hardware State Manager (HSM) inventories, monitors, and manages hardware, and tracks the logical and dynamic component states, such as roles, NIDs, and other basic metadata needed to provide most common administrative and operational functions. HSM is the single source of truth for the state of the system. It contains the component state and information on Redfish endpoints for communicating with components via Redfish. It also allows administrators to create partitions and groups for other uses.
    ## Resources
    ### /State/Components
    HMS components are created during inventory discovery and provide a higher-level representation of the component, including state, NID, role (i.e. compute/service), subtype, and so on. Unlike ComponentEndpoints, however, they are not strictly linked to the parent RedfishEndpoint, and are not automatically deleted when the RedfishEndpoints are (though they can be deleted via a separate call). This is because these components can also represent abstract components, such as removed components (e.g. which would remain, but have their states changed to "Empty" upon removal).
    ### /Defaults/NodeMaps

    This resource allows a mapping file (NodeMaps) to be uploaded that maps node xnames to Node IDs, and optionally, to roles and subroles. These mappings are used when discovering nodes for the first time. These mappings should be uploaded prior to discovery and should contain mappings for each valid node xname in the system, whether populated or not. Nodemap is a JSON file that contains the xname of the node, node ID, and optionally role and subrole. Role can be Compute, Application, Storage, Management etc. The NodeMaps collection can be uploaded to HSM automatically at install time by specifying it as a JSON file. As a result, the endpoints are then automatically discovered by REDS, and inventory discovery is performed by HSM. The desired NID numbers will be set as soon as the nodes are created using the NodeMaps collection.

    It is recommended that Nodemaps are uploaded at install time before discovery happens. If they are uploaded after discovery, then the node xnames need to be manually updated with the correct NIDs. You can update NIDs for individual components by using PATCH /State/Components/{xname}/NID.

    ### /Inventory/Hardware

    This resource shows the hardware inventory of the entire system and contains FRU information in location. All entries are displayed as a flat array.
    ### /Inventory/HardwareByFRU

    Every component has FRU information. This resource shows the hardware inventory for all FRUs or for a specific FRU irrespective of the location. This information is constant regardless of where the hardware item is currently in the system. If a HWInventoryByLocation entry is currently populated with a piece of hardware, it will have the corresponding HWInventoryByFRU object embedded. This FRU info can also be looked up by FRU ID regardless of the current location.
    ### /Inventory/Hardware/Query/{xname}

    This resource gets you information about a specific component and it's sub-components. The xname can be a component, partition, ALL, or s0. Both ALL and s0 represent the entire system.
    ### /Inventory/RedfishEndpoints

    This is a BMC or other Redfish controller that has a Redfish entry point and Redfish service root. It is used to discover the components managed by this endpoint during discovery and handles all Redfish interactions by these subcomponents.  If the endpoint has been discovered, this entry will include the ComponentEndpoint entries for these managed subcomponents. You can also create a Redfish Endpoint or update the definition for a Redfish Endpoint. The xname identifies the location of all components in the system, including chassis, controllers, nodes, and so on. Redfish endpoints are given to State Manager.
    ### /Inventory/ComponentEndpoints

    Component Endpoints are the specific URLs for each individual component that are under the Redfish endpoint. Component endpoints are discovered during inventory discovery. They are the management-plane representation of system components and are linked to the parent Redfish Endpoint. They provide a glue layer to bridge the higher-level representation of a component with how it is represented locally by Redfish.

    The collection of ComponentEndpoints can be obtained in full, optionally filtered on certain criteria (e.g. obtain just Node components), or accessed by their xname IDs individually.
    ### /Inventory/ServiceEndpoints

    ServiceEndpoints help you do things on Redfish like updating the firmware. They are discovered during inventory discovery.
    ### /groups

    Groups are named sets of system components, most commonly nodes. A group groups components under an administratively chosen label (group name). Each component may belong to any number of groups. If a group has exclusiveGroup=<excl-label> set, then a node may only be a member of one group that matches that exclusive label. For example, if the exclusive group label 'colors' is associated with groups 'blue', 'red', and 'green', then a component that is part of 'green' could not also be placed in 'red'.
    You can create, modify, or delete a group and its members. You can also use group names as filters for API calls.
    ### /partitions

    A partition is a formal, non-overlapping division of the system that forms an administratively distinct sub-system. Each component may belong to at most one partition. Partitions are used as an access control mechanism or for implementing multi-tenancy. You can create, modify, or delete a partition and its members. You can also use partitions as filters for other API calls.
    ### /memberships

    A membership shows the association of a component xname to its set of group labels and partition names. There can be many group labels and up to one partition per component. Memberships are not modified directly, as the underlying group or partition is modified instead. A component can be removed from one of the listed groups or partitions or added via POST as well as being present in the initial set of members when a partition or group is created. You can retrieve the memberships for components or memberships for a specific xname.
    ### /Inventory/DiscoveryStatus

    Check discovery status for all components or you can track the status for a specific job ID. You can also check per-endpoint discover status for each RedfishEndpoint. Contains status information about the discovery operation for clients to query. The discover operation returns a link or links to status objects so that a client can determine when the discovery operation is complete.
    ### /Inventory/Discover

    Discover subcomponents by querying all RedfishEndpoints. Once the RedfishEndpoint objects are created, inventory discovery will query these controllers and create or update management plane and managed plane objects representing the components (e.g. nodes, node enclosures, node cards for Mountain chassis CMM endpoints).
    ### /Subscriptions/SCN

    Manage subscriptions to state change notifications (SCNs) from HSM. You can also subscribe to state change notifications by using the HMS Notification Fanout Daemon API.
    ## Workflows

    ### Add and Delete a Redfish Endpoint
    #### POST /Inventory/RedfishEndpoints
    When you manually create Redfish endpoints, the discovery is automatically initiated. You would create Redfish endpoints for components that are not automatically discovered by REDS or MEDS.
    #### GET /Inventory/RedfishEndpoints
    Check the Redfish endpoints that have been added and check the status of discovery.
    #### DELETE /Inventory/RedfishEndpoints/{xname}
    Delete a specific Redfish endpoint.
    ### Perform Inventory Discovery
    #### POST /Inventory/Discover
    Start inventory discovery of a system's subcomponents by querying all Redfish endpoints. If needed, specify an ID or hostname (xname) in the payload.
    #### GET /Inventory/DiscoveryStatus
    Check the discovery status of all Redfish endpoints. You can also check the discovery status for each individual component by providing ID.
    ### Query and Update HMS Components (State/NID)
    #### GET /State/Components
    Retrieve all HMS Components found by inventory discovery as a named ("Components") array.

    #### PATCH /State/Components/{xname}/Enabled
    Modify the component's Enabled field.

    #### DELETE /State/Components/{xname}
    Delete a specific HMS component by providing its xname. As noted, components are not automatically deleted when RedfishEndpoints or ComponentEndpoints are deleted.
    ### Create and Delete a New Group
    #### GET /hsm/v2/State/Components
    Retrieve a list of desired components and their state. Select the nodes that you want to group.

    #### POST /groups
    Create the new group with desired members. Provide a group label (required), description, name, members etc. in the JSON payload.
    #### GET /groups/{group_label}
    Retrieve the group that was create with the label.
    #### GET /State/Components/{group_label}
    Retrieve the current state for all the components in the group.
    #### DELETE /groups/{group_label}
    Delete the group specified by {group_label}.
    ## Valid State Transitions
    ```
    Prior State -> New State     - Reason
    Ready       -> Standby       - HBTD if node has many missed heartbeats
    Ready       -> Ready/Warning - HBTD if node has a few missed heartbeats
    Standby     -> Ready         - HBTD Node re-starts heartbeating
    On          -> Ready         - HBTD Node started heartbeating
    Off         -> Ready         - HBTD sees heartbeats before Redfish Event (On)
    Standby     -> On            - Redfish Event (On) or if re-discovered while in the standby state
    Off         -> On            - Redfish Event (On)
    Standby     -> Off           - Redfish Event (Off)
    Ready       -> Off           - Redfish Event (Off)
    On          -> Off           - Redfish Event (Off)
    Any State   -> Empty         - Redfish Endpoint is disabled meaning component removal
    ```
    Generally, nodes transition 'Off' -> 'On' -> 'Ready' when going from 'Off' to booted, and 'Ready' -> 'Ready/Warning' -> 'Standby' -> 'Off' when shutdown.
  version: 1.0.0
servers:
- url: https://sms/apis/smd/hsm/v2
tags:
- name: Service Info
  description: "Service information APIs for getting information on the HSM service\
    \ such as readiness, etc."
- name: Component
  description: "High-level component information by xname: state, flag, NID, role,\
    \ etc."
- name: NodeMap
  description: "Given a node xname ID, provide defaults for NID, Role, etc. to be\
    \ used when the node is first discovered. These are uploaded prior to discovery\
    \ and should contain mappings for each valid node xname in the system, whether\
    \ populated or not."
- name: HWInventory
  description: HWInventoryByLocation collection containing all components matching
    the query that was submitted.
- name: HWInventoryByLocation
  description: Hardware inventory information for the given system location/xname
- name: HWInventoryByFRU
  description: "This represents a physical piece of hardware with properties specific\
    \ to a unique component in the system.  This information is constant regardless\
    \ of where the hardware item is currently in the system (if it is in the system).\
    \ If a HWInventoryByLocation entry is currently populated with a piece of hardware,\
    \ it will have the corresponding HWInventoryByFRU object embedded. This FRU info\
    \ can also be looked up by FRU ID regardless of the current location."
- name: HWInventoryHistory
  description: Hardware inventory historical information for the given system location/xname/FRU
- name: RedfishEndpoint
  description: "This is a BMC or other Redfish controller that has a Redfish entry\
    \ point and Redfish service root.  It is used to discover the components managed\
    \ by this endpoint during discovery and handles all Redfish interactions by these\
    \ subcomponents.  If the endpoint has been discovered, this entry will include\
    \ the ComponentEndpoint entries for these managed subcomponents."
- name: ComponentEndpoint
  description: "The Redfish-discovered properties for a component discovered through,\
    \ and managed by a RedfishEndpoint, such as a node, blade, and so on. These are\
    \ obtainable via a discovered RedfishEndpoint or can be looked up by their xnames\
    \ separately so that just the information for a particular component, e.g. node\
    \ can be retrieved.  They can also provide a back-reference to the parent endpoint."
- name: ServiceEndpoint
  description: "The Redfish-discovered properties for a service discovered through,\
    \ and managed by a RedfishEndpoint, such as UpdateService, EventService, and so\
    \ on.  These are obtainable via a discovered RedfishEndpoint or can be looked\
    \ up by their service type and xnames separately so that just the information\
    \ for a particular service, e.g. UpdateService can be retrieved. They can also\
    \ provide a back-reference to the parent endpoint."
- name: ComponentEthernetInterfaces
  description: "The MAC address to IP address relation for components in the system.\
    \ If the component has been discovered by HSM, the xname of the component that\
    \ has the Ethernet interface will be associated with it as well."
- name: Group
  description: "A group is an informal, possibly overlapping division of the system\
    \ that groups Components (most frequently nodes) under an administratively chosen\
    \ label (i.e. group name).  Unlike partitions, components can be members of any\
    \ number of groups."
- name: Partition
  description: "A partition is a formal, non-overlapping division of the system that\
    \ forms an administratively distinct sub-system e.g. for implementing multi-tenancy."
- name: Membership
  description: A membership is a mapping of a component xname to its set of group
    labels and partition names.
- name: DiscoveryStatus
  description: Contains status information about the discovery operation for clients
    to query. The discover operation returns a link or links to status objects so
    that a client can determine when the discovery operation is complete.
- name: Discover
  description: "Trigger a discovery of system component data by interrogating all,\
    \ or a subset, of the RedfishEndpoints currently known to the system."
- name: SCN
  description: Manage subscriptions to state change notifications (SCNs) from HSM.
- name: Locking
  description: Manage locks and reservations on components.
- name: PowerMap
  description: Power mapping of components to the components supplying them power.
    This may contain components in the system whether populated or not.
paths:
  /service/ready:
    get:
      tags:
      - Service Info
      summary: Kubernetes readiness endpoint to monitor service health
      description: |-
        The `readiness` resource works in conjunction with the Kubernetes readiness probe to determine when the service is no longer healthy and able to respond correctly to requests.  Too many failures of the readiness probe will result in the traffic being routed away from this service and eventually the service will be shut down and restarted if in an unready state for too long.

        This is primarily an endpoint for the automated Kubernetes system.
      operationId: doReadyGet
      responses:
        "200":
          description: "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1)\
            \ Network API call success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "503":
          description: The service is unhealthy and not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
  /service/liveness:
    get:
      tags:
      - Service Info
      summary: Kubernetes liveness endpoint to monitor service health
      description: |-
        The `liveness` resource works in conjunction with the Kubernetes liveness probe to determine when the service is no longer responding to requests.  Too many failures of the liveness probe will result in the service being shut down and restarted.

        This is primarily an endpoint for the automated Kubernetes system.
      operationId: doLivenessGet
      responses:
        "204":
          description: "[No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)\
            \ Network API call success"
          content: {}
        "503":
          description: The service is not taking HTTP requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
  /service/values:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use as parameters
      description: Retrieve all valid values for use as parameters.
      operationId: doValuesGet
      responses:
        "200":
          description: An array of parameters and their valid values.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_Values'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_Values'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/arch:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'arch' parameter
      description: Retrieve all valid values for use with the 'arch' (component architecture)
        parameter.
      operationId: doArchValuesGet
      responses:
        "200":
          description: An array of valid values for the 'arch' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_ArchArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_ArchArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/class:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'class' parameter
      description: Retrieve all valid values for use with the 'class' (hardware class)
        parameter.
      operationId: doClassValuesGet
      responses:
        "200":
          description: An array of valid values for the 'class' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_ClassArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_ClassArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/flag:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'flag' parameter
      description: Retrieve all valid values for use with the 'flag' (component flag)
        parameter.
      operationId: doFlagValuesGet
      responses:
        "200":
          description: An array of valid values for the 'flag' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_FlagArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_FlagArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/nettype:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'nettype' parameter
      description: Retrieve all valid values for use with the 'nettype' (component
        network type) parameter.
      operationId: doNetTypeValuesGet
      responses:
        "200":
          description: An array of valid values for the 'nettype' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_NetTypeArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_NetTypeArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/role:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'role' parameter
      description: Retrieve all valid values for use with the 'role' (component role)
        parameter.
      operationId: doRoleValuesGet
      responses:
        "200":
          description: An array of valid values for the 'role' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_RoleArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_RoleArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/subrole:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'subrole' parameter
      description: Retrieve all valid values for use with the 'subrole' (component
        subrole) parameter.
      operationId: doSubRoleValuesGet
      responses:
        "200":
          description: An array of valid values for the 'subrole' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_SubRoleArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_SubRoleArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/state:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'state' parameter
      description: Retrieve all valid values for use with the 'state' (component state)
        parameter.
      operationId: doStateValuesGet
      responses:
        "200":
          description: An array of valid values for the 'state' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_StateArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_StateArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /service/values/type:
    get:
      tags:
      - Service Info
      summary: Retrieve all valid values for use with the 'type' parameter
      description: Retrieve all valid values for use with the 'type' (component HMSType)
        parameter.
      operationId: doTypeValuesGet
      responses:
        "200":
          description: An array of valid values for the 'type' parameter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_TypeArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Values.1.0.0_TypeArray'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /State/Components:
    get:
      tags:
      - Component
      summary: Retrieve collection of HMS Components
      description: "Retrieve the full collection of state/components in the form of\
        \ a ComponentArray. Full results can also be filtered by query parameters.\
        \ When multiple parameters are specified, they are applied in an AND fashion\
        \ (e.g. type AND state). When a parameter is specified multiple times, they\
        \ are applied in an OR fashion (e.g. type AND state1 OR state2). If the collection\
        \ is empty or the filters have no match, an empty array is returned."
      operationId: doComponentsGet
      parameters:
      - name: id
        in: query
        description: Filter the results based on xname ID(s). Can be specified multiple
          times for selecting entries with multiple specific xnames.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: state
        in: query
        description: "Filter the results based on HMS state like Ready, On etc. Can\
          \ be specified multiple times for selecting entries in different states."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Unknown
          - Empty
          - Populated
          - "Off"
          - "On"
          - Standby
          - Halt
          - Ready
      - name: flag
        in: query
        description: "Filter the results based on HMS flag value like OK, Alert etc.\
          \ Can be specified multiple times for selecting entries with different flags."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - OK
          - Warning
          - Alert
          - Locked
          - Unknown
      - name: role
        in: query
        description: |-
          Filter the results based on HMS role. Can be specified multiple times for selecting entries with different roles. Valid values are:
          - Compute
          - Service
          - System
          - Application
          - Storage
          - Management
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/role' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subrole
        in: query
        description: |-
          Filter the results based on HMS subrole. Can be specified multiple times for selecting entries with different subroles. Valid values are:
          - Master
          - Worker
          - Storage
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/subrole' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: enabled
        in: query
        description: Filter the results based on enabled status (true or false).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: softwarestatus
        in: query
        description: Filter the results based on software status. Software status
          is a free form string. Matching is case-insensitive. Can be specified multiple
          times for selecting entries with different software statuses.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subtype
        in: query
        description: Filter the results based on HMS subtype. Can be specified multiple
          times for selecting entries with different subtypes.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: arch
        in: query
        description: Filter the results based on architecture. Can be specified multiple
          times for selecting components with different architectures.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - X86
          - ARM
          - Other
          - Unknown
      - name: class
        in: query
        description: Filter the results based on HMS hardware class. Can be specified
          multiple times for selecting entries with different classes.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - River
          - Mountain
          - Hill
      - name: nid
        in: query
        description: Filter the results based on NID. Can be specified multiple times
          for selecting entries with multiple specific NIDs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nid_start
        in: query
        description: Filter the results based on NIDs equal to or greater than the
          provided integer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nid_end
        in: query
        description: Filter the results based on NIDs less than or equal to the provided
          integer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: partition
        in: query
        description: Restrict search to the given partition (p#.#). One partition
          can be combined with at most one group argument which will be treated as
          a logical AND. NULL will return components in NO partition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group
        in: query
        description: Restrict search to the given group label. One group can be combined
          with at most one partition argument which will be treated as a logical AND.
          NULL will return components in NO groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stateonly
        in: query
        description: Return only component state and flag fields (plus xname/ID and
          type). Results can be modified and used for bulk state/flag- only patch
          operations.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: flagonly
        in: query
        description: Return only component flag field (plus xname/ID and type). Results
          can be modified and used for bulk flag-only patch operations.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: roleonly
        in: query
        description: Return only component role and subrole fields (plus xname/ID
          and type). Results can be modified and used for bulk role-only patches.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: nidonly
        in: query
        description: Return only component NID field (plus xname/ID and type). Results
          can be modified and used for bulk NID-only patches.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: ComponentArray representing results of query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
        "400":
          description: Bad Request such as invalid argument for filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - Component
      summary: Create/Update a collection of HMS Components
      description: "Create/Update a collection of state/components. If the component\
        \ already exists it will not be overwritten unless force=true in which case\
        \ State, Flag, Subtype, NetType, Arch, and Class will get overwritten."
      operationId: doComponentsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PostArray'
        required: true
      responses:
        "204":
          description: "[No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)\
            \ One or more Component entries were successfully created/updated."
          content: {}
        "400":
          description: Bad Request such as invalid argument for a component field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Component
      - "cli_danger$This will delete all components in HSM, continue?"
      summary: Delete all components
      description: Delete all entries in the components collection.
      operationId: doComponentsDeleteAll
      responses:
        "200":
          description: Zero (success) error code - one or more entries deleted. Message
            contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /State/Components/{xname}:
    get:
      tags:
      - Component
      summary: "Retrieve component at {xname}"
      description: Retrieve state or components by xname.
      operationId: doComponentGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Component entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component.1.0.0_Component'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Component.1.0.0_Component'
        "400":
          description: Bad Request or invalid xname
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    put:
      tags:
      - Component
      summary: Create/Update an HMS Component
      description: "Create/Update a state/component. If the component already exists\
        \ it will not be overwritten unless force=true in which case State, Flag,\
        \ Subtype, NetType, Arch, and Class will get overwritten."
      operationId: doComponentPut
      parameters:
      - name: xname
        in: path
        description: Locational xname of the component to create or update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Put'
        required: true
      responses:
        "204":
          description: "[No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)\
            \ Component entry was successfully created/updated."
          content: {}
        "400":
          description: Bad Request such as invalid argument for a component field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - Component
      summary: "Delete component with ID {xname}"
      description: Delete a component by xname.
      operationId: doComponentDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of component record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Component is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /State/Components/ByNID/{nid}:
    get:
      tags:
      - Component
      summary: "Retrieve component with NID={nid}"
      description: Retrieve a component by NID.
      operationId: doComponentByNIDGet
      parameters:
      - name: nid
        in: path
        description: NID of component to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Component entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component.1.0.0_Component'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Component.1.0.0_Component'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /State/Components/BulkStateData:
    patch:
      tags:
      - Component
      summary: Update multiple components' state data via a list of xnames
      description: "Specify a list of xnames to update the State and Flag fields.\
        \ If the Flag field is omitted, Flag is reverted to 'OK'. Other fields are\
        \ ignored. The list of IDs and the new State are required."
      operationId: doCompBulkStateDataPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PatchArray.StateData'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/{xname}/StateData:
    patch:
      tags:
      - Component
      summary: "Update component state data at {xname}"
      description: "Update the component's state and flag fields only. If Flag field\
        \ is omitted, the Flag value is reverted to 'OK'."
      operationId: doCompStatePatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to set state/flag on.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Patch.StateData'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/BulkFlagOnly:
    patch:
      tags:
      - Component
      summary: Update multiple components' Flag values via a list of xnames
      description: Specify a list of xnames to update the Flag field and specify the
        value. The list of IDs and the new Flag are required.
      operationId: doCompBulkFlagOnlyPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PatchArray.FlagOnly'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/{xname}/FlagOnly:
    patch:
      tags:
      - Component
      summary: "Update component Flag value at {xname}"
      description: The State is not modified. Only the Flag is updated.
      operationId: doCompFlagOnlyPatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to modify flag on.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Patch.FlagOnly'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/BulkEnabled:
    patch:
      tags:
      - Component
      summary: Update multiple components' Enabled values via a list of xnames
      description: Update the Enabled field for a list of xnames. Specify a single
        value for Enabled and also the list of xnames. Note that Enabled is a boolean
        field and a value of false sets the component(s) to disabled.
      operationId: doCompBulkEnabledPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PatchArray.Enabled'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/{xname}/Enabled:
    patch:
      tags:
      - Component
      summary: "Update component Enabled value at {xname}"
      description: "Update the component's Enabled field only. The State and other\
        \ fields are not modified. Note that this is a boolean field, a value of false\
        \ sets the component to disabled."
      operationId: doCompEnabledPatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to set Enabled to true or false.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Patch.Enabled'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/BulkSoftwareStatus:
    patch:
      tags:
      - Component
      summary: Update multiple components' SoftwareStatus values via a list of xnames
      description: Update the SoftwareStatus field for a list of xnames. Specify a
        single new value of SoftwareStatus like admindown and the list of xnames.
      operationId: doCompBulkSwStatusPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PatchArray.SoftwareStatus'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/{xname}/SoftwareStatus:
    patch:
      tags:
      - Component
      summary: "Update component SoftwareStatus value at {xname}"
      description: Update the component's SoftwareStatus field only. The State and
        other fields are not modified.
      operationId: doCompSwStatusPatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to set new SoftwareStatus value.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Patch.SoftwareStatus'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/BulkRole:
    patch:
      tags:
      - Component
      summary: Update multiple components' Role values via a list of xnames
      description: Update the Role and SubRole field for a list of xnames. Specify
        the Role and Subrole values and the list of xnames. The list of IDs and the
        new Role are required.
      operationId: doCompBulkRolePatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PatchArray.Role'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/{xname}/Role:
    patch:
      tags:
      - Component
      summary: "Update component Role and SubRole values at {xname}"
      description: Update the component's Role and SubRole fields only. Valid only
        for nodes. The State and other fields are not modified.
      operationId: doCompRolePatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to modify Role on.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Patch.Role'
        required: true
      responses:
        "200":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/BulkNID:
    patch:
      tags:
      - Component
      summary: Update multiple components' NIDs via ComponentArray
      description: Modify the submitted ComponentArray and update the corresponding
        NID value for each entry. Other fields are ignored and not changed. ID field
        is required for all entries.
      operationId: doCompArrayNIDPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PatchArray.NID'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/{xname}/NID:
    patch:
      tags:
      - Component
      summary: "Update component NID value at {xname}"
      description: Update the component's NID field only. Valid only for nodes. State
        and other fields are not modified.
      operationId: doCompNIDPatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to modify NID on.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Component.1.0.0_Patch.NID'
        required: true
      responses:
        "200":
          description: Success.
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/Query:
    post:
      tags:
      - Component
      summary: "Create component query (by xname list), returning ComponentArray"
      description: Retrieve the targeted entries in the form of a ComponentArray by
        providing a payload of component IDs.
      operationId: doComponentsQueryPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PostQuery'
        required: true
      responses:
        "200":
          description: ComponentArray representing results of query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/ByNID/Query:
    post:
      tags:
      - Component
      summary: "Create component query (by NID ranges), returning ComponentArray"
      description: Retrieve the targeted entries in the form of a ComponentArray by
        providing a payload of NID ranges.
      operationId: doComponentByNIDQueryPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ComponentArray_PostByNIDQuery'
        required: true
      responses:
        "200":
          description: ComponentArray representing results of query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /State/Components/Query/{xname}:
    get:
      tags:
      - Component
      summary: "Retrieve component query for {xname}, returning ComponentArray"
      description: Retrieve component entries in the form of a ComponentArray by providing
        xname and modifiers in the query string.
      operationId: doComponentQueryGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of component to query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: query
        description: "Retrieve xname's children of type={type} instead of {xname}\
          \ for example NodeBMC, NodeEnclosure etc."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: state
        in: query
        description: "Filter the results based on HMS state like Ready, On etc. Can\
          \ be specified multiple times for selecting entries in different states."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Unknown
          - Empty
          - Populated
          - "Off"
          - "On"
          - Standby
          - Halt
          - Ready
      - name: flag
        in: query
        description: "Filter the results based on HMS flag value like OK, Alert etc.\
          \ Can be specified multiple times for selecting entries with different flags."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - OK
          - Warning
          - Alert
          - Locked
          - Unknown
      - name: role
        in: query
        description: |-
          Filter the results based on HMS role. Can be specified multiple times for selecting entries with different roles. Valid values are:
          - Compute
          - Service
          - System
          - Application
          - Storage
          - Management
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/role' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subrole
        in: query
        description: |-
          Filter the results based on HMS subrole. Can be specified multiple times for selecting entries with different subroles. Valid values are:
          - Master
          - Worker
          - Storage
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/subrole' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: enabled
        in: query
        description: Filter the results based on enabled status (true or false).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: softwarestatus
        in: query
        description: Filter the results based on software status. Software status
          is a free form string. Matching is case-insensitive. Can be specified multiple
          times for selecting entries with different software statuses.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subtype
        in: query
        description: Filter the results based on HMS subtype. Can be specified multiple
          times for selecting entries with different subtypes.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: arch
        in: query
        description: Filter the results based on architecture. Can be specified multiple
          times for selecting components with different architectures.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - X86
          - ARM
          - Other
          - Unknown
      - name: class
        in: query
        description: Filter the results based on HMS hardware class. Can be specified
          multiple times for selecting entries with different classes.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - River
          - Mountain
          - Hill
      - name: nid
        in: query
        description: Filter the results based on NID. Can be specified multiple times
          for selecting entries with multiple specific NIDs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nid_start
        in: query
        description: Filter the results based on NIDs equal to or greater than the
          provided integer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nid_end
        in: query
        description: Filter the results based on NIDs less than or equal to the provided
          integer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: partition
        in: query
        description: Restrict search to the given partition (p#.#). One partition
          can be combined with at most one group argument which will be treated as
          a logical AND. NULL will return components in NO partition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group
        in: query
        description: Restrict search to the given group label. One group can be combined
          with at most one partition argument which will be treated as a logical AND.
          NULL will return components in NO groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: stateonly
        in: query
        description: Return only component state and flag fields (plus xname/ID and
          type). Results can be modified and used for bulk state/flag- only patch
          operations.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: flagonly
        in: query
        description: Return only component flag field (plus xname/ID and type). Results
          can be modified and used for bulk flag-only patch operations.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: roleonly
        in: query
        description: Return only component role and subrole fields (plus xname/ID
          and type). Results can be modified and used for bulk role-only patches.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: nidonly
        in: query
        description: Return only component NID field (plus xname/ID and type). Results
          can be modified and used for bulk NID-only patches.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: ComponentArray representing results of query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ComponentArray_ComponentArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /locks/reservations/remove:
    post:
      tags:
      - Locking
      - admin-reservations
      - cli_ignore
      summary: Forcibly deletes existing reservations.
      description: "Given a list of components, forcibly deletes any existing reservation.\
        \ Does not change lock state; does not disable the reservation ability of\
        \ the component. An empty set of xnames will delete reservations on all xnames.\
        \ This functionality should be used sparingly, the normal flow should be to\
        \ release reservations, versus removing them."
      requestBody:
        description: "List of xnames to remove reservations. A `rigid` processing\
          \ model will result in the entire set of xnames not having their reservation\
          \ removed if an xname doesn't exist, or isn't reserved. A `flexible` processing\
          \ model will perform all actions possible."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminReservationRemove.1.0.0'
        required: true
      responses:
        "202":
          description: Accepted. Returns a count + list of xnames that succeeded or
            failed the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: "Bad request; something is wrong with the structure received.\
            \ Will not be used to represent failure to accomplish the operation, that\
            \ will be returned in the standard payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not delete reservations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/reservations/release:
    post:
      tags:
      - Locking
      - admin-reservations
      - cli_ignore
      summary: Releases existing reservations.
      description: "Given a list of {xname & reservation key}, releases the associated\
        \ reservations."
      requestBody:
        description: "List of {xname and reservation key} to release reservations.\
          \ A `rigid` processing model will result in the entire set of xnames not\
          \ having their reservation released if an xname doesn't exist, or isn't\
          \ reserved. A `flexible` processing model will perform all actions possible."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservedKeys.1.0.0'
        required: true
      responses:
        "202":
          description: Accepted. Returns a count + list of xnames that succeeded or
            failed the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: "Bad request; something is wrong with the structure received.\
            \ Will not be used to represent failure to accomplish the operation, that\
            \ will be returned in the standard payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not delete reservations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/reservations:
    post:
      tags:
      - Locking
      - admin-reservations
      - cli_ignore
      summary: Create reservations
      description: Creates reservations on a set of xnames of infinite duration.  Component
        must be locked to create a reservation.
      requestBody:
        description: "List of components to create reservations. A `rigid` processing\
          \ model will result in the entire set of xnames not having reservations\
          \ created if an xname doesn't exist, or isn't locked, or if already reserved.\
          \ A `flexible` processing model will perform all actions possible."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminReservationCreate.1.0.0'
        required: true
      responses:
        "202":
          description: Accepted request.  See response for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminReservationCreate_Response.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AdminReservationCreate_Response.1.0.0'
        "400":
          description: "Bad request; something is wrong with the structure received.\
            \ Will not be used to represent failure to accomplish the operation, that\
            \ will be returned in the standard payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not accept reservations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/service/reservations/release:
    post:
      tags:
      - Locking
      - service-reservations
      - cli_ignore
      summary: Releases existing reservations.
      description: "Given a list of {xname & reservation key}, releases the associated\
        \ reservations."
      requestBody:
        description: "List of {xname and reservation key} to release reservations.\
          \ A `rigid` processing model will result in the entire set of xnames not\
          \ having their reservation released if an xname doesn't exist, or isn't\
          \ reserved. A `flexible` processing model will perform all actions possible."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservedKeys.1.0.0'
        required: true
      responses:
        "202":
          description: Accepted. Returns a count + list of xnames that succeeded or
            failed the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: "Bad request; something is wrong with the structure received.\
            \ Will not be used to represent failure to accomplish the operation, that\
            \ will be returned in the standard payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not delete reservations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/service/reservations:
    post:
      tags:
      - Locking
      - service-reservations
      - cli_ignore
      summary: Create reservations
      description: Creates reservations on a set of xnames of finite duration.  Component
        must be unlocked to create a reservation.
      requestBody:
        description: "List of components to create reservations. A `rigid` processing\
          \ model will result in the entire set of xnames not having reservations\
          \ created if an xname doesn't exist, or isn't locked, or if already reserved.\
          \ A `flexible` processing model will perform all actions possible."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceReservationCreate.1.0.0'
        required: true
      responses:
        "202":
          description: Accepted request.  See response for details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceReservationCreate_Response.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceReservationCreate_Response.1.0.0'
        "400":
          description: "Bad request; something is wrong with the structure received.\
            \ Will not be used to represent failure to accomplish the operation, that\
            \ will be returned in the standard payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not accept reservations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/service/reservations/renew:
    post:
      tags:
      - Locking
      - service-reservations
      - cli_ignore
      summary: Renew existing reservations.
      description: "Given a list of {xname & reservation key}, renews the associated\
        \ reservations."
      requestBody:
        description: "List of {xname and reservation key} to renew reservations. A\
          \ `rigid` processing model will result in the entire set of xnames not having\
          \ their reservation renewed if an xname doesn't exist, or isn't reserved.\
          \ A `flexible` processing model will perform all actions possible."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservedKeysWithRenewal.1.0.0'
        required: true
      responses:
        "202":
          description: Accepted. Returns a count + list of xnames that succeeded or
            failed the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: "Bad request; something is wrong with the structure received.\
            \ Will not be used to represent failure to accomplish the operation, that\
            \ will be returned in the standard payload."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not delete reservations"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/service/reservations/check:
    post:
      tags:
      - Locking
      - service-reservations
      - cli_ignore
      summary: Check the validity of reservations.
      description: Using xname + reservation key check on the validity of reservations.
      requestBody:
        description: List of components & deputy keys to check on validity of reservations.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeputyKeys.1.0.0'
        required: true
      responses:
        "202":
          description: Created reservations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceReservationCheck_Response.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceReservationCheck_Response.1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not check reservations."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
  /locks/status:
    get:
      tags:
      - Locking
      - admin-locks
      summary: Retrieve lock status for all components or a filtered subset of components.
      description: Retrieve the status of all component locks and/or reservations.
        Results can be filtered by query parameters.
      parameters:
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: state
        in: query
        description: "Filter the results based on HMS state like Ready, On etc. Can\
          \ be specified multiple times for selecting entries in different states."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Unknown
          - Empty
          - Populated
          - "Off"
          - "On"
          - Standby
          - Halt
          - Ready
      - name: role
        in: query
        description: |-
          Filter the results based on HMS role. Can be specified multiple times for selecting entries with different roles. Valid values are:
          - Compute
          - Service
          - System
          - Application
          - Storage
          - Management
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/role' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subrole
        in: query
        description: |-
          Filter the results based on HMS subrole. Can be specified multiple times for selecting entries with different subroles. Valid values are:
          - Master
          - Worker
          - Storage
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/subrole' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: locked
        in: query
        description: Return components based on the 'Locked' field of their lock status.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: reserved
        in: query
        description: Return components based on the 'Reserved' field of their lock
          status.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: reservationDisabled
        in: query
        description: Return components based on the 'ReservationDisabled' field of
          their lock status.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: Got lock(s) status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStatusCheck_Response.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AdminStatusCheck_Response.1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not get lock status."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - Locking
      - admin-locks
      summary: Retrieve lock status for component IDs.
      description: Using component ID retrieve the status of any lock and/or reservation.
      requestBody:
        description: List of components to retrieve status.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Xnames'
        required: true
      responses:
        "200":
          description: Got lock(s) status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStatusCheck_Response.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/AdminStatusCheck_Response.1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not get lock status."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /locks/lock:
    post:
      tags:
      - Locking
      - admin-locks
      summary: Locks components.
      description: "Using a component create a lock.  Cannot be locked if already\
        \ locked, or if there is a current reservation."
      requestBody:
        description: List of xnames to lock.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLock.1.0.0'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more entries locked. Message
            contains count of locked items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not lock lock."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /locks/unlock:
    post:
      tags:
      - Locking
      - admin-locks
      summary: Unlocks components.
      description: Using a component unlock a lock.  Cannot be unlocked if already
        unlocked.
      requestBody:
        description: List of xnames to unlock.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLock.1.0.0'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more entries unlocked. Message
            contains count of unlocked locks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not unlock lock."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /locks/repair:
    post:
      tags:
      - Locking
      - admin-locks
      summary: Repair components lock and reservation ability.
      description: Repairs the disabled status of an xname allowing new reservations
        to be created.
      requestBody:
        description: List of xnames to repair.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLock.1.0.0'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more locks repaired. Message
            contains count of repaired locks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not repair lock."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /locks/disable:
    post:
      tags:
      - Locking
      - admin-locks
      summary: Disables the ability to create a reservation on components.
      description: "Disables the ability to create a reservation on components, deletes\
        \ any existing reservations. Does not change lock state. Attempting to disable\
        \ an already-disabled component will not result in an error."
      requestBody:
        description: List of xnames to disable.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLock.1.0.0'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more locks disabled. Message
            contains count of disabled locks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/XnameResponse_1.0.0'
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: "Server error, could not disable lock."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /Defaults/NodeMaps:
    get:
      tags:
      - NodeMap
      summary: "Retrieve all NodeMaps, returning NodeMapArray"
      description: "Retrieve all Node map entries as a named array, or an empty array\
        \ if the collection is empty."
      operationId: doNodeMapsGet
      responses:
        "200":
          description: Named NodeMaps array representing all xname locations that
            have defaults registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeMapArray_NodeMapArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NodeMapArray_NodeMapArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - NodeMap
      summary: Create or Modify NodeMaps
      description: |-
        Create or update the given set of NodeMaps whose ID fields are each a valid xname. The NID field is required and serves as the NID that will be used when a component with the same xname ID is created for the first time by discovery.
        Role is an optional field. A node is assigned the default (e.g. Compute) role when it is first created during discovery. The NID must be unique across all entries.
        SubRole is an optional field. A node is assigned no subrole by default when it is first created during discovery.

        The NodeMaps collection should be uploaded at install time by specifying it as a JSON file. As a result, when the endpoints are automatically discovered by REDS, and inventory discovery is performed by HSM, the desired NID numbers will be set as soon as the nodes are created using the NodeMaps collection. All node xnames that are expected to be used in the system should be included in the mapping, even if not currently populated.

        It is recommended that NodeMaps are uploaded at install time before discovery happens. If they are uploaded after discovery, then the node xnames need to be manually updated with the correct NIDs. You can update NIDs for individual components by using PATCH /State/Components/{xname}/NID.

        Note the following points:
        * If the POST operation contains an xname that already exists, the entry will be overwritten with the new entry (i.e. new NID, Role (if given), etc.).
        * The same NID cannot be used for more than one xname. If such a duplicate would be created, the operation will fail.
        * If the node has already been discovered for the first time (that is, it exists in /hsm/v2/State/Components and already has a previous/default NID), modifying the NodeMap entry will not automatically reassign the current NID.
        * If you wish to use POST to completely replace the current NodeMaps collection (rather than modifying it), first delete it using the DELETE method on the collection. Otherwise the current entries and the new ones will be merged if they are disjoint sets of nodes.
      operationId: doNodeMapPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeMapArray_NodeMapArray'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more entries created or
            updated.  Message contains count of new/modified items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource (NID) would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - NodeMap
      - "cli_danger$This will delete all node maps, continue?"
      summary: Delete all NodeMap entities
      description: Delete all entries in the NodeMaps collection.
      operationId: doNodeMapsDeleteAll
      responses:
        "200":
          description: Zero (success) error code - one or more entries deleted. Message
            contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Defaults/NodeMaps/{xname}:
    get:
      tags:
      - NodeMap
      summary: "Retrieve NodeMap at {xname}"
      description: "Retrieve NodeMap, i.e. defaults NID/Role/etc. for node located\
        \ at physical location {xname}."
      operationId: doNodeMapGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of NodeMap record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: NodeMap entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeMap.1.0.0_NodeMap'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NodeMap.1.0.0_NodeMap'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    put:
      tags:
      - NodeMap
      summary: "Update definition for NodeMap ID {xname}"
      description: |-
        Update or create an entry for an individual node xname using PUT. Note the following points:
        * If the PUT operation contains an xname that already exists, the entry will be overwritten with the new entry (i.e. new NID, Role (if given), etc.).
        * The same NID cannot be used for more than one xname. If such a duplicate would be created, the operation will fail.
        * If the node has already been discovered for the first time (that is, it exists in /hsm/v2/State/Components and already has a previous/default NID), modifying the NodeMap entry will not automatically reassign the current NID.
      operationId: doNodeMapPut
      parameters:
      - name: xname
        in: path
        description: Locational xname of NodeMap record to create or update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeMap.1.0.0_NodeMap'
        required: true
      responses:
        "200":
          description: NodeMap entry was successfully created/updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeMap.1.0.0_PostNodeMap'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/NodeMap.1.0.0_PostNodeMap'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource (NID) would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - NodeMap
      summary: "Delete NodeMap with ID {xname}"
      description: "Delete NodeMap entry for a specific node {xname}."
      operationId: doNodeMapDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of NodeMap record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - NodeMap is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/Hardware:
    get:
      tags:
      - HWInventoryByLocation
      summary: Retrieve all HWInventoryByLocation entries in array
      description: "Retrieve all HWInventoryByLocation entries. Note that all entries\
        \ are displayed as a flat array. For most purposes, you will want to use /Inventory/Hardware/Query."
      operationId: doHWInvByLocationGetAll
      parameters:
      - name: id
        in: query
        description: Filter the results based on xname ID(s). Can be specified multiple
          times for selecting entries with multiple specific xnames.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: manufacturer
        in: query
        description: Retrieve HWInventoryByLocation entries with the given Manufacturer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: partnumber
        in: query
        description: Retrieve HWInventoryByLocation entries with the given part number.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: serialnumber
        in: query
        description: Retrieve HWInventoryByLocation entries with the given serial
          number.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fruid
        in: query
        description: Retrieve HWInventoryByLocation entries with the given FRU ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Flat, unsorted HWInventoryByLocation array."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - HWInventoryByLocation
      - cli_ignore
      summary: Create/Update hardware inventory entries
      description: Create/Update hardware inventory entries
      operationId: doHWInvByLocationPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory_Hardware_body'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more entries created or
            updated.  Message contains count of new/modified items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
      x-codegen-request-body-name: payload
    delete:
      tags:
      - HWInventoryByLocation
      - "cli_danger$This will delete all hardware inventory, continue?"
      summary: Delete all HWInventoryByLocation entries
      description: Delete all entries in the HWInventoryByLocation collection. Note
        that this does not delete any associated HWInventoryByFRU entries.
      operationId: doHWInvByLocationDeleteAll
      responses:
        "200":
          description: Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/HardwareByFRU:
    get:
      tags:
      - HWInventoryByFRU
      summary: Retrieve all HWInventoryByFRU entries in a flat array
      description: "Retrieve all HWInventoryByFRU entries. Note that there is no organization\
        \ of the data, the entries are presented as a flat array. For most purposes,\
        \ you will want to use /Inventory/Hardware/Query unless you are interested\
        \ in components that are not currently installed anywhere."
      operationId: doHWInvByFRUGetAll
      parameters:
      - name: fruid
        in: query
        description: Retrieve HWInventoryByFRU entries with the given FRU ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: manufacturer
        in: query
        description: Retrieve HWInventoryByFRU entries with the given Manufacturer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: partnumber
        in: query
        description: Retrieve HWInventoryByFRU entries with the given part number.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: serialnumber
        in: query
        description: Retrieve HWInventoryByFRU entries with the given serial number.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Flat, unsorted HWInventoryByFRU array."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - HWInventoryByFRU
      - "cli_danger$This will delete all FRUs for HSM, continue?"
      summary: Delete all HWInventoryByFRU entries
      description: "Delete all entries in the HWInventoryByFRU collection. Note that\
        \ this does not delete any associated HWInventoryByLocation entries. Also,\
        \ if any items are associated with a HWInventoryByLocation, the deletion will\
        \ fail."
      operationId: doHWInvByFRUDeleteAll
      responses:
        "200":
          description: Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/Hardware/{xname}:
    get:
      tags:
      - HWInventoryByLocation
      summary: "Retrieve HWInventoryByLocation entry at {xname}"
      description: Retrieve HWInventoryByLocation entries for a specific xname.
      operationId: doHWInvByLocationGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of hardware inventory record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: HWInventoryByLocation entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
              example:
                ID: x0c0s0b0n0
                Type: Node
                Ordinal: 0
                Status: Populated
                HWInventoryByLocationType: HWInvByLocNode
                NodeLocationInfo:
                  Id: System.Embedded.1
                  Name: "Name describing system or where it is located, per manufacturing"
                  Description: "Description of system/node type, per manufacturing"
                  Hostname: if_defined_in_Redfish
                  ProcessorSummary:
                    Count: 2
                    Model: Multi-Core Intel(R) Xeon(R) processor E5-16xx Series
                  MemorySummary:
                    TotalSystemMemoryGiB: 64
                PopulatedFRU:
                  FRUID: Dell-99999-1234.1234.2345
                  Type: Node
                  Subtype: River
                  HWInventoryByFRUType: HWInvByFRUNode
                  NodeFRUInfo:
                    AssetTag: AdminAssignedAssetTag
                    BiosVersion: v1.0.2.9999
                    Model: OKS0P2354
                    Manufacturer: Dell
                    PartNumber: p99999
                    SerialNumber: 1234.1234.2345
                    SKU: as213234
                    SystemType: Physical
                    UUID: 26276e2a-29dd-43eb-8ca6-8186bbc3d971
                Processors:
                - ID: x0c0s0b0n0p0
                  Type: Processor
                  Ordinal: 0
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocProcessor
                  ProcessorLocationInfo:
                    Id: CPU1
                    Name: Processor
                    Description: Socket 1 Processor
                    Socket: CPU 1
                  PopulatedFRU:
                    FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
                    Type: Processor
                    Subtype: SKL24
                    HWInventoryByFRUType: HWInvByFRUProcessor
                    ProcessorFRUInfo:
                      InstructionSet: x86-64
                      Manufacturer: Intel
                      MaxSpeedMHz: 2600
                      Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
                      ProcessorArchitecture: x86
                      ProcessorId:
                        EffectiveFamily: 6
                        EffectiveModel: 79
                        IdentificationRegisters: 263921
                        MicrocodeInfo: 184549399
                        Step: 1
                        VendorID: GenuineIntel
                      ProcessorType: CPU
                      TotalCores: 24
                      TotalThreads: 48
                - ID: x0c0s0b0n0p1
                  Type: Processor
                  Ordinal: 1
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocProcessor
                  ProcessorLocationInfo:
                    Id: CPU2
                    Name: Processor
                    Description: Socket 2 Processor
                    Socket: CPU 2
                  PopulatedFRU:
                    FRUID: HOW-TO-ID-CPUS-FROM-REDFISH-IF-AT-ALL
                    Type: Processor
                    Subtype: SKL24
                    HWInventoryByFRUType: HWInvByFRUProcessor
                    ProcessorFRUInfo:
                      InstructionSet: x86-64
                      Manufacturer: Intel
                      MaxSpeedMHz: 2600
                      Model: Intel(R) Xeon(R) CPU E5-2623 v4 @ 2.60GHz
                      ProcessorArchitecture: x86
                      ProcessorId:
                        EffectiveFamily: 6
                        EffectiveModel: 79
                        IdentificationRegisters: 263921
                        MicrocodeInfo: 184549399
                        Step: 1
                        VendorID: GenuineIntel
                      ProcessorType: CPU
                      TotalCores: 24
                      TotalThreads: 48
                Memory:
                - ID: x0c0s0b0n0d0
                  Type: Memory
                  Ordinal: 0
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM1
                    Name: DIMM Slot 1
                    MemoryLocation:
                      Socket: 1
                      MemoryController: 1
                      Channel: 1
                      Slot: 1
                  PopulatedFRU:
                    FRUID: MFR-PARTNUMBER-SERIALNUMBER
                    Type: Memory
                    Subtype: DIMM2400G32
                    HWInventoryByFRUType: HWInvByFRUMemory
                    MemoryFRUInfo:
                      BaseModuleType: RDIMM
                      BusWidthBits: 72
                      CapacityMiB: 32768
                      DataWidthBits: 64
                      ErrorCorrection: MultiBitECC
                      Manufacturer: Micron
                      MemoryType: DRAM
                      MemoryDeviceType: DDR4
                      OperatingSpeedMhz: 2400
                      PartNumber: XYZ-123-1232
                      RankCount: 2
                      SerialNumber: 12344567689j
                - ID: x0c0s0b0n0d1
                  Type: Memory
                  Ordinal: 1
                  Status: Empty
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM2
                    Name: Socket 1 DIMM Slot 2
                    MemoryLocation:
                      Socket: 1
                      MemoryController: 1
                      Channel: 1
                      Slot: 2
                - ID: x0c0s0b0n0d2
                  Type: Memory
                  Ordinal: 2
                  Status: Populated
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM3
                    Name: Socket 2 DIMM Slot 1
                    MemoryLocation:
                      Socket: 2
                      MemoryController: 2
                      Channel: 1
                      Slot: 1
                  PopulatedFRU:
                    FRUID: MFR-PARTNUMBER-SERIALNUMBER_2
                    Type: Memory
                    Subtype: DIMM2400G32
                    HWInventoryByFRUType: HWInvByFRUMemory
                    MemoryFRUInfo:
                      BaseModuleType: RDIMM
                      BusWidthBits: 72
                      CapacityMiB: 32768
                      DataWidthBits: 64
                      ErrorCorrection: MultiBitECC
                      Manufacturer: Micron
                      MemoryType: DRAM
                      MemoryDeviceType: DDR4
                      OperatingSpeedMhz: 2400
                      PartNumber: XYZ-123-1232
                      RankCount: 2
                      SerialNumber: 346456346346j
                - ID: x0c0s0b0n0d3
                  Type: Memory
                  Ordinal: 3
                  Status: Empty
                  HWInventoryByLocationType: HWInvByLocMemory
                  MemoryLocationInfo:
                    Id: DIMM3
                    Name: Socket 2 DIMM Slot 2
                    MemoryLocation:
                      Socket: 2
                      MemoryController: 2
                      Channel: 1
                      Slot: 2
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - HWInventoryByLocation
      summary: "DELETE HWInventoryByLocation entry with ID (location) {xname}"
      description: Delete HWInventoryByLocation entry for a specific xname.
      operationId: doHWInvByLocationDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of HWInventoryByLocation record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/HardwareByFRU/{fruid}:
    get:
      tags:
      - HWInventoryByFRU
      summary: "Retrieve HWInventoryByFRU for {fruid}"
      description: Retrieve HWInventoryByFRU for a specific fruID.
      operationId: doHWInvByFRUGet
      parameters:
      - name: fruid
        in: path
        description: "Global HMS field-replaceable (FRU) identifier (serial number,\
          \ etc.) of the hardware component to select."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: HWInventoryByFRU entry matching fruid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - HWInventoryByFRU
      summary: "Delete HWInventoryByFRU entry with FRU identifier {fruid}"
      description: "Delete an entry in the HWInventoryByFRU collection. Note that\
        \ this does not delete the associated HWInventoryByLocation entry if the FRU\
        \ is currently residing in the system. In fact, if the FRU ID is associated\
        \ with a HWInventoryByLocation currently, the deletion will fail."
      operationId: doHWInvByFRUDelete
      parameters:
      - name: fruid
        in: path
        description: Locational xname of HWInventoryByFRU record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: FRU ID does Not Exist - no matching entry to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/Hardware/Query/{xname}:
    get:
      tags:
      - HWInventory
      summary: "Retrieve results of HWInventory query starting at {xname}"
      description: Retrieve zero or more HWInventoryByLocation entries in the form
        of a HWInventory by providing xname and modifiers in query string. The FRU
        (field-replaceable unit) data will be included in each HWInventoryByLocation
        entry if the location is populated.
      operationId: doHWInvByLocationQueryGet
      parameters:
      - name: xname
        in: path
        description: "Locational xname of parent component, system (e.g. s0, all)\
          \ or partition (p#.#) to target for hardware inventory"
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: children
        in: query
        description: Also return children of the selected components. Default is true.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: parents
        in: query
        description: Also return parents of the selected components.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: partition
        in: query
        description: Restrict search to the given partition (p#.#). Child components
          are assumed to be in the same partition as the parent component when performing
          this kind of query.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: format
        in: query
        description: |-
          How to display results
            FullyFlat      All component types listed in their own
                           arrays only.  No nesting of any children.
            NestNodesOnly  Flat except that node subcomponents are nested
                           hierarchically.
          Default is NestNodesOnly.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ComponentArray representing results of query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventory'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventory'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/Hardware/History:
    get:
      tags:
      - HWInventoryHistory
      summary: Retrieve the history entries for all HWInventoryByLocation entries
      description: Retrieve the history entries for all HWInventoryByLocation entries.
      operationId: doHWInvHistByLocationsGet
      parameters:
      - name: id
        in: query
        description: Filter the results based on xname ID(s). Can be specified multiple
          times for selecting entries with multiple specific xnames.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventtype
        in: query
        description: "Retrieve the history entries of a specific type (Added, Removed,\
          \ etc) for HWInventoryByLocation entries."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: Retrieve the history entries from after the requested history
          window start time for HWInventoryByLocation entries. This takes an RFC3339
          formatted string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: Retrieve the history entries from before the requested history
          window end time for HWInventoryByLocation entries. This takes an RFC3339
          formatted string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: An array of history entries sorted by xname.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryCollection'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryCollection'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - HWInventoryHistory
      - "cli_danger$This will delete all hardware history, continue?"
      summary: Clear the HWInventory history.
      description: Delete all HWInventory history entries. Note that this also deletes
        history for any associated HWInventoryByFRU entries.
      operationId: doHWInvHistByLocationDeleteAll
      responses:
        "200":
          description: Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/Hardware/History/{xname}:
    get:
      tags:
      - HWInventoryHistory
      summary: "Retrieve the history entries for the HWInventoryByLocation entry at\
        \ {xname}"
      description: Retrieve the history entries for a HWInventoryByLocation entry
        with a specific xname.
      operationId: doHWInvHistByLocationGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of hardware inventory record to return history
          for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: eventtype
        in: query
        description: "Retrieve the history entries of a specific type (Added, Removed,\
          \ etc) for a HWInventoryByLocation entry."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: Retrieve the history entries from after the requested history
          window start time for a HWInventoryByLocation entry. This takes an RFC3339
          formatted string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: Retrieve the history entries from before the requested history
          window end time for a HWInventoryByLocation entry. This takes an RFC3339
          formatted string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: History entries for the HWInventoryByLocation entry matching
            xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - HWInventoryHistory
      - "cli_danger$This will delete all history for this xname, continue?"
      summary: "DELETE history for the HWInventoryByLocation entry with ID (location)\
        \ {xname}"
      description: Delete history for the HWInventoryByLocation entry for a specific
        xname.
      operationId: doHWInvHistByLocationDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of HWInventoryByLocation record to delete history
          for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/HardwareByFRU/History:
    get:
      tags:
      - HWInventoryHistory
      summary: Retrieve the history entries for all HWInventoryByFRU entries.
      description: Retrieve the history entries for all HWInventoryByFRU entries.
        Sorted by FRU.
      operationId: doHWInvHistByFRUsGet
      parameters:
      - name: fruid
        in: query
        description: Retrieve the history entries for HWInventoryByFRU entries with
          the given FRU ID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: eventtype
        in: query
        description: "Retrieve the history entries of a specific type (Added, Removed,\
          \ etc) for HWInventoryByFRU entries."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: Retrieve the history entries from after the requested history
          window start time for HWInventoryByFRU entries. This takes an RFC3339 formatted
          string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: Retrieve the history entries from before the requested history
          window end time for HWInventoryByFRU entries. This takes an RFC3339 formatted
          string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: An array of history entries sorted by FRU.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryCollection'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryCollection'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/HardwareByFRU/History/{fruid}:
    get:
      tags:
      - HWInventoryHistory
      summary: "Retrieve the history entries for the HWInventoryByFRU for {fruid}"
      description: Retrieve the history entries for the HWInventoryByFRU for a specific
        fruID.
      operationId: doHWInvHistByFRUGet
      parameters:
      - name: fruid
        in: path
        description: "Global HMS field-replaceable (FRU) identifier (serial number,\
          \ etc.) of the hardware component to select."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: eventtype
        in: query
        description: "Retrieve the history entries of a specific type (Added, Removed,\
          \ etc) for a HWInventoryByFRU entry."
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: starttime
        in: query
        description: Retrieve the history entries from after the requested history
          window start time for a HWInventoryByFRU entry. This takes an RFC3339 formatted
          string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: endtime
        in: query
        description: Retrieve the history entries from before the requested history
          window end time for a HWInventoryByFRU entry. This takes an RFC3339 formatted
          string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: History entries for the HWInventoryByFRU entry matching fruid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - HWInventoryHistory
      - "cli_danger$This will delete all history for this FRU, continue?"
      summary: "Delete history for the HWInventoryByFRU entry with FRU identifier\
        \ {fruid}"
      description: Delete history for an entry in the HWInventoryByFRU collection.
      operationId: doHWInvHistByFRUDelete
      parameters:
      - name: fruid
        in: path
        description: Locational xname of HWInventoryByFRU record to delete history
          for.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) code - entry is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: FRU ID does Not Exist - no matching entry to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/RedfishEndpoints:
    get:
      tags:
      - RedfishEndpoint
      summary: "Retrieve all RedfishEndpoints, returning RedfishEndpointArray"
      description: "Retrieve all Redfish endpoint entries as a named array, optionally\
        \ filtering it."
      operationId: doRedfishEndpointsGet
      parameters:
      - name: id
        in: query
        description: Filter the results based on xname ID(s). Can be specified multiple
          times for selecting entries with multiple specific xnames.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: fqdn
        in: query
        description: Retrieve RedfishEndpoint with the given FQDN
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: uuid
        in: query
        description: Retrieve the RedfishEndpoint with the given UUID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: macaddr
        in: query
        description: Retrieve the RedfishEndpoint with the given MAC address.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ipaddress
        in: query
        description: Retrieve the RedfishEndpoint with the given IP address. A blank
          string will get Redfish endpoints without IP addresses.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: lastdiscoverystatus
        in: query
        description: "Retrieve the RedfishEndpoints with the given discovery status.\
          \ This can be negated (i.e. !DiscoverOK). Valid values are: EndpointInvalid,\
          \ EPResponseFailedDecode, HTTPsGetFailed, NotYetQueried, VerificationFailed,\
          \ ChildVerificationFailed, DiscoverOK"
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Named RedfishEndpoints array representing all current RF endpoints.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedfishEndpointArray_RedfishEndpointArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RedfishEndpointArray_RedfishEndpointArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - RedfishEndpoint
      summary: Create RedfishEndpoint(s)
      description: |-
        Create a new RedfishEndpoint whose ID field is a valid xname. ID can be given explicitly, or if the Hostname or hostname portion of the FQDN is given, and is a valid xname, this will be used for the ID instead.  The Hostname/Domain can be given as separate fields and will be used to create a FQDN if one is not given. The reverse is also true.  If FQDN is an IP address it will be treated as a hostname with a blank domain.  The domain field is used currently to assign the domain for discovered nodes automatically.

        If ID is given and is a valid XName, the hostname/domain/FQDN does not need to have an XName as the hostname portion. It can be any address.
        The ID and FQDN must be unique across all entries.
      operationId: doRedfishEndpointsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
        required: true
      responses:
        "201":
          description: "Success, returns array of created resource URIs"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
                x-content-type: application/json
              example:
              - URI: /hsm/v2/Inventory/RedfishEndpoints/x0c0s0b0
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - RedfishEndpoint
      - "cli_danger$This will delete all Redfish endpoints in HSM, continue?"
      summary: Delete all RedfishEndpoints
      description: Delete all entries in the RedfishEndpoint collection.
      operationId: doRedfishEndpointsDeleteAll
      responses:
        "200":
          description: Zero (success) error code - one or more entries deleted. Message
            contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/RedfishEndpoints/{xname}:
    get:
      tags:
      - RedfishEndpoint
      summary: "Retrieve RedfishEndpoint at {xname}"
      description: "Retrieve RedfishEndpoint, located at physical location {xname}."
      operationId: doRedfishEndpointGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of RedfishEndpoint record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: RedfishEndpoint entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    put:
      tags:
      - RedfishEndpoint
      - cli_ignore
      summary: "Update definition for RedfishEndpoint ID {xname}"
      description: Create or update RedfishEndpoint record for a specific xname.
      operationId: doRedfishEndpointPut
      parameters:
      - name: xname
        in: path
        description: Locational xname of RedfishEndpoint record to create or update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
        required: true
      responses:
        "200":
          description: "Success, return updated RedfishEndpoint resource"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - RedfishEndpoint
      summary: "Delete RedfishEndpoint with ID {xname}"
      description: Delete RedfishEndpoint record for a specific xname.
      operationId: doRedfishEndpointDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of RedfishEndpoint record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - component is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    patch:
      tags:
      - RedfishEndpoint
      summary: "Update (PATCH) definition for RedfishEndpoint ID {xname}"
      description: Update (PATCH) RedfishEndpoint record for a specific xname.
      operationId: doRedfishEndpointPatch
      parameters:
      - name: xname
        in: path
        description: Locational xname of RedfishEndpoint record to create or update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
        required: true
      responses:
        "200":
          description: "Success, return updated RedfishEndpoint resource"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /Inventory/RedfishEndpoints/Query/{xname}:
    get:
      tags:
      - RedfishEndpoint
      summary: "Retrieve RedfishEndpoint query for {xname}, returning RedfishEndpointArray"
      description: "Given xname and modifiers in query string, retrieve zero or more\
        \ RedfishEndpoint entries in the form of a RedfishEndpointArray."
      operationId: doRedfishEndpointQueryGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of RedfishEndpoint to query.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: RedfishEndpointArray representing results of query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RedfishEndpointArray_RedfishEndpointArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/RedfishEndpointArray_RedfishEndpointArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - no matches
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/ComponentEndpoints:
    get:
      tags:
      - ComponentEndpoint
      summary: Retrieve ComponentEndpoints Collection
      description: "Retrieve the full collection of ComponentEndpoints in the form\
        \ of a ComponentEndpointArray. Full results can also be filtered by query\
        \ parameters. Only the first filter parameter of each type is used and the\
        \ parameters are applied in an AND fashion. If the collection is empty or\
        \ the filters have no match, an empty array is returned."
      operationId: doComponentEndpointsGet
      parameters:
      - name: id
        in: query
        description: Filter the results based on xname ID(s). Can be specified multiple
          times for selecting entries with multiple specific xnames.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: redfish_ep
        in: query
        description: Retrieve all ComponentEndpoints managed by the parent Redfish
          EP.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: redfish_type
        in: query
        description: Retrieve all ComponentEndpoints with the given Redfish type.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ComponentEndpointArray representing the ComponentEndpoint collection
            or a filtered subset thereof.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentEndpointArray_ComponentEndpointArray'
              example:
                ComponentEndpoints:
                - ID: x0c0s0b0n0
                  Type: Node
                  Domain: mgmt.example.domain.com
                  FQDN: x0c0s0b0n0.mgmt.example.domain.com
                  RedfishType: ComputerSystem
                  RedfishSubtype: Physical
                  ComponentEndpointType: ComponentEndpointComputerSystem
                  MACAddr: d0:94:66:00:aa:37
                  UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                  OdataID: /redfish/v1/Systems/System.Embedded.1
                  RedfishEndpointID: x0c0s0b0
                  RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
                  RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
                  RedfishSystemInfo:
                    Name: System Embedded 1
                    Actions:
                      '#ComputerSystem.Reset':
                        AllowableValues:
                        - "On"
                        - ForceOff
                        target: /redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset
                    EthernetNICInfo:
                    - RedfishId: "1"
                      '@odata.id': /redfish/v1/Systems/System.Embedded.1/EthernetInterfaces/1
                      Description: Management Network Interface
                      InterfaceEnabled: true
                      MACAddress: "d0:94:66:00:aa:37,"
                      PermanentMACAddress: d0:94:66:00:aa:37
                    - RedfishId: "2"
                      '@odata.id': /redfish/v1/Systems/System.Embedded.1/EthernetInterfaces/2
                      Description: Management Network Interface
                      InterfaceEnabled: true
                      MACAddress: d0:94:66:00:aa:38
                      PermanentMACAddress: d0:94:66:00:aa:38
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ComponentEndpointArray_ComponentEndpointArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - ComponentEndpoint
      - "cli_danger$This will delete all component endpoints, continue?"
      summary: Delete all ComponentEndpoints
      description: Delete all entries in the ComponentEndpoint collection.
      operationId: doComponentEndpointsDeleteAll
      responses:
        "200":
          description: Zero (success) error code - one or more entries deleted. Message
            contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/ComponentEndpoints/{xname}:
    get:
      tags:
      - ComponentEndpoint
      summary: "Retrieve ComponentEndpoint at {xname}"
      description: Retrieve ComponentEndpoint record for a specific xname.
      operationId: doComponentEndpointGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of ComponentEndpoint record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: HWInventoryByLocation entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
              example:
                ID: x0c0s0b0n0
                Type: Node
                Domain: mgmt.example.domain.com
                FQDN: x0c0s0b0n0.mgmt.example.domain.com
                RedfishType: ComputerSystem
                RedfishSubtype: Physical
                ComponentEndpointType: ComponentEndpointComputerSystem
                MACAddr: d0:94:66:00:aa:37
                UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                OdataID: /redfish/v1/Systems/System.Embedded.1
                RedfishEndpointID: x0c0s0b0
                RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
                RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
                RedfishSystemInfo:
                  Name: System Embedded 1
                  Actions:
                    '#ComputerSystem.Reset':
                      AllowableValues:
                      - "On"
                      - ForceOff
                      target: /redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset
                  EthernetNICInfo:
                  - RedfishId: "1"
                    '@odata.id': /redfish/v1/Systems/System.Embedded.1/EthernetInterfaces/1
                    Description: Management Network Interface
                    InterfaceEnabled: true
                    MACAddress: d0:94:66:00:aa:37
                    PermanentMACAddress: d0:94:66:00:aa:37
                  - RedfishId: "2"
                    '@odata.id': /redfish/v1/Systems/System.Embedded.1/EthernetInterfaces/2
                    Description: Management Network Interface
                    InterfaceEnabled: true
                    MACAddress: ae:12:ce:7a:aa:99
                    PermanentMACAddress: ae:12:ce:7a:aa:99
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - ComponentEndpoint
      summary: "Delete ComponentEndpoint with ID {xname}"
      description: Delete ComponentEndpoint for a specific xname.
      operationId: doComponentEndpointDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of ComponentEndpoint record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - ComponentEndpoint is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/ServiceEndpoints:
    get:
      tags:
      - ServiceEndpoint
      summary: Retrieve ServiceEndpoints Collection
      description: "Retrieve the full collection of ServiceEndpoints in the form of\
        \ a ServiceEndpointArray. Full results can also be filtered by query parameters.\
        \  Only the first filter parameter of each type is used and the parameters\
        \ are applied in an AND fashion. If the collection is empty or the filters\
        \ have no match, an empty array is returned."
      operationId: doServiceEndpointsGetAll
      parameters:
      - name: redfish_ep
        in: query
        description: Retrieve all ServiceEndpoints managed by the parent Redfish EP.
          Can be repeated to select groups of endpoints.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: service
        in: query
        description: Retrieve all ServiceEndpoints of the given Redfish service.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: ServiceEndpointArray representing the ServiceEndpoint collection
            or a filtered subset thereof.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEndpointArray_ServiceEndpointArray'
              example:
                ServiceEndpoints:
                  RedfishEndpointID: x0c0s0b0
                  RedfishType: UpdateService
                  RedfishSubtype: Other
                  UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                  OdataID: /redfish/v1/UpdateService
                  RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
                  RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/UpdateService
                  ServiceInfo:
                    '@odata.context': /redfish/v1/$metadata#UpdateService.UpdateService
                    '@odata.id': /redfish/v1/UpdateService
                    '@odata.type': '#UpdateService.v1_1_0.UpdateService'
                    ID: UpdateService
                    Name: Update Service
                    Actions:
                      '#UpdateService.SimpleUpdate':
                        target: /redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset
                        title: ""
                    FirmwareInventory:
                      '@odata.id': /redfish/v1/UpdateService/FirmwareInventory
                    SoftwareInventory:
                      '@odata.id': /redfish/v1/UpdateService/SoftwareInventory
                    ServiceEnabled: "True"
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceEndpointArray_ServiceEndpointArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - ServiceEndpoint
      - "cli_danger$This will delete all service endpoints, continue?"
      summary: Delete all ServiceEndpoints
      description: Delete all entries in the ServiceEndpoint collection.
      operationId: doServiceEndpointsDeleteAll
      responses:
        "200":
          description: Zero (success) error code - one or more entries deleted. Message
            contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/ServiceEndpoints/{service}:
    get:
      tags:
      - ServiceEndpoint
      summary: "Retrieve all ServiceEndpoints of a {service}"
      description: Retrieve all ServiceEndpoint records for the Redfish service.
      operationId: doServiceEndpointsGet
      parameters:
      - name: service
        in: path
        description: The Redfish service type of the ServiceEndpoint records to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: redfish_ep
        in: query
        description: "Retrieve all ServiceEndpoints of type {service} managed by the\
          \ parent Redfish EP. Can be repeated to select groups of endpoints."
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "ServiceEndpointArray representing the subset of the ServiceEndpoint\
            \ collection filtered by {service} or additionally filtered thereof."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEndpointArray_ServiceEndpointArray'
              example:
                ServiceEndpoints:
                  RedfishEndpointID: x0c0s0b0
                  RedfishType: UpdateService
                  RedfishSubtype: Other
                  UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                  OdataID: /redfish/v1/UpdateService
                  RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
                  RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/UpdateService
                  ServiceInfo:
                    '@odata.context': /redfish/v1/$metadata#UpdateService.UpdateService
                    '@odata.id': /redfish/v1/UpdateService
                    '@odata.type': '#UpdateService.v1_1_0.UpdateService'
                    ID: UpdateService
                    Name: Update Service
                    Actions:
                      '#UpdateService.SimpleUpdate':
                        target: /redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset
                        title: ""
                    FirmwareInventory:
                      '@odata.id': /redfish/v1/UpdateService/FirmwareInventory
                    SoftwareInventory:
                      '@odata.id': /redfish/v1/UpdateService/SoftwareInventory
                    ServiceEnabled: "True"
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceEndpointArray_ServiceEndpointArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Service does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/ServiceEndpoints/{service}/RedfishEndpoints/{xname}:
    get:
      tags:
      - ServiceEndpoint
      summary: "Retrieve the ServiceEndpoint of a {service} managed by {xname}"
      description: Retrieve the ServiceEndpoint for a Redfish service that is managed
        by xname.
      operationId: doServiceEndpointGet
      parameters:
      - name: service
        in: path
        description: The Redfish service type of the ServiceEndpoint record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: xname
        in: path
        description: The locational xname of the RedfishEndpoint that manages the
          ServiceEndpoint record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "ServiceEndpoint entry matching {service}/{xname}"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceEndpoint.1.0.0_ServiceEndpoint'
              example:
                RedfishEndpointID: x0c0s0b0
                RedfishType: UpdateService
                RedfishSubtype: Other
                UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
                OdataID: /redfish/v1/UpdateService
                RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
                RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/UpdateService
                ServiceInfo:
                  '@odata.context': /redfish/v1/$metadata#UpdateService.UpdateService
                  '@odata.id': /redfish/v1/UpdateService
                  '@odata.type': '#UpdateService.v1_1_0.UpdateService'
                  ID: UpdateService
                  Name: Update Service
                  Actions:
                    '#UpdateService.SimpleUpdate':
                      target: /redfish/v1/Systems/System.Embedded.1/Actions/ComputerSystem.Reset
                      title: ""
                  FirmwareInventory:
                    '@odata.id': /redfish/v1/UpdateService/FirmwareInventory
                  SoftwareInventory:
                    '@odata.id': /redfish/v1/UpdateService/SoftwareInventory
                  ServiceEnabled: "True"
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ServiceEndpoint.1.0.0_ServiceEndpoint'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - ServiceEndpoint
      summary: "Delete the {service} ServiceEndpoint managed by {xname}"
      description: "Delete the {service} ServiceEndpoint managed by {xname}"
      operationId: doServiceEndpointDelete
      parameters:
      - name: service
        in: path
        description: The Redfish service type of the ServiceEndpoint record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: xname
        in: path
        description: The locational xname of the RedfishEndpoint that manages the
          ServiceEndpoint record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - ServiceEndpoint is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - no matching ServiceEndpoint to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/EthernetInterfaces:
    get:
      tags:
      - ComponentEthernetInterfaces
      summary: GET ALL existing component Ethernet interfaces
      description: "Get all component Ethernet interfaces that currently exist, optionally\
        \ filtering the set, returning an array of component Ethernet interfaces."
      operationId: doCompEthInterfacesGetV2
      parameters:
      - name: MACAddress
        in: query
        description: Retrieve the component Ethernet interface with the provided MAC
          address. Can be repeated to select multiple component Ethernet interfaces.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: IPAddress
        in: query
        description: Retrieve the component Ethernet interface with the provided IP
          address. Can be repeated to select multiple component Ethernet interfaces.
          A blank string will retrieve component Ethernet interfaces that have no
          IP address.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: Network
        in: query
        description: Retrieve the component Ethernet interface with a IP addresses
          on the provided  network. Can be repeated to select multiple component Ethernet
          interfaces. A blank string will retrieve component Ethernet interfaces that
          have an IP address with no  network.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: ComponentID
        in: query
        description: Retrieve all component Ethernet interfaces with the provided
          component ID. Can be repeated to select multiple component Ethernet interfaces.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: Type
        in: query
        description: Retrieve all component Ethernet interfaces with the provided
          parent HMS type. Can be repeated to select multiple component Ethernet interfaces.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: OlderThan
        in: query
        description: Retrieve all component Ethernet interfaces that were last updated
          before the specified time. This takes an RFC3339 formatted string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: NewerThan
        in: query
        description: Retrieve all component Ethernet interfaces that were last updated
          after the specified time. This takes an RFC3339 formatted string (2006-01-02T15:04:05Z07:00).
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: An array containing all existing component Ethernet interface
            objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompEthInterface.1.0.0'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompEthInterface.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - ComponentEthernetInterfaces
      summary: CREATE a new component Ethernet interface (via POST)
      description: Create a new component Ethernet interface.
      operationId: doCompEthInterfacePostV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompEthInterface.1.0.0'
        required: true
      responses:
        "201":
          description: "Success, returns array containing the created resource URI."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceURI.1.0.0'
              example:
                uri: /hsm/v2/Inventory/a4bf012b7311
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate component Ethernet interface would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - ComponentEthernetInterfaces
      - "cli_danger$This will delete all component Ethernet interfaces, continue?"
      summary: Clear the component Ethernet interface collection.
      description: Delete all component Ethernet interface entries.
      operationId: doCompEthInterfaceDeleteAllV2
      responses:
        "200":
          description: Zero (success) response code - one or more entries deleted.
            Message contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/EthernetInterfaces/{ethInterfaceID}:
    get:
      tags:
      - ComponentEthernetInterfaces
      summary: "GET existing component Ethernet interface {ethInterfaceID}"
      description: "Retrieve the component Ethernet interface which was created with\
        \ the given {ethInterfaceID}."
      operationId: doCompEthInterfaceGetV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "Component Ethernet interface entry identified by {ethInterfaceID},\
            \ if it exists."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompEthInterface.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/CompEthInterface.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - ComponentEthernetInterfaces
      summary: "DELETE existing component Ethernet interface with {ethInterfaceID}"
      description: "Delete the given component Ethernet interface with {ethInterfaceID}."
      operationId: doCompEthInterfaceDeleteV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - component Ethernet interface is
            deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - No component Ethernet interface with ethInterfaceID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    patch:
      tags:
      - ComponentEthernetInterfaces
      summary: "UPDATE metadata for existing component Ethernet interface {ethInterfaceID}"
      description: "To update the IP address, CompID, and/or description of a component\
        \ Ethernet interface, a PATCH operation can be used. Omitted fields are not\
        \ updated. The 'LastUpdate' field will be updated if an IP address is provided."
      operationId: doCompEthInterfacePatchV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompEthInterface.1.0.0_Patch'
        required: true
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: The component Ethernet interface with this ethInterfaceID does
            not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /Inventory/EthernetInterfaces/{ethInterfaceID}/IPAddresses:
    get:
      tags:
      - ComponentEthernetInterfaces
      summary: "Retrieve all IP addresses of a component Ethernet interface {ethInterfaceID}"
      description: "Retrieve all IP addresses of a component Ethernet interface {ethInterfaceID}"
      operationId: doCompEthInterfaceIPAddressesGetV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface to retrieve the IP
          addresses of.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "IP addresses of the component Ethernet interface entry identified\
            \ by {ethInterfaceID}, if it exists."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompEthInterface.1.0.0_IPAddressMapping'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompEthInterface.1.0.0_IPAddressMapping'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - ComponentEthernetInterfaces
      summary: CREATE a new IP address mapping in a component Ethernet interface (via
        POST)
      description: "Create a new IP address mapping in a component Ethernet interface\
        \ {ethInterfaceID}."
      operationId: doCompEthInterfaceIPAddressesPostV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface to add the IP address
          to.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompEthInterface.1.0.0_IPAddressMapping'
        required: true
      responses:
        "201":
          description: "Success, returns the created resource URI."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceURI.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate IP address in component Ethernet interface
            would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /Inventory/EthernetInterfaces/{ethInterfaceID}/IPAddresses/{ipAddress}:
    delete:
      tags:
      - ComponentEthernetInterfaces
      summary: "DELETE existing IP address mapping with {ipAddress} from a component\
        \ Ethernet interface with {ethInterfaceID}"
      description: "Delete the given IP address mapping with {ipAddress} from a component\
        \ Ethernet interface with {ethInterfaceID}. The 'LastUpdate' field of the\
        \ component Ethernet interface will be updated\""
      operationId: doCompEthInterfaceIPAddressDeleteV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface to delete the IP address
          from
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ipAddress
        in: path
        description: The IP address to delete from the component Ethernet interface.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - IP address mapping is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - No IP address with ipAddress exists on the
            specified component Ethernet interface
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    patch:
      tags:
      - ComponentEthernetInterfaces
      summary: "UPDATE metadata for existing IP address {ipAddress} in a component\
        \ Ethernet interface {ethInterfaceID"
      description: "\"To update the network of an IP address in a component Ethernet\
        \ interface, a PATCH operation can be used. Omitted fields are not updated.\
        \ The 'LastUpdate' field of the component Ethernet interface will be updated\""
      operationId: doCompEthInterfaceIPAddressPatchV2
      parameters:
      - name: ethInterfaceID
        in: path
        description: The ID of the component Ethernet interface with the IP address
          to patch.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: ipAddress
        in: path
        description: The IP address to patch from the component Ethernet interface.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompEthInterface.1.0.0_IPAddressMapping_Patch'
        required: true
      responses:
        "200":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - No IP address with ipAddress exists on the
            specified component Ethernet interface.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /Inventory/DiscoveryStatus:
    get:
      tags:
      - DiscoveryStatus
      summary: Retrieve all DiscoveryStatus entries in collection
      description: Retrieve all DiscoveryStatus entries as an unnamed array.
      operationId: doDiscoveryStatusGetAll
      responses:
        "200":
          description: Unnamed DiscoveryStatus array representing all entries in collection.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscoveryStatus.1.0.0_DiscoveryStatus'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscoveryStatus.1.0.0_DiscoveryStatus'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/DiscoveryStatus/{id}:
    get:
      tags:
      - DiscoveryStatus
      summary: "Retrieve DiscoveryStatus entry matching {id}"
      description: Retrieve DiscoveryStatus entry with the specific ID.
      operationId: doDiscoveryStatusGet
      parameters:
      - name: id
        in: path
        description: Positive integer ID of DiscoveryStatus entry to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: number
          format: int32
      responses:
        "200":
          description: Success.  Returns matching DiscoveryStatus entry.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryStatus.1.0.0_DiscoveryStatus'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/DiscoveryStatus.1.0.0_DiscoveryStatus'
        "400":
          description: "Bad Request, e.g. not a positive integer"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Not found (no such ID)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Inventory/Discover:
    post:
      tags:
      - Discover
      summary: Create Discover operation request
      description: "Discover and populate database with component data (ComponentEndpoints,\
        \ HMS Components, HWInventory) based on interrogating RedfishEndpoint entries.\
        \  If not all RedfishEndpoints should be discovered, an array of xnames can\
        \ be provided in the DiscoverInput payload."
      operationId: doInventoryDiscoverPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discover.1.0.0_DiscoverInput'
        required: false
      responses:
        "200":
          description: "Success, discovery started.  DiscoverStatus link(s) to check\
            \ in returned URI array."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
                x-content-type: application/json
              example:
              - URI: /hsm/v2/Inventory/DiscoveryStatus/0
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: One or more requested RedfishEndpoint xname IDs was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict.  One or more DiscoveryStatus objects is InProgress
            or Pending and prevents this operation from starting. Try again later
            or use force option (should never be needed unless some kind of problem
            has occurred).  Simultaneous discoveries could cause one or both to fail.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /Subscriptions/SCN:
    get:
      tags:
      - SCN
      - cli_ignore
      summary: Retrieve currently-held state change notification subscriptions
      description: Retrieve all information on currently held state change notification
        subscriptions.
      operationId: doGetSCNSubscriptionsAll
      responses:
        "200":
          description: Success. Currently held subscriptions are returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions_SCNSubscriptionArray'
        "500":
          description: Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - SCN
      - cli_ignore
      summary: Create a subscription for state change notifications
      description: Request a subscription for state change notifications for a set
        of component states. This will create a new subscription and produce a unique
        ID for the subscription. This will not affect the existing subscriptions.
      operationId: doPostSCNSubscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriptions_SCNPostSubscription'
        required: true
      responses:
        "200":
          description: A new subscription was created. The subscription ID is included
            in the response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions_SCNSubscriptionArrayItem.1.0.0'
        "400":
          description: Bad Request. Malformed JSON. Verify all JSON formatting in
            payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: The subscription already exists for the specified subscriber
            and URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - SCN
      - cli_ignore
      summary: Delete all state change notification subscriptions
      description: Delete all subscriptions.
      operationId: doDeleteSCNSubscriptionsAll
      responses:
        "200":
          description: Success. Subscriptions deleted successfully.
          content: {}
        "500":
          description: Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /Subscriptions/SCN/{id}:
    get:
      tags:
      - SCN
      - cli_ignore
      summary: Retrieve a currently-held state change notification subscription
      description: Return the information on a currently held state change notification
        subscription
      operationId: doGetSCNSubscription
      parameters:
      - name: id
        in: path
        description: This is the ID associated with the subscription that was generated
          at its creation.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Success. A currently held subscription is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriptions_SCNPostSubscription'
        "500":
          description: Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    put:
      tags:
      - SCN
      - cli_ignore
      summary: Update a subscription for state change notifications
      description: Update an existing state change notification subscription in whole.
        This will overwrite the specified subscription.
      operationId: doPutSCNSubscription
      parameters:
      - name: id
        in: path
        description: This is the ID associated with the subscription that was generated
          at its creation.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriptions_SCNPostSubscription'
        required: true
      responses:
        "204":
          description: Success. The subscription has been overwritten.
          content: {}
        "400":
          description: Bad Request. Malformed JSON. Verify all JSON formatting in
            payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: The subscription does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - SCN
      - cli_ignore
      summary: Delete a state change notification subscription
      description: Delete a state change notification subscription.
      operationId: doDeleteSCNSubscription
      parameters:
      - name: id
        in: path
        description: This is the ID associated with the subscription that was generated
          at its creation.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Success. Subscription deleted successfully.
          content: {}
        "400":
          description: Bad Request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    patch:
      tags:
      - SCN
      - cli_ignore
      summary: Update a subscription for state change notifications
      description: Update a subscription for state change notifications to add or
        remove triggers.
      operationId: doPatchSCNSubscription
      parameters:
      - name: id
        in: path
        description: This is the ID associated with the subscription that was generated
          at its creation.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriptions_SCNPatchSubscription'
        required: true
      responses:
        "204":
          description: Success.
          content: {}
        "400":
          description: Bad Request. Malformed JSON. Verify all JSON formatting in
            payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "500":
          description: Internal server error. Database error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /groups:
    get:
      tags:
      - Group
      summary: Retrieve all existing groups
      description: "Retrieve all groups that currently exist, optionally filtering\
        \ the set, returning an array of groups."
      operationId: doGroupsGet
      parameters:
      - name: group
        in: query
        description: Retrieve the group with the provided group label. Can be repeated
          to select multiple groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tag
        in: query
        description: Retrieve all groups associated with the given free-form tag from
          the tags field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Groups array containing all existing group objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group.1.0.0'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - Group
      summary: Create a new group
      description: |-
        Create a new group identified by the group_label field. Label should be given explicitly, and should not conflict with any existing group, or an error will occur.

        Note that if the exclusiveGroup field is present, the group is not allowed to add a member that exists under a different group/label where the exclusiveGroup field is the same. This can be used to create groups of groups where a component may only be present in one of the set.
      operationId: doGroupsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group.1.0.0'
        required: true
      responses:
        "201":
          description: "Success, returns array containing the created resource URI."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
                x-content-type: application/json
              example:
              - uri: /hsm/v2/groups/mygrouplabel
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /groups/{group_label}:
    get:
      tags:
      - Group
      summary: "Retrieve existing group {group_label}"
      description: "Retrieve the group which was created with the given {group_label}."
      operationId: doGroupGet
      parameters:
      - name: group_label
        in: path
        description: Label name of the group to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: partition
        in: query
        description: AND the members set by the given partition name (p#.#).  NULL
          will return the group members not in ANY partition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Group entry identified by {group_label}, if it exists."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Group.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - Group
      summary: "Delete existing group with {group_label}"
      description: "Delete the given group with {group_label}. Any members previously\
        \ in the group will no longer have the deleted group label associated with\
        \ them."
      operationId: doGroupDelete
      parameters:
      - name: group_label
        in: path
        description: Label (i.e. name) of the group to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - component is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - No group matches label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    patch:
      tags:
      - Group
      summary: "Update metadata for existing group {group_label}"
      description: "To update the tags array and/or description, a PATCH operation\
        \ can be used.  Omitted fields are not updated. This cannot be used to completely\
        \ replace the members list. Rather, individual members can be removed or added\
        \ with the POST/DELETE {group_label}/members API below."
      operationId: doGroupPatch
      parameters:
      - name: group_label
        in: path
        description: Label (i.e. name) of the group to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group.1.0.0_Patch'
        required: true
      responses:
        "204":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: The group with this label did not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /groups/labels:
    get:
      tags:
      - Group
      summary: Retrieve all existing group labels
      description: Retrieve a string array of all group labels (i.e. group names)
        that currently exist in HSM.
      operationId: doGroupLabelsGet
      responses:
        "200":
          description: "Array of group labels which form the names of all existing\
            \ groups, or an empty array if none currently exist."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
              example:
              - blue
              - green
              - red
              - compute_a
            application/problem+json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /groups/{group_label}/members:
    get:
      tags:
      - Group
      summary: Retrieve all members of existing group
      description: "Retrieve members of an existing group {group_label}, optionally\
        \ filtering the set, returning a members set containing the component xname\
        \ IDs."
      operationId: doGroupMembersGet
      parameters:
      - name: group_label
        in: path
        description: "Specifies an existing group {group_label} to query the members\
          \ of."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: partition
        in: query
        description: AND the members set by the given partition name (p#.#).  NULL
          will return the group members not in ANY partition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: "Members set including component xname IDs which are members\
            \ of group {group_label}.  If none exist, an empty array with be returned."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Members.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: "Does not exist - No such group {group_label}"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - Group
      summary: Create new member of existing group (via POST)
      description: "Create a new member of group {group_label} with the component\
        \ xname ID provided in the payload. New member should not already exist in\
        \ the given group."
      operationId: doGroupMembersPost
      parameters:
      - name: group_label
        in: path
        description: "Specifies an existing group {group_label} to add the new member\
          \ to."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberID'
        required: true
      responses:
        "201":
          description: "Success, returns array containing the created member URI."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
                x-content-type: application/json
              example:
              - uri: /hsm/v2/groups/mygrouplabel/members/x0c0s1b0n0
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request - e.g. malformed string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: "Does not exist - No such group {group_label}"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /groups/{group_label}/members/{xname_id}:
    delete:
      tags:
      - Group
      summary: Delete member from existing group
      description: "Delete component {xname_id} from the members of group {group_label}."
      operationId: doGroupMemberDelete
      parameters:
      - name: group_label
        in: path
        description: "Specifies an existing group {group_label} to remove the member\
          \ from."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: xname_id
        in: path
        description: "Member of {group_label} to remove."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - entry deleted. Message contains
            count of deleted items (should always be one).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: "Bad Request, malformed group label or component xname_id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - no such member or group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /partitions:
    get:
      tags:
      - Partition
      summary: Retrieve all existing partitions
      description: "Retrieve all partitions that currently exist, optionally filtering\
        \ the set, returning an array of partition records."
      operationId: doPartitionsGet
      parameters:
      - name: partition
        in: query
        description: Retrieve the partition with the provided partition name (p#.#).
          Can be repeated to select multiple partitions.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tag
        in: query
        description: Retrieve all partitions associated with the given free-form tag
          from the tags field.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Array containing all existing partition objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partition.1.0.0'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Partition.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - Partition
      summary: Create new partition (via POST)
      description: "Create a new partition identified by the partition_name field.\
        \ Partition names should be of the format p# or p#.# (hard_part.soft_part).\
        \ Partition name should be given explicitly, and should not conflict with\
        \ any existing partition, or an error will occur.  In addition, the member\
        \ list must not overlap with any existing partition."
      operationId: doPartitionsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partition.1.0.0'
        required: true
      responses:
        "201":
          description: "Success, returns array containing the created resource URI."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
                x-content-type: application/json
              example:
              - uri: /hsm/v2/partitions/p1
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /partitions/{partition_name}:
    get:
      tags:
      - Partition
      summary: "Retrieve existing partition {partition_name}"
      description: "Retrieve the partition which was created with the given {partition_name}."
      operationId: doPartitionGet
      parameters:
      - name: partition_name
        in: path
        description: Partition name to be retrieved
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "Partition entry identified by {partition_name}, if it exists."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partition.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Partition.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    delete:
      tags:
      - Partition
      summary: "Delete existing partition with {partition_name}"
      description: "Delete partition {partition_name}. Any members previously in the\
        \ partition will no longer have the deleted partition name associated with\
        \ them."
      operationId: doPartitionDelete
      parameters:
      - name: partition_name
        in: path
        description: Partition name of the partition to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - component is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - No partition matches partition_name.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    patch:
      tags:
      - Partition
      summary: "Update metadata for existing partition {partition_name}"
      description: "Update the tags array and/or description by using PATCH. Omitted\
        \ fields are not updated. This cannot be used to completely replace the members\
        \ list. Rather, individual members can be removed or added with the POST/DELETE\
        \ {partition_name}/members API."
      operationId: doPartitionPatch
      parameters:
      - name: partition_name
        in: path
        description: Name of the partition to update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partition.1.0.0_Patch'
        required: true
      responses:
        "204":
          description: Success
          content: {}
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: The partition with this partition_name did not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /partitions/names:
    get:
      tags:
      - Partition
      summary: Retrieve all existing partition names
      description: "Retrieve a string array of all partition names that currently\
        \ exist in HSM. These are just the names, not the complete partition records."
      operationId: doPartitionNamesGet
      responses:
        "200":
          description: "Array of partition names comprising all partitions known to\
            \ HSM at the present time, or an empty array if none currently exist."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
              example:
              - p1
              - p2
            application/problem+json:
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /partitions/{partition_name}/members:
    get:
      tags:
      - Partition
      summary: Retrieve all members of existing partition
      description: "Retrieve all members of existing partition {partition_name}, optionally\
        \ filtering the set, returning a members set that includes the component xname\
        \ IDs."
      operationId: doPartitionMembersGet
      parameters:
      - name: partition_name
        in: path
        description: "Existing partition {partition_name} to query the members of."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "Members set including component xname IDs which are members\
            \ of partition {partition_name}.  If none exist, an empty array will be\
            \ returned."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Members.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Members.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: "Does not exist - No such partition {partition_name}"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - Partition
      summary: Create new member of existing partition (via POST)
      description: "Create a new member of partition {partition_name} with the component\
        \ xname ID provided in the payload. New member should not already exist in\
        \ the given partition"
      operationId: doPartitionMembersPost
      parameters:
      - name: partition_name
        in: path
        description: "Existing partition {partition_name} to add the new member to."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberID'
        required: true
      responses:
        "201":
          description: "Success, returns array containing the created member URI."
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
                x-content-type: application/json
              example:
              - uri: /hsm/v2/partitions/p1/members/x0c0s1b0n0
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceURI.1.0.0'
        "400":
          description: Bad Request - Bad partition_name or malformed string?
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: "Does not exist - No such partition {partition_name}"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "409":
          description: Conflict. Duplicate resource would be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
  /partitions/{partition_name}/members/{xname_id}:
    delete:
      tags:
      - Partition
      summary: Delete member from existing partition
      description: "Delete component {xname_id} from the members of partition {partition_name}."
      operationId: doPartitionMemberDelete
      parameters:
      - name: partition_name
        in: path
        description: "Existing partition {partition_name} to remove the member from."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: xname_id
        in: path
        description: "Member of {partition_name} to remove."
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - entry deleted. Message contains
            count of deleted items (should always be one).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: "Bad Request, malformed partition_name or xname_id"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - no such member or partition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /memberships:
    get:
      tags:
      - Membership
      summary: Retrieve all memberships for components
      description: Display group labels and partition names for each component xname
        ID (where applicable).
      operationId: doMembershipsGet
      parameters:
      - name: id
        in: query
        description: Filter the results based on xname ID(s). Can be specified multiple
          times for selecting entries with multiple specific xnames.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: "Filter the results based on HMS type like Node, NodeEnclosure,\
          \ NodeBMC etc. Can be specified multiple times for selecting entries of\
          \ multiple types."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - CDU
          - CabinetCDU
          - CabinetPDU
          - CabinetPDUOutlet
          - CabinetPDUPowerConnector
          - CabinetPDUController
          - Cabinet
          - Chassis
          - ChassisBMC
          - CMMRectifier
          - CMMFpga
          - CEC
          - ComputeModule
          - RouterModule
          - NodeBMC
          - NodeEnclosure
          - NodeEnclosurePowerSupply
          - HSNBoard
          - MgmtSwitch
          - MgmtHLSwitch
          - CDUMgmtSwitch
          - Node
          - Processor
          - Drive
          - StorageGroup
          - NodeNIC
          - Memory
          - NodeAccel
          - NodeAccelRiser
          - NodeFpga
          - HSNAsic
          - RouterFpga
          - RouterBMC
          - HSNLink
          - HSNConnector
          - INVALID
      - name: state
        in: query
        description: "Filter the results based on HMS state like Ready, On etc. Can\
          \ be specified multiple times for selecting entries in different states."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - Unknown
          - Empty
          - Populated
          - "Off"
          - "On"
          - Standby
          - Halt
          - Ready
      - name: flag
        in: query
        description: "Filter the results based on HMS flag value like OK, Alert etc.\
          \ Can be specified multiple times for selecting entries with different flags."
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - OK
          - Warning
          - Alert
          - Locked
          - Unknown
      - name: role
        in: query
        description: |-
          Filter the results based on HMS role. Can be specified multiple times for selecting entries with different roles. Valid values are:
          - Compute
          - Service
          - System
          - Application
          - Storage
          - Management
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/role' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subrole
        in: query
        description: |-
          Filter the results based on HMS subrole. Can be specified multiple times for selecting entries with different subroles. Valid values are:
          - Master
          - Worker
          - Storage
          Additional valid values may be added via configuration file. See the results of 'GET /service/values/subrole' for the complete list.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: enabled
        in: query
        description: Filter the results based on enabled status (true or false).
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: softwarestatus
        in: query
        description: Filter the results based on software status. Software status
          is a free form string. Matching is case-insensitive. Can be specified multiple
          times for selecting entries with different software statuses.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: subtype
        in: query
        description: Filter the results based on HMS subtype. Can be specified multiple
          times for selecting entries with different subtypes.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: arch
        in: query
        description: Filter the results based on architecture. Can be specified multiple
          times for selecting components with different architectures.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - X86
          - ARM
          - Other
          - Unknown
      - name: class
        in: query
        description: Filter the results based on HMS hardware class. Can be specified
          multiple times for selecting entries with different classes.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - River
          - Mountain
          - Hill
      - name: nid
        in: query
        description: Filter the results based on NID. Can be specified multiple times
          for selecting entries with multiple specific NIDs.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nid_start
        in: query
        description: Filter the results based on NIDs equal to or greater than the
          provided integer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: nid_end
        in: query
        description: Filter the results based on NIDs less than or equal to the provided
          integer.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: partition
        in: query
        description: Restrict search to the given partition (p#.#). One partition
          can be combined with at most one group argument which will be treated as
          a logical AND. NULL will return components in NO partition.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: group
        in: query
        description: Restrict search to the given group label. One group can be combined
          with at most one partition argument which will be treated as a logical AND.
          NULL will return components in NO groups.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Array containing component xname IDs to their group and partition
            memberships.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Membership.1.0.0'
                x-content-type: application/json
            application/problem+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Membership.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /memberships/{xname}:
    get:
      tags:
      - Membership
      summary: "Retrieve membership for component {xname}"
      description: Display group labels and partition names for a given component
        xname ID.
      operationId: doMembershipGet
      parameters:
      - name: xname
        in: path
        description: Component xname ID (i.e. locational identifier)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: "Membership info for component at {xname}"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Membership.1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Membership.1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Not Found - no such xname.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /sysinfo/powermaps:
    get:
      tags:
      - PowerMap
      summary: "Retrieve all PowerMaps, returning PowerMapArray"
      description: "Retrieve all power map entries as a named array, or an empty array\
        \ if the collection is empty."
      operationId: doPowerMapsGet
      responses:
        "200":
          description: Named PowerMaps array.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerMapArray_PowerMapArray'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/PowerMapArray_PowerMapArray'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    post:
      tags:
      - PowerMap
      summary: Create or Modify PowerMaps
      description: Create or update the given set of PowerMaps whose ID fields are
        each a valid xname. The poweredBy field is required.
      operationId: doPowerMapsPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PowerMapArray_PowerMapArray'
        required: true
      responses:
        "200":
          description: Zero (success) error code - one or more entries created or
            updated.  Message contains count of new/modified items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - PowerMap
      - cli_ignore
      summary: Delete all PowerMap entities
      description: Delete all entries in the PowerMaps collection.
      operationId: doPowerMapsDeleteAll
      responses:
        "200":
          description: Zero (success) error code - one or more entries deleted. Message
            contains count of deleted items.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist - Collection is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /sysinfo/powermaps/{xname}:
    get:
      tags:
      - PowerMap
      summary: "Retrieve PowerMap at {xname}"
      description: "Retrieve PowerMap for a component located at physical location\
        \ {xname}."
      operationId: doPowerMapGet
      parameters:
      - name: xname
        in: path
        description: Locational xname of PowerMap record to return.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: PowerMap entry matching xname/ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PowerMap.1.0.0_PowerMap'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/PowerMap.1.0.0_PowerMap'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: Does Not Exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
    put:
      tags:
      - PowerMap
      summary: "Update definition for PowerMap ID {xname}"
      description: "Update or create an entry for an individual component xname using\
        \ PUT. If the PUT operation contains an xname that already exists, the entry\
        \ will be overwritten with the new entry."
      operationId: doPowerMapPut
      parameters:
      - name: xname
        in: path
        description: Locational xname of PowerMap record to create or update.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PowerMap.1.0.0_PowerMap'
        required: true
      responses:
        "200":
          description: Zero (success) error code - PowerMap was created/updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-codegen-request-body-name: payload
    delete:
      tags:
      - PowerMap
      summary: "Delete PowerMap with ID {xname}"
      description: "Delete PowerMap entry for a specific component {xname}."
      operationId: doPowerMapDelete
      parameters:
      - name: xname
        in: path
        description: Locational xname of PowerMap record to delete.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Zero (success) error code - PowerMap is deleted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Response_1.0.0'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        "404":
          description: XName does Not Exist - no matching ID to delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
components:
  schemas:
    Component.1.0.0_Component:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XName.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        State:
          $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
        Enabled:
          type: boolean
          description: "Whether component is enabled. True when enabled, false when\
            \ disabled."
        SoftwareStatus:
          type: string
          description: "SoftwareStatus of a node, used by the managed plane for running\
            \ nodes.  Will be missing for other component types or if not set by software."
        Role:
          $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRole:
          $ref: '#/components/schemas/HMSSubRole.1.0.0'
        NID:
          type: integer
          description: This is the integer Node ID if the component is a node.
          example: 1
        Subtype:
          type: string
          description: Further distinguishes between components of same type.
          readOnly: true
        NetType:
          $ref: '#/components/schemas/NetType.1.0.0'
        Arch:
          $ref: '#/components/schemas/HMSArch.1.0.0'
        Class:
          $ref: '#/components/schemas/HMSClass.1.0.0'
        ReservationDisabled:
          type: boolean
          description: "Whether component can be reserved via the locking API. True\
            \ when reservations are disabled, thus no new reservations can be created\
            \ on this component."
          readOnly: true
          example: false
        Locked:
          type: boolean
          description: Whether a component is locked via the locking API.
          readOnly: true
          example: false
      description: This is the logical representation of a component for which state
        is tracked and includes other variables that may be needed by clients. It
        is keyed by the physical location i.e. xname.
      example:
        NID: 1
        Enabled: true
        Arch: X86
        Flag: OK
        SubRole: Worker
        Role: Compute
        Locked: false
        Type: Node
        State: Ready
        ReservationDisabled: false
        SoftwareStatus: SoftwareStatus
        Class: River
        ID: x0c0s0b0n0
        Subtype: Subtype
        NetType: Sling
    Component.1.0.0_ComponentCreate:
      required:
      - ID
      - State
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XNameRW.1.0.0'
        State:
          $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
        Enabled:
          type: boolean
          description: "Whether component is enabled. True when enabled, false when\
            \ disabled."
        SoftwareStatus:
          type: string
          description: "SoftwareStatus of a node, used by the managed plane for running\
            \ nodes.  Will be missing for other component types or if not set by software."
        Role:
          $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRole:
          $ref: '#/components/schemas/HMSSubRole.1.0.0'
        NID:
          type: integer
          description: This is the integer Node ID if the component is a node.
          example: 1
        Subtype:
          type: string
          description: Further distinguishes between components of same type.
        NetType:
          $ref: '#/components/schemas/NetType.1.0.0'
        Arch:
          $ref: '#/components/schemas/HMSArch.1.0.0'
        Class:
          $ref: '#/components/schemas/HMSClass.1.0.0'
      description: This is the logical representation of a component for which state
        is tracked and includes other variables that may be needed by clients. It
        is keyed by the physical location i.e. xname.
    Component.1.0.0_Put:
      required:
      - Component
      type: object
      properties:
        Component:
          $ref: '#/components/schemas/Component.1.0.0_ComponentCreate'
        Force:
          type: boolean
          description: "If true, 'force' causes this operation to overwrite the 'State',\
            \ 'Flag', 'Subtype', 'NetType', and 'Arch' fields for the specified component\
            \ if it already exists. Otherwise, nothing will be overwritten."
      description: This is the payload of a state components URI put operation on
        a component.
    Component.1.0.0_Patch.StateData:
      required:
      - State
      type: object
      properties:
        State:
          $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
        Force:
          type: boolean
          description: "If the state change is normally prohibited, due to the current\
            \ and new states, force the change anyways.  Default is false."
          example: false
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is the payload of a StateData URI patch operation on a component.
        Flag ID optional and will be reset to OK if no Flag value is given.
    Component.1.0.0_Patch.FlagOnly:
      required:
      - Flag
      type: object
      properties:
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is the payload of a FlagOnly patch operation on a component.
        Flag is required and the State field is unmodified regardless of the value
        given.
    Component.1.0.0_Patch.Enabled:
      required:
      - Enabled
      type: object
      properties:
        Enabled:
          type: boolean
          description: Component Enabled(true)/Disabled(false) flag
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: "This is the payload of a Enabled patch operation on a Component.\
        \ Enabled is required, and is a boolean field with true representing enabled\
        \ and false disabled."
    Component.1.0.0_Patch.SoftwareStatus:
      type: object
      properties:
        SoftwareStatus:
          type: string
          description: "Component/node software status field, reserved for managed\
            \ plane."
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is the payload of a SoftwareStatus patch operation on a Component.
    Component.1.0.0_Patch.Role:
      required:
      - Role
      type: object
      properties:
        Role:
          $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRole:
          $ref: '#/components/schemas/HMSSubRole.1.0.0'
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: "This is the payload of a Role patch operation on a Component.\
        \ Role is required, however operation will fail if Role is not a supported\
        \ property of the corresponding HMS type."
    Component.1.0.0_Patch.NID:
      required:
      - NID
      type: object
      properties:
        NID:
          type: integer
          description: This is the integer Node ID if the component is a node.
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is the payload of a NID patch operation on a Component. NID
        is required but the operation will fail if NID is not a valid
    Component.1.0.0_PatchArrayItem.NID:
      required:
      - ID
      - NID
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        NID:
          type: integer
          description: This is the integer Node ID if the component is a node.
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: "This is one entry in a NID patch operation on an entire ComponentArray.\
        \  ID and NID are required or the operation will fail. Only the NID field\
        \ is updated, and then only if it is appropriate for the corresponding HMS\
        \ type of the entry (e.g. node)."
    Component.1.0.0_ResourceURICollection:
      type: object
      properties:
        Name:
          type: string
          description: "Should describe the collection, though the type of resources\
            \ the links correspond to should also be inferred from the context in\
            \ which the collection was obtained."
          readOnly: true
          example: (Type of Object) Collection
        Members:
          type: array
          description: An array of ResourceIds.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceURI.1.0.0'
        MemberCount:
          type: number
          description: Number of ResourceURIs in the collection
          format: int32
          readOnly: true
    ComponentByNID.1.0.0_ResourceURICollection:
      type: object
      properties:
        Name:
          type: string
          description: "Should describe the collection, though the type of resources\
            \ the links correspond to should also be inferred from the context in\
            \ which the collection was obtained."
          readOnly: true
          example: (Type of Object) Collection
        Members:
          type: array
          description: An array of ResourceIds.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceURI.1.0.0'
        MemberCount:
          type: number
          description: Number of ResourceURIs in the collection
          format: int32
          readOnly: true
    ComponentArray_ComponentArray:
      type: object
      properties:
        Components:
          type: array
          description: Contains the HMS component objects in the array.
          items:
            $ref: '#/components/schemas/Component.1.0.0_Component'
      description: This is a collection of Component objects returned whenever a query
        is expected to result in 0 to n matches.
      example:
        Components:
        - NID: 1
          Enabled: true
          Arch: X86
          Flag: OK
          SubRole: Worker
          Role: Compute
          Locked: false
          Type: Node
          State: Ready
          ReservationDisabled: false
          SoftwareStatus: SoftwareStatus
          Class: River
          ID: x0c0s0b0n0
          Subtype: Subtype
          NetType: Sling
        - NID: 1
          Enabled: true
          Arch: X86
          Flag: OK
          SubRole: Worker
          Role: Compute
          Locked: false
          Type: Node
          State: Ready
          ReservationDisabled: false
          SoftwareStatus: SoftwareStatus
          Class: River
          ID: x0c0s0b0n0
          Subtype: Subtype
          NetType: Sling
    ComponentArray_PostArray:
      required:
      - Components
      type: object
      properties:
        Components:
          type: array
          description: Contains the HMS component objects in the array.
          items:
            $ref: '#/components/schemas/Component.1.0.0_ComponentCreate'
        Force:
          type: boolean
          description: "If true, 'force' causes this operation to overwrite the 'State',\
            \ 'Flag', 'Subtype', 'NetType', and 'Arch' fields for the specified component\
            \ if it already exists. Otherwise, nothing will be overwritten."
      description: This is a component post request. Contains the new component fields
        to apply.
    ComponentArray_PatchArray.StateData:
      required:
      - ComponentIDs
      - State
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to update.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        State:
          $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
        Force:
          type: boolean
          description: "If the state change is normally prohibited, due to the current\
            \ and new states, force the change anyways.  Default is false."
          example: false
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: "This is a component state data patch request. Contains the new\
        \ state to apply, new flag to apply (optional), and a list of component xnames\
        \ for update. If the component flag is omitted, the flag will be reset to\
        \ 'ok'."
    ComponentArray_PatchArray.FlagOnly:
      required:
      - ComponentIDs
      - Flag
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to update.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is a component flag value patch request. Contains the new
        flag to apply and a list of component xnames for update.
    ComponentArray_PatchArray.Enabled:
      required:
      - ComponentIDs
      - Enabled
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to update.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Enabled:
          type: boolean
          description: "Whether component is enabled. True when enabled, false when\
            \ disabled."
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is a component Enabled field patch request. Contains the new
        value of enabled to apply and the list of component xnames to update.
    ComponentArray_PatchArray.SoftwareStatus:
      required:
      - ComponentIDs
      - SoftwareStatus
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to update.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        SoftwareStatus:
          type: string
          description: "SoftwareStatus of the node, used by the managed plane for\
            \ running nodes."
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: "This is a component SoftwareStatus field patch request. Contains\
        \ a new, single value of SoftwareStatus to apply, and the list of component\
        \ xnames to update."
    ComponentArray_PatchArray.Role:
      required:
      - ComponentIDs
      - Role
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to update.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Role:
          $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRole:
          $ref: '#/components/schemas/HMSSubRole.1.0.0'
        ExtendedInfo:
          $ref: '#/components/schemas/Message_1.0.0_ExtendedInfo'
      description: This is a component Role value patch request. Contains the new
        Role to apply and a list of component xnames for update.
    ComponentArray_PatchArray.NID:
      type: object
      properties:
        Name:
          type: string
          description: Descriptive name e.g. why it was generated.
          readOnly: true
        Components:
          type: array
          description: Contains the component objects in the array but with just the
            Component ID and the patchable fields for a NID patch operation filled
            in.  Other Component fields are not undated during these operations.
          items:
            $ref: '#/components/schemas/Component.1.0.0_PatchArrayItem.NID'
      description: This is a collection of Component objects with just the ID and
        NID fields populated.
    ComponentArray_PostQuery:
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        partition:
          type: string
          description: "Partition name to filter on, as per current /partitions/names"
          example: p1
        group:
          type: string
          description: "Group label to filter on, as per current /groups/labels"
          example: group_label
        stateonly:
          type: boolean
          description: Return only component state and flag fields (plus xname/ID
            and type).  Results can be modified and used for bulk state/flag- only
            patch operations.
        flagonly:
          type: boolean
          description: Return only component flag field (plus xname/ID and type).
            Results can be modified and used for bulk flag-only patch operations.
        roleonly:
          type: boolean
          description: Return only component role and subrole fields (plus xname/ID
            and type). Results can be modified and used for bulk role-only patches.
        nidonly:
          type: boolean
          description: Return only component NID field (plus xname/ID and type). Results
            can be modified and used for bulk NID-only patches.
        type:
          type: array
          description: Retrieve all components with the given HMS type.
          items:
            type: string
        state:
          type: array
          description: Retrieve all components with the given HMS state.
          items:
            type: string
        flag:
          type: array
          description: Retrieve all components with the given HMS flag value.
          items:
            type: string
        enabled:
          type: array
          description: Retrieve all components with the given enabled status (true
            or false).
          items:
            type: string
        softwarestatus:
          type: array
          description: Retrieve all components with the given software status. Software
            status is a free form string. Matching is case-insensitive.
          items:
            type: string
        role:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS role
          items:
            type: string
        subrole:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS subrole
          items:
            type: string
        subtype:
          type: array
          description: Retrieve all components with the given HMS subtype.
          items:
            type: string
        arch:
          type: array
          description: Retrieve all components with the given architecture.
          items:
            type: string
        class:
          type: array
          description: "Retrieve all components (i.e. nodes) with the given HMS hardware\
            \ class. Class can be River, Mountain, etc."
          items:
            type: string
        nid:
          type: array
          description: Retrieve all components (i.e. one node) with the given integer
            NID
          items:
            type: string
        nid_start:
          type: array
          description: Retrieve all components (i.e. nodes) with NIDs equal to or
            greater than the provided integer.
          items:
            type: string
        nid_end:
          type: array
          description: Retrieve all components (i.e. nodes) with NIDs less than or
            equal to the provided integer.
          items:
            type: string
      description: "There are limits to the length of an HTTP URL and query string.\
        \ Hence, if we wish to query an arbitrary list of XName/IDs, it will need\
        \ to be in the body of the request.  This object is used for this purpose.\
        \  It is similar to the analogous GET operation."
    ComponentArray_PostByNIDQuery:
      required:
      - NIDRanges
      type: object
      properties:
        NIDRanges:
          type: array
          description: "NID range values to query, producing a ComponentArray with\
            \ the matching components, e.g. \"0-24\" or \"2\".  Add each multiple\
            \ ranges as a separate array item."
          items:
            $ref: '#/components/schemas/NIDRange.1.0.0'
        partition:
          $ref: '#/components/schemas/XNamePartition.1.0.0'
        stateonly:
          type: boolean
          description: Return only component state and flag fields (plus xname/ID
            and type).  Results can be modified and used for bulk state/flag- only
            patch operations.
        flagonly:
          type: boolean
          description: Return only component flag field (plus xname/ID and type).
            Results can be modified and used for bulk flag-only patch operations.
        roleonly:
          type: boolean
          description: Return only component role and subrole fields (plus xname/ID
            and type). Results can be modified and used for bulk role-only patches.
        nidonly:
          type: boolean
          description: Return only component NID field (plus xname/ID and type). Results
            can be modified and used for bulk NID-only patches.
      description: "There are limits to the length of an HTTP URL and query string.\
        \ Hence, if we wish to query an arbitrary list of NIDs, it will need to be\
        \ in the body of the request.  This object is used for this purpose.  Parameters\
        \ are similar to the analogous GET operation."
    NodeMap.1.0.0_NodeMap:
      required:
      - NID
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XName.1.0.0'
        NID:
          type: integer
          description: Positive default Node ID (NID) for the xname in ID
          example: 1
        Role:
          $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRole:
          $ref: '#/components/schemas/HMSSubRole.1.0.0'
      description: |-
        NodeMaps are a way of pre-populating state manager with a set of valid node xnames (currently populated, or just potentially populated) and assigning each a default NID (and optionally also a Role and SubRole). NID is required and must be unique within the NodeMaps.
        When components are first discovered, if a matching NodeMap entry is found, that NID will be used to create the component entry.  This allows NIDs to be defined in advance in an orderly way that allows NID ranges to be consecutive on the set of xnames that is actually used for a particular hardware config.  The default NIDs used if no NodeMap is present are based on enumerating NIDs for ALL POSSIBLE xnames, even though in practice only a small subset will be used for any particular hardware config (resulting in very sparse assignments).  NodeMaps, then, help avoid this.
        Updating NodeMaps for already discovered components (unless they are deleted and then rediscovered) will not automatically update the NID field in States/Components.  Likewise using a patch to update NID on a particular entry in States/Components will not automatically define or update a NodeMap entry.
      example:
        Role: Compute
        NID: 1
        ID: x0c0s0b0n0
        SubRole: Worker
    NodeMap.1.0.0_PostNodeMap:
      required:
      - ID
      - NID
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XNameForQuery.1.0.0'
        NID:
          type: integer
          description: Positive default Node ID (NID) for the xname in ID
          example: 1
        Role:
          $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRole:
          $ref: '#/components/schemas/HMSSubRole.1.0.0'
      description: |-
        NodeMaps are a way of pre-populating state manager with a set of valid node xnames (currently populated, or just potentially populated) and assigning each a default NID (and optionally also a Role and SubRole). NID is required and must be unique within the NodeMaps.
        When components are first discovered, if a matching NodeMap entry is found, that NID will be used to create the component entry.  This allows NIDs to be defined in advance in an orderly way that allows NID ranges to be consecutive on the set of xnames that is actually used for a particular hardware config.  The default NIDs used if no NodeMap is present are based on enumerating NIDs for ALL POSSIBLE xnames, even though in practice only a small subset will be used for any particular hardware config (resulting in very sparse assignments).  NodeMaps, then, help avoid this.
        Updating NodeMaps for already discovered components (unless they are deleted and then rediscovered) will not automatically update the NID field in States/Components.  Likewise using a patch to update NID on a particular entry in States/Components will not automatically define or update a NodeMap entry.
      example:
        Role: Compute
        NID: 1
        ID: x0c0s0b0n0
        SubRole: Worker
    NodeMapArray_NodeMapArray:
      type: object
      properties:
        NodeMaps:
          type: array
          description: Contains the NodeMap objects in the array.
          items:
            $ref: '#/components/schemas/NodeMap.1.0.0_PostNodeMap'
      description: "This is a named array of NodeMap objects. This is the result of\
        \ GET-ing the NodeMaps collection, or can be used to populate or update it\
        \ as input provided via POST."
      example:
        NodeMaps:
        - Role: Compute
          NID: 1
          ID: x0c0s0b0n0
          SubRole: Worker
        - Role: Compute
          NID: 1
          ID: x0c0s0b0n0
          SubRole: Worker
    ComponentEndpoint.1.0.0_ComponentEndpoint:
      required:
      - ComponentEndpointType
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XName.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        Domain:
          type: string
          description: Domain of component FQDN.  Hostname is always ID/xname
          example: mgmt.example.domain.com
        FQDN:
          type: string
          description: Fully-qualified domain name of component on management network
            if for example the component is a node.
          example: x0c0s0b0n0.mgmt.example.domain.com
        RedfishType:
          $ref: '#/components/schemas/RedfishType.1.0.0'
        RedfishSubtype:
          $ref: '#/components/schemas/RedfishSubtype.1.0.0'
        Enabled:
          type: boolean
          description: "To disable a component without deleting its data from the\
            \ database, can be set to false"
          example: true
        ComponentEndpointType:
          type: string
          description: This is used as a discriminator to determine the additional
            RF-type- specific data that is kept for a ComponentEndpoint.
          example: ComponentEndpointComputerSystem
          enum:
          - ComponentEndpointChassis
          - ComponentEndpointComputerSystem
          - ComponentEndpointManager
          - ComponentEndpointPowerDistribution
          - ComponentEndpointOutlet
        MACAddr:
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
          description: "If the component e.g. a ComputerSystem/Node has a MAC on the\
            \ management network, i.e. corresponding to the FQDN field's Ethernet\
            \ interface, this field will be present.  Not the HSN MAC.  Represented\
            \ as the standard colon-separated 6 byte hex string."
          example: ae:12:ce:7a:aa:99
        UUID:
          $ref: '#/components/schemas/UUID.1.0.0'
        OdataID:
          $ref: '#/components/schemas/OdataID.1.0.0'
        RedfishEndpointID:
          $ref: '#/components/schemas/XNameRFEndpoint.1.0.0'
        RedfishEndpointFQDN:
          type: string
          description: This is a back-reference to the fully-qualified domain name
            of the parent Redfish endpoint that was used to discover the component.  It
            is the RedfishEndpointID field i.e. the hostname/xname plus its current
            domain.
          readOnly: true
          example: x0c0s0b0.mgmt.example.domain.com
        RedfishURL:
          type: string
          description: "Complete URL to the corresponding Redfish object, combining\
            \ the RedfishEndpoint's FQDN and the OdataID."
          readOnly: true
          example: x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
      description: |-
        This describes a child component of a Redfish endpoint and is populated when Redfish endpoint discovery occurs.  It is used by services that need to interact directly with the component via Redfish. It represents a physical component of something and has a corresponding representation as an HMS Component, hence the name. There are also ServiceEndpoints which represent Redfish services that are discovered when the RedfishEndpoint is discovered.
        NOTE: These records are discovered, not created, and therefore are not writable (since any changes would be overwritten by a subsequent discovery).
        Additional info is appended depending on RedfishType (discriminator)
      example:
        Enabled: true
        OdataID: /redfish/v1/Systems/System.Embedded.1
        RedfishSubtype: Physical
        RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
        Type: Node
        FQDN: x0c0s0b0n0.mgmt.example.domain.com
        RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
        ComponentEndpointType: ComponentEndpointComputerSystem
        RedfishType: ComputerSystem
        MACAddr: ae:12:ce:7a:aa:99
        ID: x0c0s0b0n0
        Domain: mgmt.example.domain.com
        UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
        RedfishEndpointID: x0c0s0b0
      discriminator:
        propertyName: ComponentEndpointType
    ComponentEndpointChassis:
      description: "This is a subtype of ComponentEndpoint for Chassis RF components,\
        \ i.e. of most HMS components other than nodes and BMCs. This subtype is used\
        \ when the ComponentEndpoint's ComponentEndpointType is 'ComponentEndpointChassis'\
        \ via the 'discriminator: ComponentEndpointType' property."
      allOf:
      - $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishChassisInfo:
            $ref: '#/components/schemas/ComponentEndpoint.1.0.0_RedfishChassisInfo'
    ComponentEndpointComputerSystem:
      description: "This is a subtype of ComponentEndpoint for ComputerSystem RF components,\
        \ i.e. a node HMS type. This subtype is used when the ComponentEndpoint's\
        \ ComponentEndpointType is 'ComponentEndpointComputerSystem' via the 'discriminator:\
        \ ComponentEndpointType' property."
      allOf:
      - $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishSystemInfo:
            $ref: '#/components/schemas/ComponentEndpoint.1.0.0_RedfishSystemInfo'
    ComponentEndpointManager:
      description: "This is a subtype of ComponentEndpoint for Manager RF components,\
        \ i.e. any BMC type.  For example NodeBMC is a Manager, NodeEnclosure is a\
        \ Chassis RF type. This subtype is used when the ComponentEndpoint's ComponentEndpointType\
        \ is 'ComponentEndpointManager' via the 'discriminator: ComponentEndpointType'\
        \ property."
      allOf:
      - $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishManagerInfo:
            $ref: '#/components/schemas/ComponentEndpoint.1.0.0_RedfishManagerInfo'
    ComponentEndpointPowerDistribution:
      description: "This is a subtype of ComponentEndpoint for PowerDistribution RF\
        \ components. This subtype is used when the ComponentEndpoints ComponentEndpointType\
        \ is ComponentEndpointPowerDistribution via the discriminator: ComponentEndpointType\
        \ property."
      allOf:
      - $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishChassisInfo:
            $ref: '#/components/schemas/ComponentEndpoint.1.0.0_RedfishPowerDistributionInfo'
    ComponentEndpointOutlet:
      description: "This is a subtype of ComponentEndpoint for PowerDistribution Outlet\
        \ RF components. This subtype is used when the ComponentEndpoints ComponentEndpointType\
        \ is ComponentEndpointOutlet via the discriminator: ComponentEndpointType\
        \ property."
      allOf:
      - $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
      - type: object
        properties:
          RedfishChassisInfo:
            $ref: '#/components/schemas/ComponentEndpoint.1.0.0_RedfishOutletInfo'
    ComponentEndpoint.1.0.0_RedfishChassisInfo:
      type: object
      properties:
        Name:
          type: string
          description: The Redfish 'Name' of the Chassis.
          readOnly: true
        Actions:
          $ref: '#/components/schemas/Actions_1.0.0_ChassisActions'
      description: "This is the ChassisInfo field in the RF Chassis subtype of ComponentEndpoint,\
        \ i.e. when the latter's RedfishType is Chassis. This is where new fields\
        \ will be added."
    ComponentEndpoint.1.0.0_RedfishSystemInfo:
      type: object
      properties:
        Name:
          type: string
          description: The Redfish 'name' of the ComputerSystem.
          readOnly: true
        Actions:
          $ref: '#/components/schemas/Actions_1.0.0_ComputerSystemActions'
        EthernetNICInfo:
          type: array
          items:
            $ref: '#/components/schemas/EthernetNICInfo_1.0.0'
        PowerURL:
          type: string
          description: The URL for the power info for this node.
          readOnly: true
          example: /redfish/v1/Chassis/Node0/Power
        PowerControl:
          type: array
          items:
            $ref: '#/components/schemas/PowerControl_1.0.0'
      description: "This is the SystemInfo object in the RF ComputerSystem subtype\
        \ of ComponentEndpoint, i.e. when the latter's RedfishType is ComputerSystem.\
        \ It contains HMS-Node/ComputerSystem-specific Redfish fields that need to\
        \ be collected during discovery and made available to clients. This is where\
        \ new fields will be added.  Mostly placeholder now."
    ComponentEndpoint.1.0.0_RedfishManagerInfo:
      type: object
      properties:
        Name:
          type: string
          description: The Redfish 'Name' of the Manager.
          readOnly: true
        Actions:
          $ref: '#/components/schemas/Actions_1.0.0_ManagerActions'
        EthernetNICInfo:
          type: array
          items:
            $ref: '#/components/schemas/EthernetNICInfo_1.0.0'
      description: "This is the ManagerInfo object in the RF Manager subtype of ComponentEndpoint,\
        \ i.e. when the latter's RedfishType is Manager. It contains BMC/Manager-specific\
        \ Redfish fields that need to be collected during discovery and made available\
        \ to clients. This is where new fields will be added.  Mostly placeholder\
        \ now."
    ComponentEndpoint.1.0.0_RedfishPowerDistributionInfo:
      type: object
      properties:
        Name:
          type: string
          description: The Redfish Name of the PDU.
          readOnly: true
      description: "This is the RedfishPDUInfo field in the RF Chassis subtype of\
        \ ComponentEndpoint, i.e. when the latter's RedfishType is PowerDistribution.\
        \  This is where new fields will be added."
    ComponentEndpoint.1.0.0_RedfishOutletInfo:
      type: object
      properties:
        Name:
          type: string
          description: The Redfish Name of the Outlet.
          readOnly: true
        Actions:
          $ref: '#/components/schemas/Actions_1.0.0_OutletActions'
      description: "This is the RedfishOutletInfo field in the RF Outlet subtype of\
        \ ComponentEndpoint, i.e. when the latter's RedfishType is Outlet. This is\
        \ where new fields will be added."
    ComponentEndpoint.1.0.0_ResourceURICollection:
      type: object
      properties:
        Name:
          type: string
          description: "Should describe the collection, though the type of resources\
            \ the links correspond to should also be inferred from the context in\
            \ which the collection was obtained."
          readOnly: true
          example: (Type of Object) Collection
        Members:
          type: array
          description: An array of ResourceIds.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceURI.1.0.0'
        MemberCount:
          type: number
          description: Number of ResourceURIs in the collection
          format: int32
          readOnly: true
    ComponentEndpointArray_ComponentEndpointArray:
      type: object
      properties:
        ComponentEndpoints:
          type: array
          description: Contains the HMS RedfishEndpoint objects in the array.
          items:
            $ref: '#/components/schemas/ComponentEndpoint.1.0.0_ComponentEndpoint'
      description: This is a collection of ComponentEndpoint objects returned whenever
        a query is expected to result in 0 to n matches.
      example:
        ComponentEndpoints:
        - Enabled: true
          OdataID: /redfish/v1/Systems/System.Embedded.1
          RedfishSubtype: Physical
          RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
          Type: Node
          FQDN: x0c0s0b0n0.mgmt.example.domain.com
          RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
          ComponentEndpointType: ComponentEndpointComputerSystem
          RedfishType: ComputerSystem
          MACAddr: ae:12:ce:7a:aa:99
          ID: x0c0s0b0n0
          Domain: mgmt.example.domain.com
          UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
          RedfishEndpointID: x0c0s0b0
        - Enabled: true
          OdataID: /redfish/v1/Systems/System.Embedded.1
          RedfishSubtype: Physical
          RedfishURL: x0c0s0b0.mgmt.example.domain.com/redfish/v1/Systems/System.Embedded.1
          Type: Node
          FQDN: x0c0s0b0n0.mgmt.example.domain.com
          RedfishEndpointFQDN: x0c0s0b0.mgmt.example.domain.com
          ComponentEndpointType: ComponentEndpointComputerSystem
          RedfishType: ComputerSystem
          MACAddr: ae:12:ce:7a:aa:99
          ID: x0c0s0b0n0
          Domain: mgmt.example.domain.com
          UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
          RedfishEndpointID: x0c0s0b0
    ComponentEndpointArray_PostQuery:
      required:
      - ComponentEndpointIDs
      type: object
      properties:
        ComponentEndpointIDs:
          type: array
          description: An array of XName/ID values for the ComponentEndpoints to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        partition:
          $ref: '#/components/schemas/XNamePartition.1.0.0'
      description: "There are limits to the length of an HTTP URL and query string.\
        \ Hence, if we wish to query an arbitrary list of XName/IDs, it will need\
        \ to be in the body of the request.  This object is used for this purpose.\
        \  It is similar to the analogous GET operation."
    HSNInfo.1.0.0:
      type: object
      properties:
        HSNTopology:
          $ref: '#/components/schemas/HSNTopology.1.0.0'
        HSNNetworkType:
          $ref: '#/components/schemas/NetType.1.0.0'
        HSNInfoEntries:
          type: array
          description: Contains an HSN info entry for each component.
          items:
            $ref: '#/components/schemas/HSNInfoEntry.1.0.0'
      description: Component to NIC and Network Coordinate Map
    HSNInfoEntry.1.0.0:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XName.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        NICAddrs:
          $ref: '#/components/schemas/NICAddrs.1.0.0'
        HSNCoords:
          type: array
          description: "HSN Coordinates of the components, an integer tuple of a particular\
            \ length in array form."
          example:
          - 0
          - 0
          - 0
          - 0
          - 0
          items:
            type: integer
            format: int32
      description: "The HSN info for an individual component, e.g. node."
    HSNTopology.1.0.0:
      type: integer
      description: Numerical identifier for HSN topology class
      format: int32
      example: 0
    HWInventory.1.0.0_HWInventory:
      type: object
      properties:
        XName:
          $ref: '#/components/schemas/XName.1.0.0'
        Format:
          type: string
          description: |-
            How results are displayed
              FullyFlat      All component types listed in their own
                             arrays only.  No nesting of any children
              Hierarchical   All subcomponents listed as children up to
                             top level component (or set of cabinets)
              NestNodesOnly  Flat except that node subcomponents are nested
                             hierarchically.
            Default is NestNodesOnly.
          example: NestNodesOnly
          enum:
          - FullyFlat
          - Hierarchical
          - NestNodesOnly
        Cabinets:
          type: array
          description: All components with HMS type 'Cabinet' appropriate given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocCabinet'
        Chassis:
          type: array
          description: All appropriate components with HMS type 'Chassis' given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocChassis'
        ComputeModules:
          type: array
          description: All appropriate components with HMS type 'ComputeModule' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocComputeModule'
        RouterModules:
          type: array
          description: All appropriate components with HMS type 'RouterModule' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocRouterModule'
        NodeEnclosures:
          type: array
          description: All appropriate components with HMS type 'NodeEnclosure' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocNodeEnclosure'
        HSNBoards:
          type: array
          description: All appropriate components with HMS type 'HSNBoard' given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocHSNBoard'
        MgmtSwitches:
          type: array
          description: All appropriate components with HMS type 'MgmtSwitch' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocMgmtSwitch'
        MgmtHLSwitches:
          type: array
          description: All appropriate components with HMS type 'MgmtHLSwitch' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocMgmtHLSwitch'
        CDUMgmtSwitches:
          type: array
          description: All appropriate components with HMS type 'CDUMgmtSwitch' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocCDUMgmtSwitch'
        Nodes:
          type: array
          description: All appropriate components with HMS type 'Node' given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocNode'
        Processors:
          type: array
          description: All appropriate components with HMS type 'Processor' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocProcessor'
        NodeAccels:
          type: array
          description: All appropriate components with HMS type 'NodeAccel' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocNodeAccel'
        Drives:
          type: array
          description: All appropriate components with HMS type 'Drive' given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocDrive'
        Memory:
          type: array
          description: All appropriate components with HMS type 'Memory' given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocMemory'
        CabinetPDUs:
          type: array
          description: All appropriate components with HMS type 'CabinetPDU' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocPDU'
        CabinetPDUPowerConnectors:
          type: array
          description: All appropriate components with HMS type 'CabinetPDUPowerConnector'
            given Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocOutlet'
        CMMRectifiers:
          type: array
          description: All appropriate components with HMS type 'CMMRectifier' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocCMMRectifier'
        NodeAccelRisers:
          type: array
          description: All appropriate components with HMS type 'NodeAccelRiser' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocNodeAccelRiser'
        NodeHsnNICs:
          type: array
          description: All appropriate components with HMS type 'NodeHsnNic' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocHSNNIC'
        NodeEnclosurePowerSupplies:
          type: array
          description: All appropriate components with HMS type 'NodeEnclosurePowerSupply'
            given Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocNodeEnclosurePowerSupply'
        NodeBMC:
          type: array
          description: All appropriate components with HMS type 'NodeBMC' given Target
            component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocNodeBMC'
        RouterBMC:
          type: array
          description: All appropriate components with HMS type 'RouterBMC' given
            Target component/partition and query type.
          readOnly: true
          items:
            $ref: '#/components/schemas/HWInvByLocRouterBMC'
      description: |-
        This is a collection of hardware inventory data. Depending on the query only some of these arrays will be populated.
        Also, depending on the query that produced the inventory, some components may have their subcomponents nested underneath them (hierarchical query), rather than all arranged in their own arrays by their types (flat query).
        The default is hierarchical for node subcomponents (Processors, Memory) and flat for everything else, but other query types are possible and can use this same basic structure.
        Either way, the 'Target' field is the parent component, partition or system that is used to select the components for the query.
      example:
        Chassis:
        - ""
        - ""
        HSNBoards:
        - ""
        - ""
        CDUMgmtSwitches:
        - ""
        - ""
        CabinetPDUs:
        - ""
        - ""
        NodeEnclosures:
        - ""
        - ""
        NodeHsnNICs:
        - ""
        - ""
        Memory:
        - ""
        - ""
        CabinetPDUPowerConnectors:
        - ""
        - ""
        ComputeModules:
        - ""
        - ""
        MgmtHLSwitches:
        - ""
        - ""
        Drives:
        - ""
        - ""
        NodeAccels:
        - ""
        - ""
        CMMRectifiers:
        - ""
        - ""
        NodeAccelRisers:
        - ""
        - ""
        RouterModules:
        - ""
        - ""
        Nodes:
        - ""
        - ""
        NodeEnclosurePowerSupplies:
        - ""
        - ""
        RouterBMC:
        - ""
        - ""
        Format: NestNodesOnly
        NodeBMC:
        - ""
        - ""
        Cabinets:
        - ""
        - ""
        MgmtSwitches:
        - ""
        - ""
        Processors:
        - ""
        - ""
        XName: x0c0s0b0n0
    HWInventory.1.0.0_HWInventoryByLocation:
      required:
      - HWInventoryByLocationType
      - ID
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XNameCompOrPartition.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        Ordinal:
          type: integer
          description: "This is the normalized (from zero) index of the component\
            \ location (e.g. slot number) when there are more than one.  This should\
            \ match the last number in the xname in most cases (e.g. Ordinal 0 for\
            \ node x0c0s0b0n0).  Note that Redfish may use a different value or naming\
            \ scheme, but this is passed through via the *LocationInfo for the type\
            \ of component."
          format: int32
          readOnly: true
        Status:
          type: string
          description: Populated or Empty - whether location is populated.
          readOnly: true
          enum:
          - Populated
          - Empty
        HWInventoryByLocationType:
          type: string
          description: This is used as a discriminator to determine the additional
            HMS-type specific subtype that is returned.
          enum:
          - HWInvByLocCabinet
          - HWInvByLocChassis
          - HWInvByLocComputeModule
          - HWInvByLocRouterModule
          - HWInvByLocNodeEnclosure
          - HWInvByLocHSNBoard
          - HWInvByLocMgmtSwitch
          - HWInvByLocMgmtHLSwitch
          - HWInvByLocCDUMgmtSwitch
          - HWInvByLocNode
          - HWInvByLocProcessor
          - HWInvByLocNodeAccel
          - HWInvByLocNodeAccelRiser
          - HWInvByLocDrive
          - HWInvByLocMemory
          - HWInvByLocPDU
          - HWInvByLocOutlet
          - HWInvByLocCMMRectifier
          - HWInvByLocNodeEnclosurePowerSupply
          - HWInvByLocNodeBMC
          - HWInvByLocRouterBMC
          - HWInvByLocHSNNIC
        PopulatedFRU:
          $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      description: "This is the basic entry in the hardware inventory for a particular\
        \ location/xname.  If the location is populated (e.g. if a slot for a blade\
        \ exists and the blade is present), then there will also be a link to the\
        \ FRU entry for the physical piece of hardware that occupies it."
      example:
        Status: Populated
        HWInventoryByLocationType: HWInvByLocCabinet
        Type: Node
        Ordinal: 0
        ID: s0
        PopulatedFRU:
          FRUID: Dell-99999-1234-1234-2345
          Type: Node
          Subtype: River
          HWInventoryByFRUType: HWInvByFRUNode
          NodeFRUInfo:
            AssetTag: AdminAssignedAssetTag
            BiosVersion: v1.0.2.9999
            Model: OKS0P2354
            Manufacturer: Dell
            PartNumber: y99999
            SerialNumber: 1234-1234-2345
            SKU: as213234
            SystemType: Physical
            UUID: 26276e2a-29dd-43eb-8ca6-8186bbc3d971
      discriminator:
        propertyName: HWInventoryByLocationType
    HWInvByLocCabinet:
      description: "This is a subtype of HWInventoryByLocation for HMSType Cabinet.\
        \ It is selected via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocCabinet'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          CabinetLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
          Chassis:
            type: array
            description: Embedded chassis HWInv object array representing subcomponents
              (if query is hierarchical).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocChassis'
    HWInvByLocChassis:
      description: "This is a subtype of HWInventoryByLocation for HMSType Chassis.\
        \ It is selected via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocChassis'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          ChassisLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
          ComputeModules:
            type: array
            description: Embedded ComputeModule HWInv object array representing subcomponents
              of that type (if query is hierarchical).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocComputeModule'
          RouterModules:
            type: array
            description: Embedded RouterModule HWInv object array representing subcomponents
              of that type (if query is hierarchical).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocRouterModule'
    HWInvByLocComputeModule:
      description: "This is a subtype of HWInventoryByLocation for HMSType ComputeModule.\
        \ It is selected via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocComputeModule'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          ComputeModuleLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
          NodeEnclosures:
            type: array
            description: Embedded NodeEnclosure HWInv object array representing subcomponents
              of that type (if query is hierarchical).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocNodeEnclosure'
    HWInvByLocRouterModule:
      description: "This is a subtype of HWInventoryByLocation for HMSType RouterModule.\
        \ This is a Mountain switch module. It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocRouterModule'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          RouterModuleLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
          HSNBoards:
            type: array
            description: Embedded HSNBoard HWInv object array representing subcomponents
              of that type (if query is hierarchical).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocHSNBoard'
    HWInvByLocNodeEnclosure:
      description: "This is a subtype of HWInventoryByLocation for HMSType NodeEnclosure.\
        \ It represents a Mountain node card or River rack enclosure.  It is NOT the\
        \ BMC, which is separate and corresponds to a Redfish Manager. It is selected\
        \ via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocNodeEnclosure'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeEnclosureLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
    HWInvByLocHSNBoard:
      description: "This is a subtype of HWInventoryByLocation for HMSType HSNBoard.\
        \ It represents a Mountain switch card or River TOR enclosure.  It is NOT\
        \ the BMC, which is separate and corresponds to a Redfish Manager. It is selected\
        \ via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocHSNBoard'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          HSNBoardLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
    HWInvByLocMgmtSwitch:
      description: "This is a subtype of HWInventoryByLocation for HMSType MgmtSwitch.\
        \ It represents a management switch.  It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocMgmtSwitch'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          MgmtSwitchLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
    HWInvByLocMgmtHLSwitch:
      description: "This is a subtype of HWInventoryByLocation for HMSType MgmtHLSwitch.\
        \ It represents a high level management switch.  It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocMgmtHLSwitch'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          MgmtHLSwitchLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
    HWInvByLocCDUMgmtSwitch:
      description: "This is a subtype of HWInventoryByLocation for HMSType CDUMgmtSwitch.\
        \ It represents a CDU management switch.  It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocCDUMgmtSwitch'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          CDUMgmtSwitchLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisLocationInfo'
    HWInvByLocNode:
      description: "This is a subtype of HWInventoryByLocation for HMSType Node. It\
        \ represents a service, compute, or system node. It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocNode'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishSystemLocationInfo'
          Processors:
            type: array
            description: Embedded Processor HWInv object array representing subcomponents
              of that type (this is default for Nodes).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocProcessor'
          NodeAccels:
            type: array
            description: Embedded NodeAccel HWInv object array representing subcomponents
              of that type (this is default for Nodes).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocNodeAccel'
          Drives:
            type: array
            description: Embedded Drives HWInv object array representing subcomponents
              of that type (this is default for Nodes).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocDrive'
          Memory:
            type: array
            description: Embedded Memory HWInv object array representing subcomponents
              of that type (this is default for Nodes).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocMemory'
          NodeAccelRisers:
            type: array
            description: Embedded NodeAccelRiser HWInv object array representing subcomponents
              of that type (this is default for Nodes).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocNodeAccelRiser'
          NodeHsnNICs:
            type: array
            description: Embedded NodeHsnNIC HWInv object array representing subcomponents
              of that type (this is default for Nodes).
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocHSNNIC'
    HWInvByLocProcessor:
      description: "This is a subtype of HWInventoryByLocation for HMSType Processor.\
        \ It represents a primary CPU type (e.g. non-accelerator). It is selected\
        \ via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocProcessor'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          ProcessorLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishProcessorLocationInfo'
    HWInvByLocNodeAccel:
      description: "This is a subtype of HWInventoryByLocation for HMSType NodeAccel.\
        \ It represents a GPU type (e.g. accelerator). It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocNodeAccel'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeAccelLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishProcessorLocationInfo'
    HWInvByLocDrive:
      description: "This is a subtype of HWInventoryByLocation for HMSType Drive.\
        \ It represents a disk drive. It is selected via the 'discriminator: HWInventoryByLocationType'\
        \ of HWInventoryByLocation when HWInventoryByLocationType is 'HWInvByLocDrive'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          DriveLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishDriveLocationInfo'
    HWInvByLocMemory:
      description: "This is a subtype of HWInventoryByLocation for HMSType Memory.\
        \ It represents a DIMM or other memory module type. It is selected via the\
        \ 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation when\
        \ HWInventoryByLocationType is 'HWInvByLocMemory'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          MemoryLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishMemoryLocationInfo'
    HWInvByLocPDU:
      description: "This is a subtype of HWInventoryByLocation for HMSType CabinetPDU.\
        \ It represents a master or slave PowerDistribution aka PDU component. It\
        \ is selected via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocPDU'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          PDULocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishPDULocationInfo'
          CabinetPDUPowerConnectors:
            type: array
            description: Embedded Outlets HWInv object array representing outlets
              of this PDU.
            readOnly: true
            items:
              $ref: '#/components/schemas/HWInvByLocOutlet'
    HWInvByLocOutlet:
      description: "This is a subtype of HWInventoryByLocation for HMSType CabinetPDUPowerConnector.\
        \ It an outlet that is a child of of a parent master or slave PDU. It is selected\
        \ via the 'discriminator: HWInventoryByLocationType' of HWInventoryByLocation\
        \ when HWInventoryByLocationType is 'HWInvByLocOutlet'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          OutletLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishOutletLocationInfo'
    HWInvByLocCMMRectifier:
      description: "This is a subtype of HWInventoryByLocation for HMSType CMMRectifier.\
        \ It represents a power supply. It is selected via the 'discriminator: HWInventoryByLocationType'\
        \ of HWInventoryByLocation when HWInventoryByLocationType is 'HWInvByLocCMMRectifier'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          CMMRectifierLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishCMMRectifierLocationInfo'
    HWInvByLocNodeAccelRiser:
      description: "This is a subtype of HWInventoryByLocation for HMSType NodeAccelRiser.\
        \ It represents a GPUSubsystem baseboard. It is selected via the 'discriminator:\
        \ HWInventoryByLocationType' of HWInventoryByLocation when HWInventoryByLocationType\
        \ is 'HWInvByLocNodeAccelRiser'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeAccelRiserLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishNodeAccelRiserLocationInfo'
    HWInvByLocNodeEnclosurePowerSupply:
      description: "This is a subtype of HWInventoryByLocation for HMSType NodeEnclosurePowerSupply.\
        \ It represents a power supply. It is selected via the 'discriminator: HWInventoryByLocationType'\
        \ of HWInventoryByLocation when HWInventoryByLocationType is 'HWInvByLocNodeEnclosurePowerSupply'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeEnclosurePowerSupplyLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyLocationInfo'
    HWInvByLocNodeBMC:
      description: "This is a subtype of HWInventoryByLocation for HMSType NodeBMC.\
        \ It represents a NodeBMC. It is selected via the 'discriminator: HWInventoryByLocationType'\
        \ of HWInventoryByLocation when HWInventoryByLocationType is 'HWInvByLocNodeBMC'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          NodeBMCLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishManagerLocationInfo'
    HWInvByLocRouterBMC:
      description: "This is a subtype of HWInventoryByLocation for HMSType RouterBMC.\
        \ It represents a RouterBMC. It is selected via the 'discriminator: HWInventoryByLocationType'\
        \ of HWInventoryByLocation when HWInventoryByLocationType is 'HWInvByLocRouterBMC'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          RouterBMCLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishManagerLocationInfo'
    HWInvByLocHSNNIC:
      description: "This is a subtype of HWInventoryByLocation for HMSType NodeHSNNIC.\
        \ It represents a NodeHSNNIC. It is selected via the 'discriminator: HWInventoryByLocationType'\
        \ of HWInventoryByLocation when HWInventoryByLocationType is 'HWInvByLocHSNNIC'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      - type: object
        properties:
          HSNNICLocationInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_HSNNICLocationInfo'
    HWInventory.1.0.0_RedfishChassisLocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturer's\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the BMC implementation.
          readOnly: true
        Hostname:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            Note this is simply what (if anything) Redfish has been told the hostname
            is.  It isn't necessarily its hostname on any particular network interface
            (e.g. the HMS management network).
          readOnly: true
      description: "These are pass-through properties of the Redfish Chassis object\
        \ type that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishSystemLocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturer's\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the BMC implementation.
          readOnly: true
        Hostname:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            Note this is simply what (if anything) Redfish has been told the hostname
            is.  It isn't necessarily its hostname on any particular network interface
            (e.g. the HMS management network).
          readOnly: true
        ProcessorSummary:
          $ref: '#/components/schemas/HWInventory.1.0.0_RedfishSystemLocationInfo_ProcessorSummary'
        MemorySummary:
          $ref: '#/components/schemas/HWInventory.1.0.0_RedfishSystemLocationInfo_MemorySummary'
      description: "These are pass-through properties of the Redfish ComputerSystem\
        \ object that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishProcessorLocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturer's\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the BMC implementation.
          readOnly: true
        Socket:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ It represents the socket or location of the processor, and may differ\
            \ from the normalized HMS Ordinal value (or xname) that is always indexed\
            \ from 0.  Manufacturers may or may not use zero indexing (or may have\
            \ some other naming scheme for sockets) and so we retain this information\
            \ to resolve any ambiguity when servicing the component."
          readOnly: true
      description: "These are pass-through properties of the Redfish Processor object\
        \ type that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishDriveLocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturer's\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the BMC implementation.
          readOnly: true
      description: "These are pass-through properties of the Redfish Drive object\
        \ type that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishMemoryLocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturer's\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the BMC implementation.
          readOnly: true
        MemoryLocation:
          $ref: '#/components/schemas/HWInventory.1.0.0_RedfishMemoryLocationInfo_MemoryLocation'
      description: "These are pass-through properties of the Redfish Memory object\
        \ type that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishPDULocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturers\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the implementation.
          readOnly: true
        UUID:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
          readOnly: true
      description: "These are pass-through properties of the Redfish PowerDistribution\
        \ object type that are also used in HMS inventory data.  They will be mostly\
        \ informational as exactly how fields are set depends on how the particular\
        \ implementation does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishOutletLocationInfo:
      type: object
      properties:
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturers\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the implementation.
          readOnly: true
      description: "These are pass-through properties of the Redfish PDU Outlet object\
        \ type that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishCMMRectifierLocationInfo:
      type: object
      properties:
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        FirmwareVersion:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
          readOnly: true
      description: "These are pass-through properties of the Redfish Power Supply\
        \ object type that are also used in HMS inventory data.  They will be mostly\
        \ informational as exactly how fields are set depends on how the particular\
        \ implementation does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishNodeAccelRiserLocationInfo:
      type: object
      properties:
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
          readOnly: true
      description: These are the properties of the NodeAccelRiser type that are passed-through
        to the HMS inventory data when the underlying Redfish object  type is an Assembly
        with a PhysicalContext of GPUSubsystem.  These are the properties of a specific
        hardware instance/FRU that may change if the component is relocated within
        the system.  Child of a Chassis.
    HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyLocationInfo:
      type: object
      properties:
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
        FirmwareVersion:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
          readOnly: true
      description: "These are pass-through properties of the Redfish Power Supply\
        \ object type that are also used in HMS inventory data.  They will be mostly\
        \ informational as exactly how fields are set depends on how the particular\
        \ implementation does things, but will be useful for servicing."
    HWInventory.1.0.0_RedfishManagerLocationInfo:
      type: object
      properties:
        DateTime:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            The current date and time with UTC offset that the manager uses to set
            or read time.
          readOnly: true
        DateTimeLocalOffset:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            The time offset from UTC that the DateTime property is in +HH:MM format.
          readOnly: true
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
            This is an informational description set by the implementation.
          readOnly: true
        FirmwareVersion:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
          readOnly: true
        Id:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ The Id is included for informational purposes.  The RedfishEndpoint\
            \ objects are intended to help locate and interact with HMS components\
            \ via the Redfish endpoint, so this is mostly needed in case servicing\
            \ the component requires its ID/name according to a particular COTS manufacturers\
            \ naming scheme within, for example, a particular server enclosure."
          readOnly: true
        Name:
          type: string
          description: "This is a pass-through of the Redfish value of the same name.\
            \ This is included for informational purposes as the naming will likely\
            \ vary from manufacturer-to-manufacturer, but should help match items\
            \ up to manufacturer's documentation if the normalized HMS naming scheme\
            \ is too vague for some COTS systems."
          readOnly: true
      description: "These are pass-through properties of the Redfish Manager object\
        \ type that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_HSNNICLocationInfo:
      type: object
      properties:
        Description:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
        Id:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
        Name:
          type: string
          description: This is a pass-through of the Redfish value of the same name.
      description: "These are pass-through properties of the Node HSN NIC object type\
        \ that are also used in HMS inventory data.  They will be mostly informational\
        \ as exactly how fields are set depends on how the particular implementation\
        \ does things, but will be useful for servicing."
    HWInventory.1.0.0_HWInventoryByFRU:
      required:
      - HWInventoryByFRUType
      type: object
      properties:
        FRUID:
          $ref: '#/components/schemas/FRUId.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        FRUSubtype:
          type: string
          description: TBD.
        HWInventoryByFRUType:
          type: string
          description: This is used as a discriminator to determine the additional
            HMS-type specific subtype that is returned.
          enum:
          - HWInvByFRUCabinet
          - HWInvByFRUChassis
          - HWInvByFRUComputeModule
          - HWInvByFRURouterModule
          - HWInvByFRUNodeEnclosure
          - HWInvByFRUHSNBoard
          - HWInvByFRUMgmtSwitch
          - HWInvByFRUMgmtHLSwitch
          - HWInvByFRUCDUMgmtSwitch
          - HWInvByFRUNode
          - HWInvByFRUProcessor
          - HWInvByFRUNodeAccel
          - HWInvByFRUNodeAccelRiser
          - HWInvByFRUDrive
          - HWInvByFRUMemory
          - HWInvByFRUPDU
          - HWInvByFRUOutlet
          - HWInvByFRUCMMRectifier
          - HWInvByFRUNodeEnclosurePowerSupply
          - HWInvByFRUNodeBMC
          - HWInvByFRURouterBMC
          - HWIncByFRUHSNNIC
      description: "This represents a physical piece of hardware with properties specific\
        \ to a unique component in the system.  It is the counterpart to HWInventoryByLocation\
        \ (which contains ONLY information specific to a particular location in the\
        \ system that may or may not be populated), in that it contains only info\
        \ about the component that is durably consistent wherever the component is\
        \ installed in the system (if it is still installed at all)."
      example:
        FRUID: Dell-99999-1234-1234-2345
        Type: Node
        Subtype: River
        HWInventoryByFRUType: HWInvByFRUNode
        NodeFRUInfo:
          AssetTag: AdminAssignedAssetTag
          BiosVersion: v1.0.2.9999
          Model: OKS0P2354
          Manufacturer: Dell
          PartNumber: y99999
          SerialNumber: 1234-1234-2345
          SKU: as213234
          SystemType: Physical
          UUID: 26276e2a-29dd-43eb-8ca6-8186bbc3d971
      discriminator:
        propertyName: HWInventoryByFRUType
    HWInvByFRUCabinet:
      description: "This is a subtype of HWInventoryByFRU for HMSType Cabinet. It\
        \ is selected via the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU\
        \ when HWInventoryByFRUType is 'HWInvByFRUCabinet'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          CabinetFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUChassis:
      description: "This is a subtype of HWInventoryByFRU for HMSType Chassis. It\
        \ is selected via the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU\
        \ when HWInventoryByFRUType is 'HWInvByFRUChassis'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          ChassisFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUComputeModule:
      description: "This is a subtype of HWInventoryByFRU for HMSType ComputeModule.\
        \ It is selected via the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU\
        \ when HWInventoryByFRUType is 'HWInvByFRUComputeModule'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          ComputeModuleFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRURouterModule:
      description: "This is a subtype of HWInventoryByFRU for HMSType RouterModule.\
        \ This is a Mountain switch module. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRURouterModule'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          RouterModuleFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUNodeEnclosure:
      description: "This is a subtype of HWInventoryByFRU for HMSType NodeEnclosure.\
        \ It represents a Mountain node card or River rack enclosure.  It is NOT the\
        \ BMC, which is separate and corresponds to a Redfish Manager. It is selected\
        \ via the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType\
        \ is 'HWInvByFRUNodeEnclosure'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeEnclosureFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUHSNBoard:
      description: "This is a subtype of HWInventoryByFRU for HMSType HSNBoard. It\
        \ represents a Mountain switch card or River TOR enclosure.  It is NOT the\
        \ BMC, which is separate and corresponds to a Redfish Manager. It is selected\
        \ via the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType\
        \ is 'HWInvByFRUHSNBoard'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          HSNBoardFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUMgmtSwitch:
      description: "This is a subtype of HWInventoryByFRU for HMSType MgmtSwitch.\
        \ It represents a management switch.  It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUMgmtSwitch'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          MgmtSwitchFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUMgmtHLSwitch:
      description: "This is a subtype of HWInventoryByFRU for HMSType MgmtHLSwitch.\
        \ It represents a high level management switch.  It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUMgmtHLSwitch'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          MgmtHLSwitchFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUCDUMgmtSwitch:
      description: "This is a subtype of HWInventoryByFRU for HMSType CDUMgmtSwitch.\
        \ It represents a CDU management switch.  It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUCDUMgmtSwitch'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          CDUMgmtSwitchFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishChassisFRUInfo'
    HWInvByFRUNode:
      description: "This is a subtype of HWInventoryByFRU for HMSType Node. It represents\
        \ a service, compute, or system node. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUNode'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishSystemFRUInfo'
    HWInvByFRUProcessor:
      description: "This is a subtype of HWInventoryByFRU for HMSType Processor. It\
        \ represents a primary CPU type (e.g. non-accelerator). It is selected via\
        \ the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType\
        \ is 'HWInvByFRUProcessor'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          ProcessorFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishProcessorFRUInfo'
    HWInvByFRUNodeAccel:
      description: "This is a subtype of HWInventoryByFRU for HMSType NodeAccel. It\
        \ represents a GPU type (e.g. accelerator). It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUNodeAccel'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeAccelFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishProcessorFRUInfo'
    HWInvByFRUDrive:
      description: "This is a subtype of HWInventoryByFRU for HMSType Drive. It represents\
        \ a disk drive type. It is selected via the 'discriminator: HWInventoryByFRUType'\
        \ of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUDrive'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          DriveFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishDriveFRUInfo'
    HWInvByFRUMemory:
      description: "This is a subtype of HWInventoryByFRU for HMSType Memory. It represents\
        \ a DIMM or other memory module type. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByLocMemory'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          MemoryFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishMemoryFRUInfo'
    HWInvByFRUPDU:
      description: "This is a subtype of HWInventoryByFRU for PDU HMSTypes, e.g. CabinetPDU.\
        \ It represents a Redfish PowerDistribution master or slave PDU. It is selected\
        \ via the 'discriminator: HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType\
        \ is 'HWInvByFRUPDU'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          PDUFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishPDUFRUInfo'
    HWInvByFRUOutlet:
      description: "This is a subtype of HWInventoryByFRU for Outlet HMSTypes, e.g.\
        \ CabinetPDUPowerConnector.  It represents an outlet of a PDU. It is selected\
        \ via the \"discriminator:\" HWInventoryByFRUType of HWInventoryByFRU when\
        \ HWInventoryByFRUType is 'HWInvByFRUOutlet'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          OutletFRUInfoFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishOutletFRUInfo'
    HWInvByFRUCMMRectifier:
      description: "This is a subtype of HWInventoryByFRU for HMSType CMMRectifier.\
        \ It represents a power supply type. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUCMMRectifier'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          PowerSupplyFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishCMMRectifierFRUInfo'
    HWInvByFRUNodeAccelRiser:
      description: "This is a subtype of HWInventoryByFRU for HMSType NodeAccelRiser.\
        \ It represents a GPUSubsystem baseboard type. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUNodeAccelRiser'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeAccelRiserFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishNodeAccelRiserFRUInfo'
    HWInvByFRUNodeEnclosurePowerSupply:
      description: "This is a subtype of HWInventoryByFRU for HMSType NodeEnclosurePowerSupply.\
        \ It represents a power supply type. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUNodeEnclosurePowerSupply'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeEnclosurePowerSupplyFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyFRUInfo'
    HWInvByFRUNodeBMC:
      description: "This is a subtype of HWInventoryByFRU for HMSType NodeBMC. It\
        \ represents a Node BMC type. It is selected via the 'discriminator: HWInventoryByFRUType'\
        \ of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUNodeBMC'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          NodeBMCFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishManagerFRUInfo'
    HWInvByFRURouterBMC:
      description: "This is a subtype of HWInventoryByFRU for HMSType RouterBMC. It\
        \ represents a Router BMC type. It is selected via the 'discriminator: HWInventoryByFRUType'\
        \ of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRURouterBMC'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          RouterBMCFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_RedfishManagerFRUInfo'
    HWInvByFRUHSNNIC:
      description: "This is a subtype of HWInventoryByFRU for HMSType NodeHsnNic.\
        \ It represents a node HSN NIC type. It is selected via the 'discriminator:\
        \ HWInventoryByFRUType' of HWInventoryByFRU when HWInventoryByFRUType is 'HWInvByFRUHSNNIC'."
      allOf:
      - $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByFRU'
      - type: object
        properties:
          HSNNICFRUInfo:
            $ref: '#/components/schemas/HWInventory.1.0.0_HSNNICFRUInfo'
    HWInventory.1.0.0_RedfishChassisFRUInfo:
      type: object
      properties:
        AssetTag:
          type: string
          description: The administratively-assigned asset tag for this chassis.
          readOnly: true
        ChassisType:
          type: string
          description: "This property indicates the type of physical form factor of\
            \ this resource (from Redfish - not all of these will likely appear in\
            \ practice.  In any case, the HMS type and subtype will identify the hardware\
            \ type, this is for informational purposes only)."
          readOnly: true
          enum:
          - Rack
          - Blade
          - Enclosure
          - StandAlone
          - RackMount
          - Card
          - Cartridge
          - Row
          - Pod
          - Expansion
          - Sidecar
          - Zone
          - Sled
          - Shelf
          - Drawer
          - Module
          - Component
          - Other
        Model:
          type: string
          description: Manufacturer-provided model number for part.
          readOnly: true
        Manufacturer:
          type: string
          description: Intended to provide the manufacturer of the part.
          readOnly: true
        PartNumber:
          type: string
          description: Manufacturer-provided part number for this component.
          readOnly: true
        SerialNumber:
          type: string
          description: Manufacturer-provided serial number for this component.
          readOnly: true
        SKU:
          type: string
          description: Manufacturer-provided SKU for this component.
          readOnly: true
      description: These are pass-through properties of the Redfish Chassis object
        type that are also used in HMS inventory data when this is the underlying
        Redfish object type for a particular HMS component type.  These are properties
        of a specific hardware instance/FRU that remain the same if the component
        is relocated within the system.
    HWInventory.1.0.0_RedfishSystemFRUInfo:
      type: object
      properties:
        AssetTag:
          type: string
          description: The administratively-assigned asset tag for this chassis.
          readOnly: true
        BiosVersion:
          type: string
          description: The version of the system BIOS or primary system firmware.
          readOnly: true
        Model:
          type: string
          description: Manufacturer-provided model number for part.
          readOnly: true
        Manufacturer:
          type: string
          description: Intended to provide the manufacturer of the part.
          readOnly: true
        PartNumber:
          type: string
          description: Manufacturer-provided part number for this component.
          readOnly: true
        SerialNumber:
          type: string
          description: Manufacturer-provided serial number for this component.
          readOnly: true
        SKU:
          type: string
          description: Manufacturer-provided SKU for this component.
        SystemType:
          type: string
          description: Type of system.  Probably always physical for now.
          readOnly: true
          enum:
          - Physical
          - Virtual
          - OS
          - PhysicallyPartitioned
          - VirtuallyPartitioned
        UUID:
          $ref: '#/components/schemas/UUID.1.0.0'
      description: |-
        These are pass-through properties of the Redfish ComputerSystem object that are also used in HMS inventory data.  These are properties of a specific hardware instance that remain the same if the component is relocated within the system.
        Note that Redfish ComputerSystem objects are an abstract type that represents a system, but not necessarily a specific piece of hardware. Chassis objects represent things like the physical enclosure.  The system links to chassis and also to subcomponents that have their own object types like Processors, Memory, and Storage.
        That said, they are a close fit to how we represent nodes in HMS and so it makes sense to pass through their properties since that is how we will discover this information anyways.
    HWInventory.1.0.0_RedfishProcessorFRUInfo:
      type: object
      properties:
        InstructionSet:
          type: string
          description: The instruction set of the processor (Redfish pass-through)
          readOnly: true
          enum:
          - x86
          - x86-64
          - IA-64
          - ARM-A32
          - ARM-A64
          - MIPS32
          - MIPS64
          - OEM
        Manufacturer:
          type: string
          description: The processor manufacturer
          readOnly: true
        MaxSpeedMHz:
          type: number
          description: The maximum clock speed of the processor
          readOnly: true
        Model:
          type: string
          description: The product model number of this device
          readOnly: true
        ProcessorArchitecture:
          type: string
          description: The architecture of the processor
          readOnly: true
          enum:
          - x86
          - IA-64
          - ARM
          - MIPS
          - OEM
        ProcessorId:
          $ref: '#/components/schemas/HWInventory.1.0.0_RedfishProcessorFRUInfo_ProcessorId'
        ProcessorType:
          type: string
          description: The type of processor
          readOnly: true
          enum:
          - CPU
          - GPU
          - FPGA
          - DSP
          - Accelerator
          - OEM
        TotalCores:
          type: number
          description: The total number of cores contained in this processor
          readOnly: true
        TotalThreads:
          type: number
          description: The total number of execution threads supported by this processor
          readOnly: true
      description: These are pass-through properties of the Redfish Processor object
        type that are also used in HMS inventory data. These are properties of a specific
        processor instance that remain the same if it is relocated within the system.
    HWInventory.1.0.0_RedfishDriveFRUInfo:
      type: object
      properties:
        Manufacturer:
          type: string
          description: The drive manufacturer
          readOnly: true
        SerialNumber:
          type: string
          description: Unique identifier
          readOnly: true
        PartNumber:
          type: string
          description: Manufacturer part number
          readOnly: true
        Model:
          type: string
          description: Manufacturer model name
          readOnly: true
        SKU:
          type: string
          description: Manufacturer Stock Keeping Unit
          readOnly: true
        CapacityBytes:
          type: number
          description: Manufacturer Stock Keeping Unit
          readOnly: true
        Protocol:
          type: string
          description: The protocol that this drive currently uses to communicate
            to the storage controller.
          readOnly: true
          enum:
          - AHCI
          - FC
          - FCP
          - FCoE
          - FICON
          - FTP
          - GenZ
          - HTTP
          - HTTPS
          - I2C
          - MultiProtocol
          - NFSv3
          - NFSv4
          - NVMe
          - NVMeOverFabrics
          - OEM
          - PCIe
          - RoCE
          - RoCEv2
          - SAS
          - SATA
          - SFTP
          - SMB
          - TCP
          - TFTP
          - UDP
          - UHCI
          - USB
          - iSCSI
          - iWARP
        MediaType:
          type: string
          description: The type of media contained in this drive
          readOnly: true
          enum:
          - HDD
          - SMR
          - SSD
        RotationSpeedRPM:
          type: number
          description: "The rotation speed of this drive, in revolutions per minute\
            \ (RPM)"
          readOnly: true
        BlockSizeBytes:
          type: integer
          description: "The size, in bytes, of the smallest addressable unit, or block"
          readOnly: true
        CapableSpeedGbs:
          type: number
          description: "The speed, in gigabit per second (Gbit/s), at which this drive\
            \ can communicate to a storage controller in ideal conditions."
          readOnly: true
        FailurePredicted:
          type: boolean
          description: An indication of whether this drive currently predicts a failure
            in the near future.
          readOnly: true
        EncryptionAbility:
          type: string
          description: The encryption ability of this drive.
          readOnly: true
          enum:
          - None
          - Other
          - SelfEncryptingDrive
        EncryptionStatus:
          type: string
          description: The status of the encryption of this drive.
          readOnly: true
          enum:
          - Foreign
          - Locked
          - Encrypted
          - Unencrypted
          - Unlocked
        NegotiatedSpeedGbs:
          type: number
          description: "The speed, in gigabit per second (Gbit/s), at which this drive\
            \ currently communicates to the storage controller."
          readOnly: true
        PredictedMediaLifeLeftPercent:
          type: number
          description: The percentage of reads and writes that are predicted to still
            be available for the media.
          readOnly: true
      description: These are pass-through properties of the Redfish Drive object type
        that are also used in HMS inventory data. These are properties of a specific
        drive instance that remain the same if it is relocated within the system.
    HWInventory.1.0.0_RedfishMemoryFRUInfo:
      type: object
      properties:
        BaseModuleType:
          type: string
          description: The base module type of Memory.
          readOnly: true
          enum:
          - RDIMM
          - UDIMM
          - SO_DIMM
          - LRDIMM
          - Mini_RDIMM
          - Mini_UDIMM
          - SO_RDIMM_72b
          - SO_UDIMM_72b
          - SO_DIMM_16b
          - SO_DIMM_32b
        BusWidthBits:
          type: number
          description: Bus width in bits.
          readOnly: true
        CapacityMiB:
          type: number
          description: Memory Capacity in MiB.
          readOnly: true
        DataWidthBits:
          type: number
          description: Data width in bits.
          readOnly: true
        ErrorCorrection:
          type: string
          description: "Whether single or multiple errors, or address parity errors\
            \ can be corrected."
          readOnly: true
          enum:
          - NoECC
          - SingleBitECC
          - MultiBitECC
          - AddressParity
        Manufacturer:
          type: string
          description: The manufacturer of the memory module
          readOnly: true
        MemoryType:
          type: string
          description: Type of memory module.
          readOnly: true
          enum:
          - DRAM
          - NVDIMM_N
          - NVDIMM_F
          - NVDIMM_P
        MemoryDeviceType:
          type: string
          description: Type details of the memory.
          readOnly: true
          enum:
          - DDR
          - DDR2
          - DDR3
          - DDR4
          - DDR4_SDRAM
          - DDR4E_SDRAM
          - LPDDR4_SDRAM
          - DDR3_SDRAM
          - LPDDR3_SDRAM
          - DDR2_SDRAM
          - DDR2_SDRAM_FB_DIMM
          - DDR2_SDRAM_FB_DIMM_PROBE
          - DDR_SGRAM
          - DDR_SDRAM
          - ROM
          - SDRAM
          - EDO
          - FastPageMode
          - PipelinedNibble
        OperatingSpeedMhz:
          type: number
          description: Operating speed of Memory in MHz.
          readOnly: true
        PartNumber:
          type: string
          description: Manufacturer-provided part number for this component.
          readOnly: true
        RankCount:
          minimum: 0
          type: number
          description: Number of ranks available in the memory.
          readOnly: true
        SerialNumber:
          type: string
          description: Manufacturer-provided serial number for this component.
          readOnly: true
      description: These are pass-through properties of the Redfish Memory object
        type that are also used in HMS inventory data.  These are properties of a
        specific memory module that remain the same if it the module is relocated
        within the system.
    HWInventory.1.0.0_RedfishPDUFRUInfo:
      type: object
      properties:
        AssetTag:
          type: string
          description: The administratively-assigned asset tag for this chassis.
          readOnly: true
        DateOfManufacture:
          type: string
          description: Manufacturer-provided date-of-manufacture for part.
          readOnly: true
        EquipmentType:
          type: string
          description: "This property indicates the type of PowerDistribution in practice.\
            \  In any case, the HMS type and subtype will identify the hardware type,\
            \ this is for informational purposes only)."
          readOnly: true
          enum:
          - RackPDU
          - FloorPDU
          - ManualTransferSwitch
          - AutomaticTransferSwitch
          - Other
        FirmwareVersion:
          type: string
          description: Firmware version at time of discovery.
          readOnly: true
        HardwareRevision:
          type: string
          description: Manufacturer-provided HardwareRevision for part.
          readOnly: true
        Model:
          type: string
          description: Manufacturer-provided model number for part.
          readOnly: true
        Manufacturer:
          type: string
          description: Intended to provide the manufacturer of the part.
          readOnly: true
        PartNumber:
          type: string
          description: Manufacturer-provided part number for this component.
          readOnly: true
        SerialNumber:
          type: string
          description: Manufacturer-provided serial number for this component.
          readOnly: true
        SKU:
          type: string
          description: Manufacturer-provided SKU for this component.
          readOnly: true
        CircuitSummary:
          $ref: '#/components/schemas/HWInventory.1.0.0_RedfishPDUFRUInfo_CircuitSummary'
      description: These are pass-through properties of the Redfish PowerDistribution
        type that are also used in HMS inventory data when this is the underlying
        Redfish object type for a particular HMS component type.  These are properties
        of a specific hardware instance/FRU that remain the same if the component
        is relocated within the system.
    HWInventory.1.0.0_RedfishOutletFRUInfo:
      type: object
      properties:
        VoltageType:
          type: string
          description: type of voltage
          readOnly: true
          enum:
          - AC
          - DC
        NominalVoltage:
          type: string
          description: Nominal voltage for outlet.
          readOnly: true
        PowerEnabled:
          type: boolean
          description: Indicates if the outlet can be powered.
          example: true
        RatedCurrentAmps:
          type: number
          description: Rated current in amps
          readOnly: true
        OutletType:
          type: string
          description: Type of outlet.
          readOnly: true
        PhaseWiringType:
          type: string
          description: Phase wiring type
          readOnly: true
          enum:
          - OnePhase3Wire
          - TwoPhase3Wire
          - TwoPhase4Wire
          - ThreePhase4Wire
          - ThreePhase5Wire
      description: These are pass-through properties of the Redfish Outlet type that
        are also used in HMS inventory data when this is the underlying Redfish object
        type for a particular HMS component type.  These are the properties of a specific
        hardware instance/FRU that remain the same if the component is relocated within
        the system.  Child of a PDU.
    HWInventory.1.0.0_RedfishCMMRectifierFRUInfo:
      type: object
      properties:
        Manufacturer:
          type: string
          description: The manufacturer of this power supply.
          readOnly: true
        SerialNumber:
          type: string
          description: The serial number for this power supply.
          readOnly: true
        Model:
          type: string
          description: The model number for this power supply.
          readOnly: true
        PartNumber:
          type: string
          description: The part number for this power supply.
          readOnly: true
        PowerCapacityWatts:
          type: number
          description: The maximum capacity of this power supply.
          readOnly: true
        PowerInputWatts:
          type: number
          description: The measured input power of this power supply.
          readOnly: true
        PowerOutputWatts:
          type: number
          description: The measured output power of this power supply.
          readOnly: true
        PowerSupplyType:
          type: string
          description: The power supply type (AC or DC).
          readOnly: true
      description: These are pass-through properties of the Redfish PowerSupply type
        that are also used in HMS inventory data when this is the underlying Redfish
        object type for a particular HMS component type.  These are the properties
        of a specific hardware instance/FRU that remain the same if the component
        is relocated within the system.  Child of a Chassis.
    HWInventory.1.0.0_RedfishNodeAccelRiserFRUInfo:
      type: object
      properties:
        Producer:
          type: string
          description: The manufacturer of this riser card.
          readOnly: true
        SerialNumber:
          type: string
          description: The serial number for this riser card.
          readOnly: true
        Model:
          type: string
          description: The model number for this riser card.
          readOnly: true
        PartNumber:
          type: string
          description: The part number for this riser card.
          readOnly: true
        ProductionDate:
          type: string
          description: The date of production of this riser card.
          readOnly: true
        Version:
          type: string
          description: The version of this riser card.
          readOnly: true
        EngineeringChangeLevel:
          type: string
          description: The engineering change level of this riser card.
          readOnly: true
        PhysicalContext:
          type: string
          description: The hardware type of this riser card.
          readOnly: true
      description: These are the properties of the NodeAccelRiser type that are passed-through
        to the HMS inventory data when the underlying Redfish object  type is an Assembly
        with a PhysicalContext of GPUSubsystem.  These are the properties of a specific
        hardware instance/FRU that remain the same if the component is relocated within
        the system.  Child of a Chassis.
    HWInventory.1.0.0_RedfishNodeEnclosurePowerSupplyFRUInfo:
      type: object
      properties:
        Manufacturer:
          type: string
          description: The manufacturer of this power supply.
          readOnly: true
        SerialNumber:
          type: string
          description: The serial number for this power supply.
          readOnly: true
        Model:
          type: string
          description: The model number for this power supply.
          readOnly: true
        PartNumber:
          type: string
          description: The part number for this power supply.
          readOnly: true
        PowerCapacityWatts:
          type: number
          description: The maximum capacity of this power supply.
          readOnly: true
        PowerInputWatts:
          type: number
          description: The measured input power of this power supply.
          readOnly: true
        PowerOutputWatts:
          type: number
          description: The measured output power of this power supply.
          readOnly: true
        PowerSupplyType:
          type: string
          description: The power supply type (AC or DC).
          readOnly: true
      description: These are pass-through properties of the Redfish PowerSupply type
        that are also used in HMS inventory data when this is the underlying Redfish
        object type for a particular HMS component type.  These are the properties
        of a specific hardware instance/FRU that remain the same if the component
        is relocated within the system.  Child of a Chassis.
    HWInventory.1.0.0_RedfishManagerFRUInfo:
      type: object
      properties:
        ManagerType:
          type: string
          description: "The type of manager that this Resource represents, i.e. BMC,\
            \ EnclosureManager, RackManager, etc."
          readOnly: true
        Manufacturer:
          type: string
          description: The manufacturer of this manager.
          readOnly: true
        SerialNumber:
          type: string
          description: The serial number for this manager.
          readOnly: true
        Model:
          type: string
          description: The model number for this manager.
          readOnly: true
        PartNumber:
          type: string
          description: The part number for this manager.
          readOnly: true
      description: These are pass-through properties of the Redfish Manager type that
        are also used in HMS inventory data when this is the underlying Redfish object
        type for a particular HMS component type.  These are the properties of a specific
        hardware instance/FRU that remain the same if the component is relocated within
        the system.
    HWInventory.1.0.0_HSNNICFRUInfo:
      type: object
      properties:
        Manufacturer:
          type: string
          description: The manufacturer of this HSN NIC.
        Model:
          type: string
          description: The model of this HSN NIC.
        PartNumber:
          type: string
          description: The part number for this HSN NIC.
        SKU:
          type: string
          description: The SKU for this HSN NIC.
        SerialNumber:
          type: string
          description: The serial number for this HSN NIC.
      description: These are pass-through properties of the Node HSN NIC type that
        are also used in HMS inventory data when this is the underlying network object
        type for a particular HMS component type.  These are the properties of a specific
        hardware instance/FRU that remain the same if the component is relocated within
        the system.
    HWInventory.1.0.0_HWInventoryHistoryCollection:
      type: object
      properties:
        Components:
          type: array
          items:
            $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistoryArray'
      description: This is the array of sorted history entries (by FRU or by location).
      example:
        Components:
        - ID: ID
          History:
          - FRUID: FRUID
            EventType: Added
            ID: x0c0s0b0n0
            Timestamp: 2000-01-23T04:56:07.000+00:00
          - FRUID: FRUID
            EventType: Added
            ID: x0c0s0b0n0
            Timestamp: 2000-01-23T04:56:07.000+00:00
        - ID: ID
          History:
          - FRUID: FRUID
            EventType: Added
            ID: x0c0s0b0n0
            Timestamp: 2000-01-23T04:56:07.000+00:00
          - FRUID: FRUID
            EventType: Added
            ID: x0c0s0b0n0
            Timestamp: 2000-01-23T04:56:07.000+00:00
    HWInventory.1.0.0_HWInventoryHistoryArray:
      type: object
      properties:
        ID:
          type: string
          description: Locational xname or FRU ID of the component associated with
            the history entries in the 'History' array.
        History:
          type: array
          items:
            $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryHistory'
      description: This is the array of history entries for a particular FRU or component
        location (xname).
      example:
        ID: ID
        History:
        - FRUID: FRUID
          EventType: Added
          ID: x0c0s0b0n0
          Timestamp: 2000-01-23T04:56:07.000+00:00
        - FRUID: FRUID
          EventType: Added
          ID: x0c0s0b0n0
          Timestamp: 2000-01-23T04:56:07.000+00:00
    HWInventory.1.0.0_HWInventoryHistory:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XName.1.0.0'
        FRUID:
          $ref: '#/components/schemas/FRUId.1.0.0'
        Timestamp:
          type: string
          description: The time that the history entry was created.
          format: date-time
        EventType:
          type: string
          description: Describes the type of event the history entry was created for.
          example: Added
          enum:
          - Added
          - Removed
          - Scanned
      description: "This is a HWInventory history entry. Each time a HWInventory event\
        \ happens a history record is created with associated data including locational\
        \ xname, FRU ID, timestamp, and event type (Added, Removed, Scanned, etc)."
      example:
        FRUID: FRUID
        EventType: Added
        ID: x0c0s0b0n0
        Timestamp: 2000-01-23T04:56:07.000+00:00
    RedfishEndpoint.1.0.0_RedfishEndpoint:
      required:
      - ID
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/XNameRFEndpoint.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
        Name:
          type: string
          description: "This is an arbitrary, user-provided name for the endpoint.\
            \  It can describe anything that is not captured by the ID/xname."
        Hostname:
          type: string
          description: "Hostname of the endpoint's FQDN, will always be the host portion\
            \ of the fully-qualified domain name. Note that the hostname should normally\
            \ always be the same as the ID field (i.e. xname) of the endpoint."
        Domain:
          type: string
          description: Domain of the endpoint's FQDN.  Will always match remaining
            non-hostname portion of fully-qualified domain name (FQDN).
        FQDN:
          type: string
          description: Fully-qualified domain name of RF endpoint on management network.
            This is not writable because it is made up of the Hostname and Domain.
        Enabled:
          type: boolean
          description: "To disable a component without deleting its data from the\
            \ database, can be set to false"
          example: true
        UUID:
          $ref: '#/components/schemas/UUID.1.0.0'
        User:
          type: string
          description: Username to use when interrogating endpoint
        Password:
          type: string
          description: "Password to use when interrogating endpoint, normally suppressed\
            \ in output."
        UseSSDP:
          type: boolean
          description: Whether to use SSDP for discovery if the EP supports it.
        MacRequired:
          type: boolean
          description: Whether the MAC must be used (e.g. in River) in setting up
            geolocation info so the endpoint's location in the system can be determined.  The
            MAC does not need to be provided when creating the endpoint if the endpoint
            type can arrive at a geolocated hostname on its own.
        MACAddr:
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
          description: "This is the MAC on the of the Redfish Endpoint on the management\
            \ network, i.e. corresponding to the FQDN field's Ethernet interface where\
            \ the root service is running. Not the HSN MAC. This is a MAC address\
            \ in the standard colon-separated 12 byte hex format."
          example: ae:12:e2:ff:89:9d
        IPAddress:
          type: string
          description: "This is the IP of the Redfish Endpoint on the management network,\
            \ i.e. corresponding to the FQDN field's Ethernet interface where the\
            \ root service is running. This may be IPv4 or IPv6"
          example: 10.254.2.10
        RediscoverOnUpdate:
          type: boolean
          description: Trigger a rediscovery when endpoint info is updated.
        TemplateID:
          type: string
          description: Links to a discovery template defining how the endpoint should
            be discovered.
        DiscoveryInfo:
          $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint_DiscoveryInfo'
      description: This describes a RedfishEndpoint that is interrogated in order
        to perform discovery of the components below it. It is a BMC or card/blade
        controller or other device that operates a Redfish entry point through which
        the components underneath it may be discovered and managed.
      example:
        User: User
        Hostname: Hostname
        Enabled: true
        MacRequired: true
        Name: Name
        DiscoveryInfo:
          LastDiscoveryAttempt: 2000-01-23T04:56:07.000+00:00
          LastDiscoveryStatus: EndpointInvalid
          RedfishVersion: RedfishVersion
        Type: Node
        FQDN: FQDN
        UseSSDP: true
        MACAddr: ae:12:e2:ff:89:9d
        ID: x0c0s0b0
        Domain: Domain
        UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
        IPAddress: 10.254.2.10
        RediscoverOnUpdate: true
        TemplateID: TemplateID
        Password: Password
    RedfishEndpoint.1.0.0_ResourceURICollection:
      type: object
      properties:
        Name:
          type: string
          description: "Should describe the collection, though the type of resources\
            \ the links correspond to should also be inferred from the context in\
            \ which the collection was obtained."
          readOnly: true
          example: (Type of Object) Collection
        Members:
          type: array
          description: An array of ResourceIds.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceURI.1.0.0'
        MemberCount:
          type: number
          description: Number of ResourceURIs in the collection
          format: int32
          readOnly: true
    RedfishEndpointArray_RedfishEndpointArray:
      type: object
      properties:
        RedfishEndpoints:
          type: array
          description: Contains the HMS RedfishEndpoint objects in the array.
          items:
            $ref: '#/components/schemas/RedfishEndpoint.1.0.0_RedfishEndpoint'
      description: This is a collection of RedfishEndpoint objects returned whenever
        a query is expected to result in 0 to n matches.
      example:
        RedfishEndpoints:
        - User: User
          Hostname: Hostname
          Enabled: true
          MacRequired: true
          Name: Name
          DiscoveryInfo:
            LastDiscoveryAttempt: 2000-01-23T04:56:07.000+00:00
            LastDiscoveryStatus: EndpointInvalid
            RedfishVersion: RedfishVersion
          Type: Node
          FQDN: FQDN
          UseSSDP: true
          MACAddr: ae:12:e2:ff:89:9d
          ID: x0c0s0b0
          Domain: Domain
          UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
          IPAddress: 10.254.2.10
          RediscoverOnUpdate: true
          TemplateID: TemplateID
          Password: Password
        - User: User
          Hostname: Hostname
          Enabled: true
          MacRequired: true
          Name: Name
          DiscoveryInfo:
            LastDiscoveryAttempt: 2000-01-23T04:56:07.000+00:00
            LastDiscoveryStatus: EndpointInvalid
            RedfishVersion: RedfishVersion
          Type: Node
          FQDN: FQDN
          UseSSDP: true
          MACAddr: ae:12:e2:ff:89:9d
          ID: x0c0s0b0
          Domain: Domain
          UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
          IPAddress: 10.254.2.10
          RediscoverOnUpdate: true
          TemplateID: TemplateID
          Password: Password
    RedfishEndpointArray_PostQuery:
      required:
      - RedfishEndpointIDs
      type: object
      properties:
        RedfishEndpointIDs:
          type: array
          description: An array of XName/ID values for the RedfishEndpoints to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        partition:
          $ref: '#/components/schemas/XNamePartition.1.0.0'
      description: "There are limits to the length of an HTTP URL and query string.\
        \ Hence, if we wish to query an arbitrary list of XName/IDs, it will need\
        \ to be in the body of the request.  This object is used for this purpose.\
        \  It is similar to the analogous GET operation."
    ServiceEndpoint.1.0.0_ServiceEndpoint:
      type: object
      properties:
        RedfishEndpointID:
          $ref: '#/components/schemas/XNameRFEndpoint.1.0.0'
        RedfishType:
          $ref: '#/components/schemas/RedfishType.1.0.0'
        RedfishSubtype:
          $ref: '#/components/schemas/RedfishSubtype.1.0.0'
        UUID:
          $ref: '#/components/schemas/UUID.1.0.0'
        OdataID:
          $ref: '#/components/schemas/OdataID.1.0.0'
        RedfishEndpointFQDN:
          type: string
          description: This is a back-reference to the fully-qualified domain name
            of the parent Redfish endpoint that was used to discover the component.  It
            is the RedfishEndpointID field i.e. the hostname/xname plus its current
            domain.
          readOnly: true
        RedfishURL:
          type: string
          description: "This is the complete URL to the corresponding Redfish object,\
            \ combining the RedfishEndpoint's FQDN and the OdataID."
          readOnly: true
        ServiceInfo:
          $ref: '#/components/schemas/ServiceEndpoint.1.0.0_ServiceInfo'
      description: |-
        This describes a service running on a Redfish endpoint and is populated when Redfish endpoint discovery occurs.  It is used by clients who need to interact directly with the service via Redfish.
        There are also ComponentEndpoints, which represent Redfish components of a physical type (i.e., we track their state as components), which are also discovered when the Redfish Endpoint is discovered.
        The RedfishEndpointID is just the ID of the parent Redfish endpoint. As there are many service types per endpoint, the RedfishType must also be included to get a unique entry for a service.  Services do not have their own xnames, and so they are identified by thee combination of the RedfishEndpointID they are running on, plus the RedfishType value (e.g. AccountService, TaskService, etc.).
        NOTE: These records are discovered, not created, and therefore are not writable (since any changes would be overwritten by a subsequent discovery).
      example:
        ServiceInfo:
          Name: Name
        RedfishEndpointFQDN: RedfishEndpointFQDN
        RedfishType: ComputerSystem
        OdataID: /redfish/v1/Systems/System.Embedded.1
        RedfishEndpointID: x0c0s0b0
        UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
        RedfishSubtype: Physical
        RedfishURL: RedfishURL
    ServiceEndpoint.1.0.0_ServiceInfo:
      type: object
      properties:
        Name:
          type: string
          description: The name of the service.
          readOnly: true
      description: This is any additional information for the service.  This is service
        specific.  Schema for Redfish services can be found at https://redfish.dmtf.org/redfish/schema_index
      example:
        Name: Name
    ServiceEndpointArray_ServiceEndpointArray:
      type: object
      properties:
        ServiceEndpoints:
          type: array
          description: Contains the HMS ServiceEndpoint objects in the array.
          items:
            $ref: '#/components/schemas/ServiceEndpoint.1.0.0_ServiceEndpoint'
      description: This is a collection of ServiceEndpoint objects returned whenever
        a query is expected to result in 0 to n matches.
      example:
        ServiceEndpoints:
        - ServiceInfo:
            Name: Name
          RedfishEndpointFQDN: RedfishEndpointFQDN
          RedfishType: ComputerSystem
          OdataID: /redfish/v1/Systems/System.Embedded.1
          RedfishEndpointID: x0c0s0b0
          UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
          RedfishSubtype: Physical
          RedfishURL: RedfishURL
        - ServiceInfo:
            Name: Name
          RedfishEndpointFQDN: RedfishEndpointFQDN
          RedfishType: ComputerSystem
          OdataID: /redfish/v1/Systems/System.Embedded.1
          RedfishEndpointID: x0c0s0b0
          UUID: bf9362ad-b29c-40ed-9881-18a5dba3a26b
          RedfishSubtype: Physical
          RedfishURL: RedfishURL
    CompEthInterface.1.0.0:
      required:
      - MACAddress
      type: object
      properties:
        ID:
          type: string
          description: The ID of the component Ethernet interface.
          readOnly: true
          example: a4bf012b7310
        Description:
          type: string
          description: An optional description for the component Ethernet interface.
        MACAddress:
          type: string
          description: The MAC address of this component Ethernet interface
        IPAddresses:
          type: array
          description: The IP addresses associated with the MAC address for this component
            Ethernet interface.
          items:
            $ref: '#/components/schemas/CompEthInterface.1.0.0_IPAddressMapping'
        LastUpdate:
          type: string
          description: A timestamp for when the component Ethernet interface last
            was modified.
          format: date-time
          readOnly: true
          example: 2020-05-13T19:18:45.524974Z
        ComponentID:
          $ref: '#/components/schemas/XNameRW.1.0.0'
        Type:
          $ref: '#/components/schemas/HMSType.1.0.0'
      description: A component Ethernet interface is an object describing a relation
        between a MAC address and IP address for components.
      example:
        Type: Node
        Description: Description
        MACAddress: MACAddress
        LastUpdate: 2020-05-13T19:18:45.524974Z
        IPAddresses:
        - Network: HMN
          IPAddress: 10.252.0.1
        - Network: HMN
          IPAddress: 10.252.0.1
        ID: a4bf012b7310
        ComponentID: x0c0s1b0n0
    CompEthInterface.1.0.0_Patch:
      type: object
      properties:
        Description:
          type: string
          description: An optional description for the component Ethernet interface.
        IPAddresses:
          type: array
          description: The IP addresses associated with the MAC address for this component
            Ethernet interface.
          items:
            $ref: '#/components/schemas/CompEthInterface.1.0.0_IPAddressMapping'
        ComponentID:
          $ref: '#/components/schemas/XNameRW.1.0.0'
      description: "To update the IP addresses, CompID, and/or description fields\
        \ of a component Ethernet interface, a PATCH operation can be used. Omitted\
        \ fields are not updated. NOTE: Updating the IP addresses field updates the\
        \ LastUpdate field.  "
    CompEthInterface.1.0.0_IPAddressMapping:
      required:
      - IPAddress
      type: object
      properties:
        IPAddress:
          type: string
          description: The IP address associated with the MAC address for this component
            Ethernet interface on for this particular network.
          example: 10.252.0.1
        Network:
          type: string
          description: The network that this IP addresses is associated with.
          example: HMN
      description: A IP address Mapping maps a IP address to a network. In a Component
        Ethernet Interface it is used to describe what IP addresses and their networks
        that are associated with it.
      example:
        Network: HMN
        IPAddress: 10.252.0.1
    CompEthInterface.1.0.0_IPAddressMapping_Patch:
      type: object
      properties:
        Network:
          type: string
          description: The network that this IP addresses is associated with.
      description: To update the network field a IP address mapping in a component  Ethernet
        interface a PATCH operation can be used. Omitted fields are not updated.
    DiscoveryStatus.1.0.0_DiscoveryStatus:
      type: object
      properties:
        ID:
          type: number
          description: The ID number of the discover operation.
          format: int32
          readOnly: true
          example: 0.0
        Status:
          type: string
          description: Describes the status of the given Discover operation.
          readOnly: true
          example: Complete
          enum:
          - NotStarted
          - Pending
          - InProgress
          - Complete
        LastUpdateTime:
          type: string
          description: The time that the Status field was last updated.
          format: date-time
          readOnly: true
        Details:
          $ref: '#/components/schemas/DiscoveryStatus.1.0.0_Details'
      description: Returns info on the current status of a discovery operation with
        the given ID returned when a Discover action is requested.
      example:
        Status: Complete
        Details: {}
        LastUpdateTime: 2000-01-23T04:56:07.000+00:00
        ID: 0.0
    DiscoveryStatus.1.0.0_Details:
      type: object
      description: Details accompanying a DiscoveryStatus entry.  Optional. Reserved
        for future use.
    Discover.1.0.0_DiscoverInput:
      type: object
      properties:
        xnames:
          type: array
          description: "An array of XName/ID values for the RedfishEndpoints to discover.\
            \ If zero-length or omitted, all RedfishEndpoints will be discovered."
          items:
            $ref: '#/components/schemas/XNameRFEndpoint.1.0.0'
        force:
          type: boolean
          description: Whether to force discovery if there is already a conflicting
            DiscoveryStatus entry that is either Pending or InProgress. default is
            false.
          example: false
      description: The POST body for a Discover operation.  Note that these fields
        are optional.  The default for the xnames field is to select all RedfishEndpoints.
        The default for force is false.
    Subscriptions_SCNPostSubscription:
      type: object
      properties:
        Subscriber:
          type: string
          description: This is the name of the subscriber.
          example: scnfd@sms02.cray.com
        Enabled:
          type: boolean
          description: This value toggles subscriptions to state change notifications
            concerning components being disabled or enabled. 'true' will cause the
            subscriber to be notified about components being enabled or disabled.
            'false' or empty will result in no such notifications.
          example: true
        Roles:
          type: array
          description: This is an array containing component roles for which to be
            notified when role changes occur.
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRoles:
          type: array
          description: This is an array containing component subroles for which to
            be notified when subrole changes occur.
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        SoftwareStatus:
          type: array
          description: This is an array containing component software statuses for
            which to be notified when software status changes occur.
          items:
            type: string
            description: "SoftwareStatus of the node, used by the managed plane for\
              \ running nodes."
        States:
          type: array
          description: This is an array containing component states for which to be
            notified when state changes occur.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
        Url:
          $ref: '#/components/schemas/Subscriptions_Url'
      description: This is the JSON payload that contains information to create a
        new state change notification subscription
      example:
        SubRoles:
        - Worker
        - Worker
        States:
        - Ready
        - Ready
        Subscriber: scnfd@sms02.cray.com
        Enabled: true
        SoftwareStatus:
        - SoftwareStatus
        - SoftwareStatus
        Roles:
        - Compute
        - Compute
        Url: https://sms02.cray.com:27000/scnfd/v1/scn
    Subscriptions_SCNPatchSubscription:
      type: object
      properties:
        Op:
          type: string
          description: The type of operation to be performed on the subscription
          example: add
          enum:
          - add
          - remove
          - replace
        Enabled:
          type: boolean
          description: This value toggles subscriptions to state change notifications
            concerning components being disabled or enabled. 'true' will cause the
            subscriber to be notified about components being enabled or disabled.
            'false' or empty will result in no such notifications.
          example: true
        Roles:
          type: array
          description: This is an array containing component roles for which to be
            notified when role changes occur.
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRoles:
          type: array
          description: This is an array containing component subroles for which to
            be notified when subrole changes occur.
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        SoftwareStatus:
          type: array
          description: This is an array containing component software statuses for
            which to be notified when software status changes occur.
          items:
            type: string
            description: "SoftwareStatus of the node, used by the managed plane for\
              \ running nodes."
        States:
          type: array
          description: This is an array containing component states for which to be
            notified when state changes occur.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
      description: This is the JSON payload that contains state change notification
        subscription information.
    Subscriptions_SCNSubscriptionArrayItem.1.0.0:
      type: object
      properties:
        ID:
          $ref: '#/components/schemas/Subscription_ID'
        Subscriber:
          type: string
          example: scnfd@sms02.cray.com
        Enabled:
          type: boolean
          description: This value toggles subscriptions to state change notifications
            concerning components being disabled or enabled. 'true' will cause the
            subscriber to be notified about components being enabled or disabled.
            'false' or empty will result in no such notifications.
          example: true
        Roles:
          type: array
          description: This is an array containing component roles for which to be
            notified when role changes occur.
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        SubRoles:
          type: array
          description: This is an array containing component subroles for which to
            be notified when subrole changes occur.
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        SoftwareStatus:
          type: array
          description: This is an array containing component software statuses for
            which to be notified when software status changes occur.
          items:
            type: string
            description: "SoftwareStatus of the node, used by the managed plane for\
              \ running nodes."
        States:
          type: array
          description: This is an array containing component states for which to be
            notified when state changes occur.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
        Url:
          $ref: '#/components/schemas/Subscriptions_Url'
      description: State change notification subscription JSON payload.
      example:
        SubRoles:
        - Worker
        - Worker
        States:
        - Ready
        - Ready
        Subscriber: scnfd@sms02.cray.com
        Enabled: true
        SoftwareStatus:
        - SoftwareStatus
        - SoftwareStatus
        Roles:
        - Compute
        - Compute
        ID: "42"
        Url: https://sms02.cray.com:27000/scnfd/v1/scn
    Subscriptions_SCNSubscriptionArray:
      type: object
      properties:
        SubscriptionList:
          type: array
          items:
            $ref: '#/components/schemas/Subscriptions_SCNSubscriptionArrayItem.1.0.0'
      description: List of all currently held state change notification subscriptions.
      example:
        SubscriptionList:
        - SubRoles:
          - Worker
          - Worker
          States:
          - Ready
          - Ready
          Subscriber: scnfd@sms02.cray.com
          Enabled: true
          SoftwareStatus:
          - SoftwareStatus
          - SoftwareStatus
          Roles:
          - Compute
          - Compute
          ID: "42"
          Url: https://sms02.cray.com:27000/scnfd/v1/scn
        - SubRoles:
          - Worker
          - Worker
          States:
          - Ready
          - Ready
          Subscriber: scnfd@sms02.cray.com
          Enabled: true
          SoftwareStatus:
          - SoftwareStatus
          - SoftwareStatus
          Roles:
          - Compute
          - Compute
          ID: "42"
          Url: https://sms02.cray.com:27000/scnfd/v1/scn
    Subscriptions_Url:
      type: string
      description: URL to send notifications to
      example: https://sms02.cray.com:27000/scnfd/v1/scn
    Subscription_ID:
      type: string
      description: This is the ID associated with the subscription that was generated
        at its creation.
      example: "42"
    Group.1.0.0:
      required:
      - label
      type: object
      properties:
        label:
          $ref: '#/components/schemas/ResourceName'
        description:
          type: string
          description: "A one-line, user-provided description of the group."
        tags:
          type: array
          description: A free-form array of strings to provide extra organization/filtering.
            Not to be confused with labels/groups.
          items:
            $ref: '#/components/schemas/ResourceName'
        exclusiveGroup:
          $ref: '#/components/schemas/ResourceName'
        members:
          $ref: '#/components/schemas/Members.1.0.0'
      description: "A group is an informal, possibly overlapping division of the system\
        \ that groups components under an administratively chosen label (i.e. group\
        \ name). Unlike partitions, components can be members of any number of groups."
      example:
        label: blue
        description: This is the blue group
        tags:
        - optional_tag1
        - optional_tag2
        exclusiveGroup: optional_excl_group
        members:
          ids:
          - x1c0s1b0n0
          - x1c0s1b0n1
          - x1c0s2b0n0
          - x1c0s2b0n1
    Group.1.0.0_Patch:
      type: object
      properties:
        description:
          type: string
          description: "A one-line, user-provided description of the group."
        tags:
          type: array
          description: A free-form array of strings to provide extra organization/filtering.
            Not to be confused with labels/groups.
          items:
            $ref: '#/components/schemas/ResourceName'
      description: "To update the tags array and/or description, a PATCH operation\
        \ can be used.  If either field is omitted, it will not be updated. NOTE:\
        \ This cannot be used to completely replace the members list Rather, individual\
        \ members can be removed or added with the POST/DELETE /members API."
      example:
        description: This is an updated group description
        tags:
        - new_tag
        - existing_tag
    Partition.1.0.0:
      required:
      - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ResourceName'
        description:
          type: string
          description: "A one-line, user-provided description of the partition."
        tags:
          type: array
          description: A free-form array of strings to provide extra organization/filtering.
            Not to be confused with labels/groups.
          items:
            $ref: '#/components/schemas/ResourceName'
        members:
          $ref: '#/components/schemas/Members.1.0.0'
      description: "A partition is a formal, non-overlapping division of the system\
        \ that forms an administratively distinct sub-system e.g. for implementing\
        \ multi-tenancy."
      example:
        name: p1
        description: This is partition 1
        tags:
        - optional_tag_a
        - optional_tag1
        members:
          ids:
          - x1c0s1b0n0
          - x1c0s1b0n1
          - x2c0s3b0n0
          - x2c0s3b0n1
    Partition.1.0.0_Patch:
      type: object
      properties:
        description:
          type: string
          description: "A one-line, user-provided description of the group."
        tags:
          type: array
          description: A free-form array of strings to provide extra organization/filtering.
            Not to be confused with labels/groups.
          items:
            $ref: '#/components/schemas/ResourceName'
      description: "To update the tags array and/or description, a PATCH operation\
        \ can be used.  If either field is omitted, it will not be updated. NOTE:\
        \ This cannot be used to completely replace the members list Rather, individual\
        \ members can be removed or added with the POST/DELETE /members API."
      example:
        description: This is an updated partition description
        tags:
        - new_tag
        - existing_tag
    Members.1.0.0:
      type: object
      properties:
        ids:
          type: array
          description: Set of Component XName IDs that represent the membership of
            the group or partition.
          items:
            $ref: '#/components/schemas/XNameRW.1.0.0'
      description: The members are a fully enumerated (i.e. no implied members besides
        those explicitly provided) representation of the components a partition or
        group
      example:
        ids:
        - x1c0s1b0n0
        - x1c0s1b0n1
        - x2c0s3b0n0
        - x2c0s3b0n1
    MemberID:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/XNameRW.1.0.0'
      description: This is used when creating an new entry in a Group or Partition
        members array. It is the xname ID of the new member.
    Membership.1.0.0:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/XName.1.0.0'
        partitionName:
          type: string
          description: The name is a human-readable identifier for the partition and
            uniquely identifies it.
        groupLabels:
          type: array
          description: An array with all group labels the component is associated
            with The label is the human-readable identifier for a group and uniquely
            identifies it.
          items:
            type: string
      description: A membership is a mapping of a component xname to its set of group
        labels and partition names.
      example:
        id: x0c0s22b0n0
        nid: 45
        partitionName: p1
        groupLabels:
        - group1
        - group2
    Lock.1.0.0:
      required:
      - lifetime
      - owner
      - xnames
      type: object
      properties:
        id:
          type: string
          description: The ID number of the lock.
          readOnly: true
          example: bf9362ad-b29c-40ed-9881-18a5dba3a26b
        created:
          type: string
          description: A timestamp for when the lock was created.
          format: date-time
          readOnly: true
        reason:
          type: string
          description: "A one-line, user-provided reason for the lock."
          example: For firmware update
        owner:
          type: string
          description: A user-provided self identifier for the lock
          example: FUS
        lifetime:
          type: integer
          description: The length of time in seconds the component lock should exist
            before it is automatically deleted by HSM.
          example: 90
        xnames:
          type: array
          description: An array of XName/ID values for the components managed by the
            lock. These components will have their component flag set to "Locked"
            upon lock creation and set to "OK" upon lock deletion.
          example:
          - x1c0s1b0n0
          - x1c0s1b0n1
          - x1c0s2b0n0
          - x1c0s2b0n1
          items:
            $ref: '#/components/schemas/XNameRW.1.0.0'
      description: "A lock is an object describing a temporary reservation of a set\
        \ of components held by an external service.  If not removed by the external\
        \ service, HSM will automatically remove the lock after its lifetime has expired."
    Lock.1.0.0_Patch:
      type: object
      properties:
        reason:
          type: string
          description: "A one-line, user-provided reason for the lock."
          example: For firmware update
        owner:
          type: string
          description: A user-provided self identifier for the lock (service.JobID)
          example: FUS.25
        lifetime:
          type: integer
          description: The length of time in seconds the component lock should exist
            before it is automatically deleted by HSM.
          example: 90
      description: "To update the reason, owner, and/or lifetime fields, a PATCH operation\
        \ can be used.  Omitted fields are not updated. NOTE: Updating the lifetime\
        \ field renews the lock. The new expiration time is the lifetime length AFTER\
        \ the update. The creation timestamp is updated."
    AdminLock.1.0.0:
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Partition:
          type: array
          description: "Partition name to filter on, as per current /partitions/names"
          items:
            type: string
            example: p1
        Group:
          type: array
          description: "Group label to filter on, as per current /groups/labels"
          items:
            type: string
            example: group_label
        Type:
          type: array
          description: Retrieve all components with the given HMS type.
          items:
            type: string
        State:
          type: array
          description: Retrieve all components with the given HMS state.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          type: array
          description: Retrieve all components with the given HMS flag value.
          items:
            $ref: '#/components/schemas/HMSFlag.1.0.0'
        Enabled:
          type: array
          description: Retrieve all components with the given enabled status (true
            or false).
          items:
            type: string
        Softwarestatus:
          type: array
          description: Retrieve all components with the given software status. Software
            status is a free form string. Matching is case-insensitive.
          items:
            type: string
        Role:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS role
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        Subrole:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS subrole
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        Subtype:
          type: array
          description: Retrieve all components with the given HMS subtype.
          items:
            type: string
        Arch:
          type: array
          description: Retrieve all components with the given architecture.
          items:
            $ref: '#/components/schemas/HMSArch.1.0.0'
        Class:
          type: array
          description: "Retrieve all components (i.e. nodes) with the given HMS hardware\
            \ class. Class can be River, Mountain, etc."
          items:
            $ref: '#/components/schemas/HMSClass.1.0.0'
        NID:
          type: array
          description: Retrieve all components (i.e. one node) with the given integer
            NID
          items:
            type: string
        ProcessingModel:
          type: string
          description: "Rigid is all or nothing, flexible is best attempt."
          enum:
          - rigid
          - flexible
    AdminReservationRemove.1.0.0:
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Partition:
          type: array
          description: "Partition name to filter on, as per current /partitions/names"
          items:
            type: string
            example: p1
        Group:
          type: array
          description: "Group label to filter on, as per current /groups/labels"
          items:
            type: string
            example: group_label
        Type:
          type: array
          description: Retrieve all components with the given HMS type.
          items:
            type: string
        State:
          type: array
          description: Retrieve all components with the given HMS state.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          type: array
          description: Retrieve all components with the given HMS flag value.
          items:
            $ref: '#/components/schemas/HMSFlag.1.0.0'
        Enabled:
          type: array
          description: Retrieve all components with the given enabled status (true
            or false).
          items:
            type: string
        Softwarestatus:
          type: array
          description: Retrieve all components with the given software status. Software
            status is a free form string. Matching is case-insensitive.
          items:
            type: string
        Role:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS role
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        Subrole:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS subrole
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        Subtype:
          type: array
          description: Retrieve all components with the given HMS subtype.
          items:
            type: string
        Arch:
          type: array
          description: Retrieve all components with the given architecture.
          items:
            $ref: '#/components/schemas/HMSArch.1.0.0'
        Class:
          type: array
          description: "Retrieve all components (i.e. nodes) with the given HMS hardware\
            \ class. Class can be River, Mountain, etc."
          items:
            $ref: '#/components/schemas/HMSClass.1.0.0'
        NID:
          type: array
          description: Retrieve all components (i.e. one node) with the given integer
            NID
          items:
            type: string
        ProcessingModel:
          type: string
          description: "Rigid is all or nothing, flexible is best attempt."
          enum:
          - rigid
          - flexible
    AdminStatusCheck_Response.1.0.0:
      type: object
      properties:
        Components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentStatus.1.0.0'
        NotFound:
          type: array
          items:
            type: string
            example: x1000c0s0b0
      example:
        Components:
        - Locked: false
          CreatedTime: 2000-01-23T04:56:07.000+00:00
          ReservationDisabled: false
          ID: x1001c0s0b0
          ExpirationTime: 2000-01-23T04:56:07.000+00:00
          Reserved: true
        - Locked: false
          CreatedTime: 2000-01-23T04:56:07.000+00:00
          ReservationDisabled: false
          ID: x1001c0s0b0
          ExpirationTime: 2000-01-23T04:56:07.000+00:00
          Reserved: true
        NotFound:
        - x1000c0s0b0
        - x1000c0s0b0
    AdminReservationCreate_Response.1.0.0:
      type: object
      properties:
        Success:
          type: array
          items:
            $ref: '#/components/schemas/XnameKeysNoExpire.1.0.0'
        Failure:
          type: array
          items:
            $ref: '#/components/schemas/FailedXnames.1.0.0'
      example:
        Success:
        - ReservationKey: ReservationKey
          ID: ID
          DeputyKey: DeputyKey
        - ReservationKey: ReservationKey
          ID: ID
          DeputyKey: DeputyKey
        Failure:
        - ID: ID
          Reason: NotFound
        - ID: ID
          Reason: NotFound
    AdminReservationCreate.1.0.0:
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Partition:
          type: array
          description: "Partition name to filter on, as per current /partitions/names"
          items:
            type: string
            example: p1
        Group:
          type: array
          description: "Group label to filter on, as per current /groups/labels"
          items:
            type: string
            example: group_label
        Type:
          type: array
          description: Retrieve all components with the given HMS type.
          items:
            type: string
        State:
          type: array
          description: Retrieve all components with the given HMS state.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          type: array
          description: Retrieve all components with the given HMS flag value.
          items:
            $ref: '#/components/schemas/HMSFlag.1.0.0'
        Enabled:
          type: array
          description: Retrieve all components with the given enabled status (true
            or false).
          items:
            type: string
        Softwarestatus:
          type: array
          description: Retrieve all components with the given software status. Software
            status is a free form string. Matching is case-insensitive.
          items:
            type: string
        Role:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS role
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        Subrole:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS subrole
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        Subtype:
          type: array
          description: Retrieve all components with the given HMS subtype.
          items:
            type: string
        Arch:
          type: array
          description: Retrieve all components with the given architecture.
          items:
            $ref: '#/components/schemas/HMSArch.1.0.0'
        Class:
          type: array
          description: "Retrieve all components (i.e. nodes) with the given HMS hardware\
            \ class. Class can be River, Mountain, etc."
          items:
            $ref: '#/components/schemas/HMSClass.1.0.0'
        NID:
          type: array
          description: Retrieve all components (i.e. one node) with the given integer
            NID
          items:
            type: string
        ProcessingModel:
          type: string
          description: "Rigid is all or nothing, flexible is best attempt."
          enum:
          - rigid
          - flexible
    ServiceReservationCreate.1.0.0:
      type: object
      properties:
        ComponentIDs:
          type: array
          description: An array of XName/ID values for the components to query.
          items:
            $ref: '#/components/schemas/XNameForQuery.1.0.0'
        Partition:
          type: array
          description: "Partition name to filter on, as per current /partitions/names"
          items:
            type: string
            example: p1
        Group:
          type: array
          description: "Group label to filter on, as per current /groups/labels"
          items:
            type: string
            example: group_label
        Type:
          type: array
          description: Retrieve all components with the given HMS type.
          items:
            type: string
        State:
          type: array
          description: Retrieve all components with the given HMS state.
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
        Flag:
          type: array
          description: Retrieve all components with the given HMS flag value.
          items:
            $ref: '#/components/schemas/HMSFlag.1.0.0'
        Enabled:
          type: array
          description: Retrieve all components with the given enabled status (true
            or false).
          items:
            type: string
        Softwarestatus:
          type: array
          description: Retrieve all components with the given software status. Software
            status is a free form string. Matching is case-insensitive.
          items:
            type: string
        Role:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS role
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
        Subrole:
          type: array
          description: Retrieve all components (i.e. nodes) with the given HMS subrole
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
        Subtype:
          type: array
          description: Retrieve all components with the given HMS subtype.
          items:
            type: string
        Arch:
          type: array
          description: Retrieve all components with the given architecture.
          items:
            $ref: '#/components/schemas/HMSArch.1.0.0'
        Class:
          type: array
          description: "Retrieve all components (i.e. nodes) with the given HMS hardware\
            \ class. Class can be River, Mountain, etc."
          items:
            $ref: '#/components/schemas/HMSClass.1.0.0'
        NID:
          type: array
          description: Retrieve all components (i.e. one node) with the given integer
            NID
          items:
            type: string
        ProcessingModel:
          type: string
          description: "Rigid is all or nothing, flexible is best attempt."
          enum:
          - rigid
          - flexible
        ReservationDuration:
          maximum: 15
          minimum: 1
          type: integer
          description: Length of time in minutes for the reservation to be valid for.
          example: 1
    ServiceReservationCreate_Response.1.0.0:
      type: object
      properties:
        Success:
          type: array
          items:
            $ref: '#/components/schemas/XnameKeys.1.0.0'
        Failure:
          type: array
          items:
            $ref: '#/components/schemas/FailedXnames.1.0.0'
      example:
        Success:
        - ReservationKey: ReservationKey
          ID: ID
          DeputyKey: DeputyKey
          ExpirationTime: 2000-01-23T04:56:07.000+00:00
        - ReservationKey: ReservationKey
          ID: ID
          DeputyKey: DeputyKey
          ExpirationTime: 2000-01-23T04:56:07.000+00:00
        Failure:
        - ID: ID
          Reason: NotFound
        - ID: ID
          Reason: NotFound
    ServiceReservationCheck_Response.1.0.0:
      type: object
      properties:
        Success:
          type: array
          items:
            $ref: '#/components/schemas/XnameKeysDeputyExpire.1.0.0'
        Failure:
          type: array
          items:
            $ref: '#/components/schemas/FailedXnames.1.0.0'
      example:
        Success:
        - ID: ID
          DeputyKey: DeputyKey
          ExpirationTime: 2000-01-23T04:56:07.000+00:00
        - ID: ID
          DeputyKey: DeputyKey
          ExpirationTime: 2000-01-23T04:56:07.000+00:00
        Failure:
        - ID: ID
          Reason: NotFound
        - ID: ID
          Reason: NotFound
    Xnames:
      type: object
      properties:
        ComponentIDs:
          type: array
          items:
            type: string
      example:
        ComponentIDs:
        - ComponentIDs
        - ComponentIDs
    XnameKeysNoExpire.1.0.0:
      type: object
      properties:
        ID:
          type: string
        DeputyKey:
          type: string
          description: The key that can be passed to a delegate.
        ReservationKey:
          type: string
          description: The key that can be used to renew/release the reservation.
            Should not be delegated or shared.
      example:
        ReservationKey: ReservationKey
        ID: ID
        DeputyKey: DeputyKey
    XnameKeys.1.0.0:
      type: object
      properties:
        ID:
          type: string
        DeputyKey:
          type: string
          description: The key that can be passed to a delegate.
        ReservationKey:
          type: string
          description: The key that can be used to renew/release the reservation.
            Should not be delegated or shared.
        ExpirationTime:
          type: string
          format: date-time
      example:
        ReservationKey: ReservationKey
        ID: ID
        DeputyKey: DeputyKey
        ExpirationTime: 2000-01-23T04:56:07.000+00:00
    XnameKeysDeputyExpire.1.0.0:
      type: object
      properties:
        ID:
          type: string
        DeputyKey:
          type: string
          description: The key that can be passed to a delegate.
        ExpirationTime:
          type: string
          format: date-time
      example:
        ID: ID
        DeputyKey: DeputyKey
        ExpirationTime: 2000-01-23T04:56:07.000+00:00
    XnameWithKey.1.0.0:
      type: object
      properties:
        ID:
          type: string
        Key:
          type: string
    DeputyKeys.1.0.0:
      type: object
      properties:
        DeputyKeys:
          type: array
          items:
            $ref: '#/components/schemas/XnameWithKey.1.0.0'
    ReservedKeys.1.0.0:
      type: object
      properties:
        ReservationKeys:
          type: array
          items:
            $ref: '#/components/schemas/XnameWithKey.1.0.0'
        ProcessingModel:
          type: string
          description: "Rigid is all or nothing, flexible is best attempt."
          enum:
          - rigid
          - flexible
    ReservedKeysWithRenewal.1.0.0:
      type: object
      properties:
        ReservationKeys:
          type: array
          items:
            $ref: '#/components/schemas/XnameWithKey.1.0.0'
        ProcessingModel:
          type: string
          description: "Rigid is all or nothing, flexible is best attempt."
          enum:
          - rigid
          - flexible
        ReservationDuration:
          maximum: 15
          minimum: 1
          type: integer
          description: Length of time in minutes for the reservation to be valid for.
          example: 1
    Counts.1.0.0:
      type: object
      properties:
        Total:
          type: integer
        Success:
          type: integer
        Failure:
          type: integer
      example:
        Total: 0
        Success: 6
        Failure: 1
    FailedXnames.1.0.0:
      type: object
      properties:
        ID:
          type: string
        Reason:
          type: string
          description: The key that can be passed to a delegate.
          enum:
          - NotFound
          - Locked
          - Disabled
          - Reserved
          - ServerError
      example:
        ID: ID
        Reason: NotFound
    ComponentStatus.1.0.0:
      type: object
      properties:
        ID:
          type: string
          example: x1001c0s0b0
        Locked:
          type: boolean
          example: false
        Reserved:
          type: boolean
          example: true
        CreatedTime:
          type: string
          format: date-time
        ExpirationTime:
          type: string
          format: date-time
        ReservationDisabled:
          type: boolean
          example: false
      example:
        Locked: false
        CreatedTime: 2000-01-23T04:56:07.000+00:00
        ReservationDisabled: false
        ID: x1001c0s0b0
        ExpirationTime: 2000-01-23T04:56:07.000+00:00
        Reserved: true
    XnameResponse_1.0.0:
      type: object
      properties:
        Counts:
          $ref: '#/components/schemas/Counts.1.0.0'
        Success:
          $ref: '#/components/schemas/Xnames'
        Failure:
          type: array
          items:
            $ref: '#/components/schemas/FailedXnames.1.0.0'
      description: "This is a simple CAPMC-like response, intended mainly for non-error\
        \ messages.  For client errors, we now use RFC7807 responses."
      example:
        Counts:
          Total: 0
          Success: 6
          Failure: 1
        Success:
          ComponentIDs:
          - ComponentIDs
          - ComponentIDs
        Failure:
        - ID: ID
          Reason: NotFound
        - ID: ID
          Reason: NotFound
    PowerMap.1.0.0_PowerMap:
      required:
      - poweredBy
      type: object
      properties:
        id:
          $ref: '#/components/schemas/XName.1.0.0'
        poweredBy:
          type: array
          description: A list of components that supply this component with power.
          items:
            $ref: '#/components/schemas/XNameRW.1.0.0'
      description: PowerMaps used to show which components are powered by which power
        supplies.
      example:
        id: x0c0s1b0n0
        poweredBy:
        - x0m0p0j10
        - x0m0p0j11
    PowerMap.1.0.0_PostPowerMap:
      required:
      - id
      - poweredBy
      type: object
      properties:
        id:
          $ref: '#/components/schemas/XNameRW.1.0.0'
        poweredBy:
          type: array
          description: A list of components that supply this component with power.
          items:
            $ref: '#/components/schemas/XNameRW.1.0.0'
      description: PowerMaps used to show which components are powered by which power
        supplies.
      example:
        id: x0c0s1b0n0
        poweredBy:
        - x0m0p0j10
        - x0m0p0j11
    PowerMapArray_PowerMapArray:
      type: array
      description: "This is an array of PowerMap objects. This is the result of GET-ing\
        \ the PowerMaps collection, or can be used to populate or update it as input\
        \ provided via POST."
      items:
        $ref: '#/components/schemas/PowerMap.1.0.0_PostPowerMap'
      x-schema-name: PowerMapArray_PowerMapArray
    Values.1.0.0_Values:
      description: This is a list of parameters and their valid values. These values
        are valid for various parameters in this API.
      allOf:
      - $ref: '#/components/schemas/Values.1.0.0_ArchArray'
      - $ref: '#/components/schemas/Values.1.0.0_ClassArray'
      - $ref: '#/components/schemas/Values.1.0.0_FlagArray'
      - $ref: '#/components/schemas/Values.1.0.0_NetTypeArray'
      - $ref: '#/components/schemas/Values.1.0.0_RoleArray'
      - $ref: '#/components/schemas/Values.1.0.0_SubRoleArray'
      - $ref: '#/components/schemas/Values.1.0.0_StateArray'
      - $ref: '#/components/schemas/Values.1.0.0_TypeArray'
    Values.1.0.0_ArchArray:
      type: object
      properties:
        Arch:
          type: array
          items:
            $ref: '#/components/schemas/HMSArch.1.0.0'
      description: This is an array of valid HMSArch values. These values are valid
        for any 'arch' parameter in this API.
      example:
        Arch:
        - X86
        - X86
    Values.1.0.0_ClassArray:
      type: object
      properties:
        Class:
          type: array
          items:
            $ref: '#/components/schemas/HMSClass.1.0.0'
      description: This is an array of valid HMSClass values. These values are valid
        for any 'class' parameter in this API.
      example:
        Class:
        - River
        - River
    Values.1.0.0_FlagArray:
      type: object
      properties:
        Flag:
          type: array
          items:
            $ref: '#/components/schemas/HMSFlag.1.0.0'
      description: This is an array of valid HMSFlag values. These values are valid
        for any 'flag' parameter in this API.
      example:
        Flag:
        - OK
        - OK
    Values.1.0.0_NetTypeArray:
      type: object
      properties:
        NetType:
          type: array
          items:
            $ref: '#/components/schemas/NetType.1.0.0'
      description: This is an array of valid NetType values. These values are valid
        for any 'nettype' parameter in this API.
      example:
        NetType:
        - Sling
        - Sling
    Values.1.0.0_RoleArray:
      type: object
      properties:
        Role:
          type: array
          items:
            $ref: '#/components/schemas/HMSRole.1.0.0'
      description: This is an array of valid HMSRole values. These values are valid
        for any 'role' parameter in this API.
      example:
        Role:
        - Compute
        - Compute
    Values.1.0.0_SubRoleArray:
      type: object
      properties:
        SubRole:
          type: array
          items:
            $ref: '#/components/schemas/HMSSubRole.1.0.0'
      description: This is an array of valid HMSSubRole values. These values are valid
        for any 'subrole' parameter in this API.
      example:
        SubRole:
        - Worker
        - Worker
    Values.1.0.0_StateArray:
      type: object
      properties:
        State:
          type: array
          items:
            $ref: '#/components/schemas/HMSState.1.0.0'
      description: This is an array of valid HMSState values. These values are valid
        for any 'state' parameter in this API.
      example:
        State:
        - Ready
        - Ready
    Values.1.0.0_TypeArray:
      type: object
      properties:
        Type:
          type: array
          items:
            $ref: '#/components/schemas/HMSType.1.0.0'
      description: This is an array of valid HMSType values. These values are valid
        for any 'type' parameter in this API.
      example:
        Type:
        - Node
        - Node
    Actions_1.0.0_ChassisActions:
      type: object
      properties:
        '#Chassis.Reset':
          $ref: '#/components/schemas/Actions_1.0.0_ChassisActions_Chassis.Reset'
      description: "This is a pass-through field from Redfish that lists the available\
        \ actions for a Chassis component (if any were found, else if it be omitted\
        \ entirely)."
    Actions_1.0.0_ComputerSystemActions:
      type: object
      properties:
        '#ComputerSystem.Reset':
          $ref: '#/components/schemas/Actions_1.0.0_ComputerSystemActions_ComputerSystem.Reset'
      description: "This is a pass-through field from Redfish that lists the available\
        \ actions for a System component (if any were found, else if it be omitted\
        \ entirely)."
    Actions_1.0.0_ManagerActions:
      type: object
      properties:
        '#Manager.Reset':
          $ref: '#/components/schemas/Actions_1.0.0_ManagerActions_Manager.Reset'
      description: "This is a pass-through field from Redfish that lists the available\
        \ actions for a Manager component (if any were found, else if it be omitted\
        \ entirely)."
    Actions_1.0.0_OutletActions:
      type: object
      properties:
        '#Outlet.PowerControl':
          $ref: '#/components/schemas/Actions_1.0.0_OutletActions_Outlet.PowerControl'
        '#Outlet.ResetBreaker':
          $ref: '#/components/schemas/Actions_1.0.0_OutletActions_Outlet.ResetBreaker'
        '#Outlet.ResetStatistics':
          $ref: '#/components/schemas/Actions_1.0.0_OutletActions_Outlet.ResetStatistics'
      description: "This is a pass-through field from Redfish that lists the available\
        \ actions for a Outlet component (if any were found, else if it be omitted\
        \ entirely)."
    Message_1.0.0_ExtendedInfo:
      type: object
      properties:
        ID:
          type: string
          description: "Formal, machine readable, name for message."
        Message:
          type: string
          description: Human readable description of message.
        Flag:
          $ref: '#/components/schemas/HMSFlag.1.0.0'
      description: TODO This is a general message scheme meant to replace and generalize
        old HSS error codes.  Largely TBD placeholder.
    EthernetNICInfo_1.0.0:
      type: object
      properties:
        RedfishId:
          type: string
          description: The Redfish 'Id' field for the interface.
          readOnly: true
          example: "1"
        '@odata.id':
          type: string
          description: This is the relative path to the EthernetInterface via the
            Redfish entry point. (i.e. the @odata.id field).
          readOnly: true
          example: "/redfish/v1/{Chassis/Managers/Systems}/{Id}/EthernetInterfaces/1"
        Description:
          type: string
          description: The Redfish 'Description' field for the interface.
          readOnly: true
          example: Integrated NIC 1
        FQDN:
          type: string
          description: The Redfish 'FQDN' of the interface.  This may or may not be
            set and is not necessarily the same as the FQDN of the ComponentEndpoint.
          readOnly: true
        Hostname:
          type: string
          description: The Redfish 'Hostname field' for the interface.  This may or
            may not be set and is not necessarily the same as the Hostname of the
            ComponentEndpoint.
          readOnly: true
        InterfaceEnabled:
          type: boolean
          description: "The Redfish 'InterfaceEnabled' field if provided by Redfish,\
            \ else it will be omitted."
          readOnly: true
        MACAddress:
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
          description: The Redfish 'MacAddress' field for the interface.  This should
            normally be set but is not necessarily the same as the MacAddr of the
            ComponentEndpoint (as there may be multiple interfaces).
          example: ae:12:ce:7a:aa:99
        PermanentMACAddress:
          pattern: "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$"
          type: string
          description: The Redfish 'PermanentMacAddress' field for the interface.
            This may or may not be set and is not necessarily the same as the MacAddr
            of the ComponentEndpoint (as there may be multiple interfaces).
          example: ae:12:ce:7a:aa:99
      description: This is a summary info for one ordinary Ethernet NIC (i.e. not
        on HSN). These fields are all passed through from a Redfish EthernetInterface
        object.
    PowerControl_1.0.0:
      type: object
      properties:
        Name:
          type: string
          description: Name of the power control interface.
          readOnly: true
          example: Node Power Control
        PowerCapacityWatts:
          type: number
          description: "The total amount of power available to the chassis for allocation.\
            \ This may the power supply capacity, or power budget assigned to the\
            \ chassis from an up-stream chassis."
          readOnly: true
          example: 900.0
        OEM:
          $ref: '#/components/schemas/PowerControl_1.0.0_OEM'
        RelatedItem:
          type: array
          description: The ID(s) of the resources associated with this Power Limit.
          readOnly: true
          items:
            $ref: PowerControl_1.0.0_RelatedItem
      description: This is the power control info for the node. These fields are all
        passed through from a Redfish PowerControl object.
    FRUId.1.0.0:
      type: string
      description: "Uniquely identifies a piece of hardware by a serial-number like\
        \ identifier that is globally unique within the hardware inventory,"
    HMSArch.1.0.0:
      type: string
      description: This is the basic architecture of the component so the proper software
        can be selected and so on.
      example: X86
      enum:
      - X86
      - ARM
      - Other
    HMSClass.1.0.0:
      type: string
      description: This is the HSM hardware class of the component.
      example: River
      enum:
      - River
      - Mountain
      - Hill
    HMSFlag.1.0.0:
      type: string
      description: This property indicates the state flag of the underlying component.
      example: OK
      enum:
      - OK
      - Warning
      - Alert
      - Locked
    HMSRole.1.0.0:
      type: string
      description: |-
        This is a possibly reconfigurable role for a component, especially a node. Valid values are:
        - Compute
        - Service
        - System
        - Application
        - Storage
        - Management
        Additional valid values may be added via configuration file. See the results of 'GET /service/values/role' for the complete list.
      example: Compute
    HMSSubRole.1.0.0:
      type: string
      description: |-
        This is a possibly reconfigurable subrole for a component, especially a node. Valid values are:
        - Master
        - Worker
        - Storage
        Additional valid values may be added via configuration file. See the results of 'GET /service/values/subrole' for the complete list.
      example: Worker
    HMSState.1.0.0:
      type: string
      description: This property indicates the state of the underlying component.
      example: Ready
      enum:
      - Unknown
      - Empty
      - Populated
      - "Off"
      - "On"
      - Standby
      - Halt
      - Ready
    HMSType.1.0.0:
      type: string
      description: This is the HMS component type category.  It has a particular xname
        format and represents the kind of component that can occupy that location.  Not
        to be confused with RedfishType which is Redfish specific and only used when
        providing Redfish endpoint data from discovery.
      example: Node
      enum:
      - CDU
      - CabinetCDU
      - CabinetPDU
      - CabinetPDUOutlet
      - CabinetPDUPowerConnector
      - CabinetPDUController
      - Cabinet
      - Chassis
      - ChassisBMC
      - CMMRectifier
      - CMMFpga
      - CEC
      - ComputeModule
      - RouterModule
      - NodeBMC
      - NodeEnclosure
      - NodeEnclosurePowerSupply
      - HSNBoard
      - MgmtSwitch
      - MgmtHLSwitch
      - CDUMgmtSwitch
      - Node
      - Processor
      - Drive
      - StorageGroup
      - NodeNIC
      - Memory
      - NodeAccel
      - NodeAccelRiser
      - NodeFpga
      - HSNAsic
      - RouterFpga
      - RouterBMC
      - HSNLink
      - HSNConnector
      - INVALID
    NetType.1.0.0:
      type: string
      description: "This is the type of high speed network the component is connected\
        \ to, if it is an applicable component type and the interface is present,\
        \ or the type of the system HSN."
      example: Sling
      enum:
      - Sling
      - Infiniband
      - Ethernet
      - OEM
      - None
    NIDRange.1.0.0:
      type: string
      description: "NID range values to query matching components, e.g. \"0-24\".\
        \  Supply only a single range, more can be given in an array of these values."
      example: 0-24
    NICAddrs.1.0.0:
      type: array
      description: A collection of HSN NIC addresses in string form.
      example:
      - 2313746
      - 11484946
      items:
        type: string
      x-schema-name: NICAddrs.1.0.0
    OdataID.1.0.0:
      type: string
      description: "This is the path (relative to a Redfish endpoint) of a particular\
        \ Redfish resource, e.g. /Redfish/v1/Systems/System.Embedded.1"
      example: /redfish/v1/Systems/System.Embedded.1
    Problem7807:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          example: about:blank
        detail:
          type: string
          example: Detail about this specific problem occurrence. See RFC7807
        instance:
          type: string
          example: ""
        status:
          type: number
          format: int32
          example: 400.0
        title:
          type: string
          example: "Description of HTTP Status code, e.g. 400"
      description: RFC 7807 compliant error payload.  All fields are optional except
        the 'type' field.
    RedfishType.1.0.0:
      type: string
      description: "This is the Redfish object type, not to be confused with the HMS\
        \ component type."
      example: ComputerSystem
      enum:
      - Chassis
      - ComputerSystem
      - EthernetInterface
      - Manager
      - Memory
      - Processor
      - Drive
      - PowerSupply
      - AccountService
      - EventService
      - LogService
      - SessionService
      - TaskService
      - UpdateService
    RedfishSubtype.1.0.0:
      type: string
      description: "This is the type corresponding to the Redfish object type, i.e.\
        \ the ChassisType field, SystemType, ManagerType fields.  We only use these\
        \ three types to create ComponentEndpoints for now."
      example: Physical
      enum:
      - Rack
      - Blade
      - Enclosure
      - StandAlone
      - RackMount
      - Card
      - Cartridge
      - Row
      - Pod
      - Expansion
      - Sidecar
      - Zone
      - Sled
      - Shelf
      - Drawer
      - Module
      - Component
      - Other
      - Physical
      - Virtual
      - OS
      - PhysicallyPartitioned
      - VirtuallyPartitioned
      - ManagementController
      - EnclosureManager
      - BMC
      - RackManager
      - AuxiliaryController
    ResourceName:
      pattern: "^[0-9a-f_\\-.]{1,}$"
      type: string
      description: Acceptable format for certain user-requested string identifiers.
      example: resource_name1
    ResourceURI.1.0.0:
      type: object
      properties:
        ResourceURI:
          type: string
          example: /hsm/v2/API_TYPE/OBJECT_TYPE/OBJECT_ID
      description: "A ResourceURI is like an odata.id, it provides a path to a resource\
        \ from the API root, such that when a GET is performed, the corresponding\
        \ object is returned.  It does not imply other odata functionality."
      example:
        ResourceURI: /hsm/v2/API_TYPE/OBJECT_TYPE/OBJECT_ID
    ResourceURICollection_ResourceURICollection:
      type: object
      properties:
        Name:
          type: string
          description: "Should describe the collection, though the type of resources\
            \ the links correspond to should also be inferred from the context in\
            \ which the collection was obtained."
          readOnly: true
          example: (Type of Object) Collection
        Members:
          type: array
          description: An array of ResourceIds.
          readOnly: true
          items:
            $ref: '#/components/schemas/ResourceURI.1.0.0'
        MemberCount:
          type: number
          description: Number of ResourceURIs in the collection
          format: int32
          readOnly: true
      description: "A ResourceURI is like an odata.id, it provides a path to a resource\
        \ from the API root, such that when a GET is performed, the corresponding\
        \ object is returned.  It does not imply other odata functionality.  This\
        \ is a collection of such IDs, of a single base type, grouped together for\
        \ some purpose."
    Response_1.0.0:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      description: "This is a simple CAPMC-like response, intended mainly for non-error\
        \ messages.  For client errors, we now use RFC7807 responses."
      example:
        code: code
        message: message
    UUID.1.0.0:
      pattern: "([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})"
      type: string
      description: "This is a universally unique identifier i.e. UUID in the canonical\
        \ format provided by Redfish to identify endpoints and services. If this is\
        \ the UUID of a RedfishEndpoint, it should be the UUID broadcast by SSDP,\
        \ if applicable."
      example: bf9362ad-b29c-40ed-9881-18a5dba3a26b
    XName.1.0.0:
      type: string
      description: Uniquely identifies the component by its physical location (xname).
        There are formatting rules depending on the matching HMSType.
      example: x0c0s0b0n0
    XNameRW.1.0.0:
      type: string
      description: Uniquely identifies the component by its physical location (xname).
        There are formatting rules depending on the matching HMSType. This is the
        non-readOnly version for writable component lists.
      example: x0c0s1b0n0
    XNameRFEndpoint.1.0.0:
      type: string
      description: "Uniquely identifies the component by its physical location (xname).\
        \ This is identical to a normal XName, but specifies a case where a BMC or\
        \ other controller type is expected."
      example: x0c0s0b0
    XNameForQuery.1.0.0:
      type: string
      description: "Uniquely identifies the component by its physical location (xname).\
        \ There are formatting rules depending on the matching HMSType. This is identical\
        \ to XName except that it is not read-only which would prevent it from being\
        \ a required parameter in query operations in Swagger 2.0.  These operations\
        \ do not actually write the XName, merely using at a selector to do bulk writes\
        \ of multiple records, so this is fine."
      example: x0c0s0b0n0
    XNamePartition.1.0.0:
      type: string
      description: "This is an ordinary xname, but one where only a partition (hard:soft)\
        \ or the system alias (s0) will be expected as valid input."
      example: p1.2
    XNameCompOrPartition.1.0.0:
      type: string
      description: "This is an ordinary xname, but one where only a partition (hard:soft)\
        \ or the system alias (s0) will be expected as valid input, or else a parent\
        \ component."
      example: s0
    Inventory_Hardware_body:
      type: object
      properties:
        Hardware:
          type: array
          items:
            $ref: '#/components/schemas/HWInventory.1.0.0_HWInventoryByLocation'
      example:
        Hardware:
        - ID: x3000c0s23b4n4h0
          HWInventoryByLocationType: HWInvByLocHSNNIC
          HSNNICLocationInfo:
            Id: HPCNet3
            Description: Shasta Timms NMC REV04 (HSN)
          PopulatedFRU:
            HWInventoryByFRUType: HWInvByFRUHSNNIC
            HSNNICFRUInfo:
              Model: ConnectX-5 100Gb/s
              SerialNumber: HG20190738
              PartNumber: "102005303"
              Manufacturer: "Mellanox Technologies, Ltd."
    HWInventory.1.0.0_RedfishSystemLocationInfo_ProcessorSummary:
      type: object
      properties:
        Count:
          minimum: 0
          type: number
          description: The number of processors in the system.
          readOnly: true
        Model:
          type: string
          description: The processor model for the primary or majority of processors
            in this system.
          readOnly: true
      description: "This is a summary of the installed processors, if any. It is taken\
        \ from ComputerSystem.1.0.0_ProcessorSummary."
      readOnly: true
    HWInventory.1.0.0_RedfishSystemLocationInfo_MemorySummary:
      type: object
      properties:
        TotalSystemMemoryGiB:
          minimum: 0
          type: number
          description: "The total installed, operating system-accessible memory (RAM),\
            \ measured in GiB."
          readOnly: true
      description: This object describes the memory of the system in general detail.
        It is taken from ComputerSystem.1.0.0_MemorySummary.
      readOnly: true
    HWInventory.1.0.0_RedfishMemoryLocationInfo_MemoryLocation:
      type: object
      properties:
        Socket:
          minimum: 0
          type: number
          description: Socket number (numbering may vary by manufacturer).
          readOnly: true
        MemoryController:
          minimum: 0
          type: number
          description: Memory controller number (numbering may vary by manufacturer).
          readOnly: true
        Channel:
          minimum: 0
          type: number
          description: Channel number (numbering may vary by manufacturer).
          readOnly: true
        Slot:
          minimum: 0
          type: number
          description: Slot number (numbering may vary by manufacturer).
          readOnly: true
      description: Describes the location of the memory module.  Note that the indexing
        of these fields are set by the manufacturer and may not start at zero (or
        one for that matter) and therefore are for informational/servicing purposes
        only. This object and its fields are again a pass-through from Redfish.
    HWInventory.1.0.0_RedfishProcessorFRUInfo_ProcessorId:
      type: object
      properties:
        EffectiveFamily:
          type: string
          description: The effective Family for this processor
          readOnly: true
        EffectiveModel:
          type: string
          description: The effective Model for this processor
          readOnly: true
        IdentificationRegisters:
          type: string
          description: The contents of the Identification Registers (CPUID) for this
            processor
          readOnly: true
        MicrocodeInfo:
          type: string
          description: The Microcode Information for this processor
          readOnly: true
        Step:
          type: string
          description: The Step value for this processor
          readOnly: true
        VendorId:
          type: string
          description: The Vendor Identification for this processor
          readOnly: true
      description: Identification information for this processor. Pass-through from
        Redfish.
    HWInventory.1.0.0_RedfishPDUFRUInfo_CircuitSummary:
      type: object
      properties:
        MonitoredOutlets:
          type: number
          description: Number of monitored outlets
          readOnly: true
        TotalPhases:
          type: number
          description: Number of phases in total
          readOnly: true
        ControlledOutlets:
          type: number
          description: Total number of controller outlets
          readOnly: true
        TotalOutlets:
          type: number
          description: Total number of outlets
          readOnly: true
        MonitoredBranches:
          type: number
          description: Number of monitored branches
          readOnly: true
        MonitoredPhases:
          type: number
          description: Number of monitored phases
          readOnly: true
        TotalBranches:
          type: number
          description: Number of total branches.
          readOnly: true
      description: Summary of circuits for PDU.
      readOnly: true
    RedfishEndpoint.1.0.0_RedfishEndpoint_DiscoveryInfo:
      type: object
      properties:
        LastDiscoveryAttempt:
          type: string
          description: The time the last discovery attempt took place.
          format: date-time
          readOnly: true
        LastDiscoveryStatus:
          type: string
          description: Describes the outcome of the last discovery attempt.
          readOnly: true
          enum:
          - EndpointInvalid
          - EPResponseFailedDecode
          - HTTPsGetFailed
          - NotYetQueried
          - VerificationFailed
          - ChildVerificationFailed
          - DiscoverOK
        RedfishVersion:
          type: string
          description: Version of Redfish as reported by the RF service root.
          readOnly: true
      description: Contains info about the discovery status of the given endpoint.
      readOnly: true
      example:
        LastDiscoveryAttempt: 2000-01-23T04:56:07.000+00:00
        LastDiscoveryStatus: EndpointInvalid
        RedfishVersion: RedfishVersion
    Actions_1.0.0_ChassisActions_Chassis.Reset:
      type: object
      properties:
        ResetType@Redfish.AllowableValues:
          type: array
          description: List of allowable 'reset' Redfish Action types
          example:
          - "On"
          - ForceOff
          items:
            type: string
        target:
          type: string
          description: target URI for Redfish Action
          example: /redfish/v1/Chassis/RackEnclosure/Actions/Chassis.Reset
    Actions_1.0.0_ComputerSystemActions_ComputerSystem.Reset:
      type: object
      properties:
        ResetType@Redfish.AllowableValues:
          type: array
          description: List of allowable 'reset' Redfish Action types
          example:
          - "On"
          - ForceOff
          - ForceRestart
          items:
            type: string
        target:
          type: string
          description: target URI for Redfish Action
          example: /redfish/v1/Systems/System.1/Actions/ComputerSystem.Reset
    Actions_1.0.0_ManagerActions_Manager.Reset:
      type: object
      properties:
        ResetType@Redfish.AllowableValues:
          type: array
          description: List of allowable 'reset' Redfish Action types
          example:
          - ForceRestart
          items:
            type: string
        target:
          type: string
          description: target URI for Redfish Action
          example: /redfish/v1/Managers/BMC/Actions/Manager.Reset
    Actions_1.0.0_OutletActions_Outlet.PowerControl:
      type: object
      properties:
        PowerControl@Redfish.AllowableValues:
          type: array
          description: List of allowable PowerControl Redfish Action types
          example:
          - "On"
          items:
            type: string
        target:
          type: string
          description: target URI for Redfish Action
          example: /redfish/v1/PowerEquipment/RackPDUs/1/Outlets/A1/Outlet.PowerControl
    Actions_1.0.0_OutletActions_Outlet.ResetBreaker:
      type: object
      properties:
        ResetBreaker@Redfish.AllowableValues:
          type: array
          description: List of allowable ResetBreaker Redfish Action types
          example:
          - "Off"
          items:
            type: string
        target:
          type: string
          description: target URI for Redfish Action
          example: /redfish/v1/PowerEquipment/RackPDUs/1/Outlets/A1/Outlet.ResetBreaker
    Actions_1.0.0_OutletActions_Outlet.ResetStatistics:
      type: object
      properties:
        ResetStatistics@Redfish.AllowableValues:
          type: array
          description: List of allowable ResetStatistics Redfish Action types
          items:
            type: string
        target:
          type: string
          description: target URI for Redfish Action
          example: /redfish/v1/PowerEquipment/RackPDUs/1/Outlets/A1/Outlet.ResetStatistics
    PowerControl_1.0.0_OEM_Cray_PowerLimit:
      type: object
      properties:
        Min:
          type: number
          description: The minimum allowed value for a PowerLimit's LimitInWatts.
            This is the estimated lowest value (most restrictive) power cap that can
            be achieved by the associated PowerControl resource.
          readOnly: true
          example: 350.0
        Max:
          type: number
          description: The maximum allowed value for a PowerLimit's LimitInWatts.
            This is the estimated highest value (least restrictive) power cap that
            can be achieved by the associated PowerControl resource. Note that the
            actual maximum allowed LimitInWatts is the lesser of PowerLimit.Max or
            PowerControl.PowerAllocatedWatts.
          readOnly: true
          example: 850.0
      description: Power limit status and configuration information for this chassis.
      readOnly: true
    PowerControl_1.0.0_OEM_Cray:
      type: object
      properties:
        PowerIdleWatts:
          type: number
          description: "The total amount of power available to the chassis for allocation.\
            \ This may the power supply capacity, or power budget assigned to the\
            \ chassis from an up-stream chassis."
          readOnly: true
          example: 900.0
        PowerLimit:
          $ref: '#/components/schemas/PowerControl_1.0.0_OEM_Cray_PowerLimit'
        PowerResetWatts:
          type: number
          description: Typical power consumption during ComputerSystem.ResetAction
            "On" operation.
          readOnly: true
          example: 250.0
      description: This is the manufacturer/provider specific extension moniker used
        to divide the Oem object into sections.
      readOnly: true
    PowerControl_1.0.0_OEM:
      type: object
      properties:
        Cray:
          $ref: '#/components/schemas/PowerControl_1.0.0_OEM_Cray'
      description: This is the manufacturer/provider specific extension moniker used
        to divide the Oem object into sections.
      readOnly: true
    PowerControl_1.0.0_RelatedItem:
      type: object
      properties:
        '@odata.id':
          type: string
          description: An ID of the resource associated with this Power Limit.
          readOnly: true
          example: /redfish/v1/Chassis/Node0/Power#/PowerControl/Accelerator0
  parameters:
    compIDParam:
      name: id
      in: query
      description: Filter the results based on xname ID(s). Can be specified multiple
        times for selecting entries with multiple specific xnames.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compTypeParam:
      name: type
      in: query
      description: "Filter the results based on HMS type like Node, NodeEnclosure,\
        \ NodeBMC etc. Can be specified multiple times for selecting entries of multiple\
        \ types."
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - CDU
        - CabinetCDU
        - CabinetPDU
        - CabinetPDUOutlet
        - CabinetPDUPowerConnector
        - CabinetPDUController
        - Cabinet
        - Chassis
        - ChassisBMC
        - CMMRectifier
        - CMMFpga
        - CEC
        - ComputeModule
        - RouterModule
        - NodeBMC
        - NodeEnclosure
        - NodeEnclosurePowerSupply
        - HSNBoard
        - MgmtSwitch
        - MgmtHLSwitch
        - CDUMgmtSwitch
        - Node
        - Processor
        - Drive
        - StorageGroup
        - NodeNIC
        - Memory
        - NodeAccel
        - NodeAccelRiser
        - NodeFpga
        - HSNAsic
        - RouterFpga
        - RouterBMC
        - HSNLink
        - HSNConnector
        - INVALID
    compStateParam:
      name: state
      in: query
      description: "Filter the results based on HMS state like Ready, On etc. Can\
        \ be specified multiple times for selecting entries in different states."
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - Unknown
        - Empty
        - Populated
        - "Off"
        - "On"
        - Standby
        - Halt
        - Ready
    compFlagParam:
      name: flag
      in: query
      description: "Filter the results based on HMS flag value like OK, Alert etc.\
        \ Can be specified multiple times for selecting entries with different flags."
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - OK
        - Warning
        - Alert
        - Locked
        - Unknown
    compRoleParam:
      name: role
      in: query
      description: |-
        Filter the results based on HMS role. Can be specified multiple times for selecting entries with different roles. Valid values are:
        - Compute
        - Service
        - System
        - Application
        - Storage
        - Management
        Additional valid values may be added via configuration file. See the results of 'GET /service/values/role' for the complete list.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compSubroleParam:
      name: subrole
      in: query
      description: |-
        Filter the results based on HMS subrole. Can be specified multiple times for selecting entries with different subroles. Valid values are:
        - Master
        - Worker
        - Storage
        Additional valid values may be added via configuration file. See the results of 'GET /service/values/subrole' for the complete list.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compEnabledParam:
      name: enabled
      in: query
      description: Filter the results based on enabled status (true or false).
      required: false
      style: form
      explode: true
      schema:
        type: string
    compSoftwareStatusParam:
      name: softwarestatus
      in: query
      description: Filter the results based on software status. Software status is
        a free form string. Matching is case-insensitive. Can be specified multiple
        times for selecting entries with different software statuses.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compSubtypeParam:
      name: subtype
      in: query
      description: Filter the results based on HMS subtype. Can be specified multiple
        times for selecting entries with different subtypes.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compArchParam:
      name: arch
      in: query
      description: Filter the results based on architecture. Can be specified multiple
        times for selecting components with different architectures.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - X86
        - ARM
        - Other
        - Unknown
    compClassParam:
      name: class
      in: query
      description: Filter the results based on HMS hardware class. Can be specified
        multiple times for selecting entries with different classes.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - River
        - Mountain
        - Hill
    compNIDParam:
      name: nid
      in: query
      description: Filter the results based on NID. Can be specified multiple times
        for selecting entries with multiple specific NIDs.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compNIDStartParam:
      name: nid_start
      in: query
      description: Filter the results based on NIDs equal to or greater than the provided
        integer.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compNIDEndParam:
      name: nid_end
      in: query
      description: Filter the results based on NIDs less than or equal to the provided
        integer.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compPartitionParam:
      name: partition
      in: query
      description: Restrict search to the given partition (p#.#). One partition can
        be combined with at most one group argument which will be treated as a logical
        AND. NULL will return components in NO partition.
      required: false
      style: form
      explode: true
      schema:
        type: string
    compGroupParam:
      name: group
      in: query
      description: Restrict search to the given group label. One group can be combined
        with at most one partition argument which will be treated as a logical AND.
        NULL will return components in NO groups.
      required: false
      style: form
      explode: true
      schema:
        type: string
x-original-swagger-version: "2.0"
