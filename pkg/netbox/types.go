package netbox

import (

	"encoding/json"
	"fmt"

	"os"
	"reflect"

	"gopkg.in/yaml.v3"
)

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.
type DeviceType struct {
	// Airflow corresponds to the JSON schema field "airflow".
	Airflow *DeviceTypeAirflow `json:"airflow,omitempty" yaml:"airflow,omitempty" mapstructure:"airflow,omitempty"`

	// Comments corresponds to the JSON schema field "comments".
	Comments *string `json:"comments,omitempty" yaml:"comments,omitempty" mapstructure:"comments,omitempty"`

	// ConsolePorts corresponds to the JSON schema field "console-ports".
	ConsolePorts []DeviceTypeConsolePortsElem `json:"console-ports,omitempty" yaml:"console-ports,omitempty" mapstructure:"console-ports,omitempty"`

	// ConsoleServerPorts corresponds to the JSON schema field "console-server-ports".
	ConsoleServerPorts []DeviceTypeConsoleServerPortsElem `json:"console-server-ports,omitempty" yaml:"console-server-ports,omitempty" mapstructure:"console-server-ports,omitempty"`

	// Description corresponds to the JSON schema field "description".
	Description *string `json:"description,omitempty" yaml:"description,omitempty" mapstructure:"description,omitempty"`

	// DeviceBays corresponds to the JSON schema field "device-bays".
	DeviceBays []DeviceTypeDeviceBaysElem `json:"device-bays,omitempty" yaml:"device-bays,omitempty" mapstructure:"device-bays,omitempty"`

	// FrontPorts corresponds to the JSON schema field "front-ports".
	FrontPorts []DeviceTypeFrontPortsElem `json:"front-ports,omitempty" yaml:"front-ports,omitempty" mapstructure:"front-ports,omitempty"`

	// FrontImage corresponds to the JSON schema field "front_image".
	FrontImage *bool `json:"front_image,omitempty" yaml:"front_image,omitempty" mapstructure:"front_image,omitempty"`

	// Interfaces corresponds to the JSON schema field "interfaces".
	Interfaces []DeviceTypeInterfacesElem `json:"interfaces,omitempty" yaml:"interfaces,omitempty" mapstructure:"interfaces,omitempty"`

	// InventoryItems corresponds to the JSON schema field "inventory-items".
	InventoryItems []DeviceTypeInventoryItemsElem `json:"inventory-items,omitempty" yaml:"inventory-items,omitempty" mapstructure:"inventory-items,omitempty"`

	// IsFullDepth corresponds to the JSON schema field "is_full_depth".
	IsFullDepth *bool `json:"is_full_depth,omitempty" yaml:"is_full_depth,omitempty" mapstructure:"is_full_depth,omitempty"`

	// IsPowered corresponds to the JSON schema field "is_powered".
	IsPowered *bool `json:"is_powered,omitempty" yaml:"is_powered,omitempty" mapstructure:"is_powered,omitempty"`

	// Manufacturer corresponds to the JSON schema field "manufacturer".
	Manufacturer string `json:"manufacturer" yaml:"manufacturer" mapstructure:"manufacturer"`

	// Model corresponds to the JSON schema field "model".
	Model string `json:"model" yaml:"model" mapstructure:"model"`

	// ModuleBays corresponds to the JSON schema field "module-bays".
	ModuleBays []DeviceTypeModuleBaysElem `json:"module-bays,omitempty" yaml:"module-bays,omitempty" mapstructure:"module-bays,omitempty"`

	// PartNumber corresponds to the JSON schema field "part_number".
	PartNumber *string `json:"part_number,omitempty" yaml:"part_number,omitempty" mapstructure:"part_number,omitempty"`

	// PowerOutlets corresponds to the JSON schema field "power-outlets".
	PowerOutlets []DeviceTypePowerOutletsElem `json:"power-outlets,omitempty" yaml:"power-outlets,omitempty" mapstructure:"power-outlets,omitempty"`

	// PowerPorts corresponds to the JSON schema field "power-ports".
	PowerPorts []DeviceTypePowerPortsElem `json:"power-ports,omitempty" yaml:"power-ports,omitempty" mapstructure:"power-ports,omitempty"`

	// RearPorts corresponds to the JSON schema field "rear-ports".
	RearPorts []DeviceTypeRearPortsElem `json:"rear-ports,omitempty" yaml:"rear-ports,omitempty" mapstructure:"rear-ports,omitempty"`

	// RearImage corresponds to the JSON schema field "rear_image".
	RearImage *bool `json:"rear_image,omitempty" yaml:"rear_image,omitempty" mapstructure:"rear_image,omitempty"`

	// Slug corresponds to the JSON schema field "slug".
	Slug string `json:"slug" yaml:"slug" mapstructure:"slug"`

	// SubdeviceRole corresponds to the JSON schema field "subdevice_role".
	SubdeviceRole *DeviceTypeSubdeviceRole `json:"subdevice_role,omitempty" yaml:"subdevice_role,omitempty" mapstructure:"subdevice_role,omitempty"`

	// UHeight corresponds to the JSON schema field "u_height".
	UHeight *float64 `json:"u_height,omitempty" yaml:"u_height,omitempty" mapstructure:"u_height,omitempty"`

	// Weight corresponds to the JSON schema field "weight".
	Weight *float64 `json:"weight,omitempty" yaml:"weight,omitempty" mapstructure:"weight,omitempty"`

	// WeightUnit corresponds to the JSON schema field "weight_unit".
	WeightUnit *DeviceTypeWeightUnit `json:"weight_unit,omitempty" yaml:"weight_unit,omitempty" mapstructure:"weight_unit,omitempty"`
}

type DeviceTypeAirflow string

const DeviceTypeAirflowFrontToRear DeviceTypeAirflow = "front-to-rear"
const DeviceTypeAirflowLeftToRight DeviceTypeAirflow = "left-to-right"
const DeviceTypeAirflowMixed DeviceTypeAirflow = "mixed"
const DeviceTypeAirflowPassive DeviceTypeAirflow = "passive"
const DeviceTypeAirflowRearToFront DeviceTypeAirflow = "rear-to-front"
const DeviceTypeAirflowRightToLeft DeviceTypeAirflow = "right-to-left"
const DeviceTypeAirflowSideToRear DeviceTypeAirflow = "side-to-rear"

type DeviceTypeConsolePortsElem struct {
	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Poe corresponds to the JSON schema field "poe".
	Poe *bool `json:"poe,omitempty" yaml:"poe,omitempty" mapstructure:"poe,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypeConsolePortsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypeConsolePortsElemType string

const DeviceTypeConsolePortsElemTypeDb25 DeviceTypeConsolePortsElemType = "db-25"
const DeviceTypeConsolePortsElemTypeDe9 DeviceTypeConsolePortsElemType = "de-9"
const DeviceTypeConsolePortsElemTypeMiniDin8 DeviceTypeConsolePortsElemType = "mini-din-8"
const DeviceTypeConsolePortsElemTypeOther DeviceTypeConsolePortsElemType = "other"
const DeviceTypeConsolePortsElemTypeRj11 DeviceTypeConsolePortsElemType = "rj-11"
const DeviceTypeConsolePortsElemTypeRj12 DeviceTypeConsolePortsElemType = "rj-12"
const DeviceTypeConsolePortsElemTypeRj45 DeviceTypeConsolePortsElemType = "rj-45"
const DeviceTypeConsolePortsElemTypeUsbA DeviceTypeConsolePortsElemType = "usb-a"
const DeviceTypeConsolePortsElemTypeUsbB DeviceTypeConsolePortsElemType = "usb-b"
const DeviceTypeConsolePortsElemTypeUsbC DeviceTypeConsolePortsElemType = "usb-c"
const DeviceTypeConsolePortsElemTypeUsbMicroA DeviceTypeConsolePortsElemType = "usb-micro-a"
const DeviceTypeConsolePortsElemTypeUsbMicroAb DeviceTypeConsolePortsElemType = "usb-micro-ab"
const DeviceTypeConsolePortsElemTypeUsbMicroB DeviceTypeConsolePortsElemType = "usb-micro-b"
const DeviceTypeConsolePortsElemTypeUsbMiniA DeviceTypeConsolePortsElemType = "usb-mini-a"
const DeviceTypeConsolePortsElemTypeUsbMiniB DeviceTypeConsolePortsElemType = "usb-mini-b"

type DeviceTypeConsoleServerPortsElem struct {
	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypeConsoleServerPortsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypeConsoleServerPortsElemType string

const DeviceTypeConsoleServerPortsElemTypeDb25 DeviceTypeConsoleServerPortsElemType = "db-25"
const DeviceTypeConsoleServerPortsElemTypeDe9 DeviceTypeConsoleServerPortsElemType = "de-9"
const DeviceTypeConsoleServerPortsElemTypeMiniDin8 DeviceTypeConsoleServerPortsElemType = "mini-din-8"
const DeviceTypeConsoleServerPortsElemTypeOther DeviceTypeConsoleServerPortsElemType = "other"
const DeviceTypeConsoleServerPortsElemTypeRj11 DeviceTypeConsoleServerPortsElemType = "rj-11"
const DeviceTypeConsoleServerPortsElemTypeRj12 DeviceTypeConsoleServerPortsElemType = "rj-12"
const DeviceTypeConsoleServerPortsElemTypeRj45 DeviceTypeConsoleServerPortsElemType = "rj-45"
const DeviceTypeConsoleServerPortsElemTypeUsbA DeviceTypeConsoleServerPortsElemType = "usb-a"
const DeviceTypeConsoleServerPortsElemTypeUsbB DeviceTypeConsoleServerPortsElemType = "usb-b"
const DeviceTypeConsoleServerPortsElemTypeUsbC DeviceTypeConsoleServerPortsElemType = "usb-c"
const DeviceTypeConsoleServerPortsElemTypeUsbMicroA DeviceTypeConsoleServerPortsElemType = "usb-micro-a"
const DeviceTypeConsoleServerPortsElemTypeUsbMicroAb DeviceTypeConsoleServerPortsElemType = "usb-micro-ab"
const DeviceTypeConsoleServerPortsElemTypeUsbMicroB DeviceTypeConsoleServerPortsElemType = "usb-micro-b"
const DeviceTypeConsoleServerPortsElemTypeUsbMiniA DeviceTypeConsoleServerPortsElemType = "usb-mini-a"
const DeviceTypeConsoleServerPortsElemTypeUsbMiniB DeviceTypeConsoleServerPortsElemType = "usb-mini-b"

type DeviceTypeDeviceBaysElem struct {
	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

type DeviceTypeFrontPortsElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *string `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// RearPort corresponds to the JSON schema field "rear_port".
	RearPort string `json:"rear_port" yaml:"rear_port" mapstructure:"rear_port"`

	// RearPortPosition corresponds to the JSON schema field "rear_port_position".
	RearPortPosition *int `json:"rear_port_position,omitempty" yaml:"rear_port_position,omitempty" mapstructure:"rear_port_position,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypeFrontPortsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypeFrontPortsElemType string

const DeviceTypeFrontPortsElemTypeA110Punch DeviceTypeFrontPortsElemType = "110-punch"
const DeviceTypeFrontPortsElemTypeA4P2C DeviceTypeFrontPortsElemType = "4p2c"
const DeviceTypeFrontPortsElemTypeA4P4C DeviceTypeFrontPortsElemType = "4p4c"
const DeviceTypeFrontPortsElemTypeA6P2C DeviceTypeFrontPortsElemType = "6p2c"
const DeviceTypeFrontPortsElemTypeA6P4C DeviceTypeFrontPortsElemType = "6p4c"
const DeviceTypeFrontPortsElemTypeA6P6C DeviceTypeFrontPortsElemType = "6p6c"
const DeviceTypeFrontPortsElemTypeA8P2C DeviceTypeFrontPortsElemType = "8p2c"
const DeviceTypeFrontPortsElemTypeA8P4C DeviceTypeFrontPortsElemType = "8p4c"
const DeviceTypeFrontPortsElemTypeA8P6C DeviceTypeFrontPortsElemType = "8p6c"
const DeviceTypeFrontPortsElemTypeA8P8C DeviceTypeFrontPortsElemType = "8p8c"
const DeviceTypeFrontPortsElemTypeBnc DeviceTypeFrontPortsElemType = "bnc"
const DeviceTypeFrontPortsElemTypeCs DeviceTypeFrontPortsElemType = "cs"
const DeviceTypeFrontPortsElemTypeF DeviceTypeFrontPortsElemType = "f"
const DeviceTypeFrontPortsElemTypeFc DeviceTypeFrontPortsElemType = "fc"
const DeviceTypeFrontPortsElemTypeGg45 DeviceTypeFrontPortsElemType = "gg45"
const DeviceTypeFrontPortsElemTypeLc DeviceTypeFrontPortsElemType = "lc"
const DeviceTypeFrontPortsElemTypeLcApc DeviceTypeFrontPortsElemType = "lc-apc"
const DeviceTypeFrontPortsElemTypeLcPc DeviceTypeFrontPortsElemType = "lc-pc"
const DeviceTypeFrontPortsElemTypeLcUpc DeviceTypeFrontPortsElemType = "lc-upc"
const DeviceTypeFrontPortsElemTypeLsh DeviceTypeFrontPortsElemType = "lsh"
const DeviceTypeFrontPortsElemTypeLshApc DeviceTypeFrontPortsElemType = "lsh-apc"
const DeviceTypeFrontPortsElemTypeLshPc DeviceTypeFrontPortsElemType = "lsh-pc"
const DeviceTypeFrontPortsElemTypeLshUpc DeviceTypeFrontPortsElemType = "lsh-upc"
const DeviceTypeFrontPortsElemTypeLx5 DeviceTypeFrontPortsElemType = "lx5"
const DeviceTypeFrontPortsElemTypeLx5Apc DeviceTypeFrontPortsElemType = "lx5-apc"
const DeviceTypeFrontPortsElemTypeLx5Pc DeviceTypeFrontPortsElemType = "lx5-pc"
const DeviceTypeFrontPortsElemTypeLx5Upc DeviceTypeFrontPortsElemType = "lx5-upc"
const DeviceTypeFrontPortsElemTypeMpo DeviceTypeFrontPortsElemType = "mpo"
const DeviceTypeFrontPortsElemTypeMrj21 DeviceTypeFrontPortsElemType = "mrj21"
const DeviceTypeFrontPortsElemTypeMtrj DeviceTypeFrontPortsElemType = "mtrj"
const DeviceTypeFrontPortsElemTypeN DeviceTypeFrontPortsElemType = "n"
const DeviceTypeFrontPortsElemTypeOther DeviceTypeFrontPortsElemType = "other"
const DeviceTypeFrontPortsElemTypeSc DeviceTypeFrontPortsElemType = "sc"
const DeviceTypeFrontPortsElemTypeScApc DeviceTypeFrontPortsElemType = "sc-apc"
const DeviceTypeFrontPortsElemTypeScPc DeviceTypeFrontPortsElemType = "sc-pc"
const DeviceTypeFrontPortsElemTypeScUpc DeviceTypeFrontPortsElemType = "sc-upc"
const DeviceTypeFrontPortsElemTypeSma905 DeviceTypeFrontPortsElemType = "sma-905"
const DeviceTypeFrontPortsElemTypeSma906 DeviceTypeFrontPortsElemType = "sma-906"
const DeviceTypeFrontPortsElemTypeSn DeviceTypeFrontPortsElemType = "sn"
const DeviceTypeFrontPortsElemTypeSplice DeviceTypeFrontPortsElemType = "splice"
const DeviceTypeFrontPortsElemTypeSt DeviceTypeFrontPortsElemType = "st"
const DeviceTypeFrontPortsElemTypeTera1P DeviceTypeFrontPortsElemType = "tera-1p"
const DeviceTypeFrontPortsElemTypeTera2P DeviceTypeFrontPortsElemType = "tera-2p"
const DeviceTypeFrontPortsElemTypeTera4P DeviceTypeFrontPortsElemType = "tera-4p"
const DeviceTypeFrontPortsElemTypeUrmP2 DeviceTypeFrontPortsElemType = "urm-p2"
const DeviceTypeFrontPortsElemTypeUrmP4 DeviceTypeFrontPortsElemType = "urm-p4"
const DeviceTypeFrontPortsElemTypeUrmP8 DeviceTypeFrontPortsElemType = "urm-p8"

type DeviceTypeInterfacesElem struct {
	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// MgmtOnly corresponds to the JSON schema field "mgmt_only".
	MgmtOnly *bool `json:"mgmt_only,omitempty" yaml:"mgmt_only,omitempty" mapstructure:"mgmt_only,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// PoeMode corresponds to the JSON schema field "poe_mode".
	PoeMode *DeviceTypeInterfacesElemPoeMode `json:"poe_mode,omitempty" yaml:"poe_mode,omitempty" mapstructure:"poe_mode,omitempty"`

	// PoeType corresponds to the JSON schema field "poe_type".
	PoeType *DeviceTypeInterfacesElemPoeType `json:"poe_type,omitempty" yaml:"poe_type,omitempty" mapstructure:"poe_type,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypeInterfacesElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypeInterfacesElemPoeMode string

const DeviceTypeInterfacesElemPoeModePd DeviceTypeInterfacesElemPoeMode = "pd"
const DeviceTypeInterfacesElemPoeModePse DeviceTypeInterfacesElemPoeMode = "pse"

type DeviceTypeInterfacesElemPoeType string

const DeviceTypeInterfacesElemPoeTypePassive24V2Pair DeviceTypeInterfacesElemPoeType = "passive-24v-2pair"
const DeviceTypeInterfacesElemPoeTypePassive24V4Pair DeviceTypeInterfacesElemPoeType = "passive-24v-4pair"
const DeviceTypeInterfacesElemPoeTypePassive48V2Pair DeviceTypeInterfacesElemPoeType = "passive-48v-2pair"
const DeviceTypeInterfacesElemPoeTypePassive48V4Pair DeviceTypeInterfacesElemPoeType = "passive-48v-4pair"
const DeviceTypeInterfacesElemPoeTypeType1Ieee8023Af DeviceTypeInterfacesElemPoeType = "type1-ieee802.3af"
const DeviceTypeInterfacesElemPoeTypeType2Ieee8023At DeviceTypeInterfacesElemPoeType = "type2-ieee802.3at"
const DeviceTypeInterfacesElemPoeTypeType3Ieee8023Bt DeviceTypeInterfacesElemPoeType = "type3-ieee802.3bt"
const DeviceTypeInterfacesElemPoeTypeType4Ieee8023Bt DeviceTypeInterfacesElemPoeType = "type4-ieee802.3bt"

type DeviceTypeInterfacesElemType string

const DeviceTypeInterfacesElemTypeA1000BaseKx DeviceTypeInterfacesElemType = "1000base-kx"
const DeviceTypeInterfacesElemTypeA1000BaseT DeviceTypeInterfacesElemType = "1000base-t"
const DeviceTypeInterfacesElemTypeA1000BaseXGbic DeviceTypeInterfacesElemType = "1000base-x-gbic"
const DeviceTypeInterfacesElemTypeA1000BaseXSfp DeviceTypeInterfacesElemType = "1000base-x-sfp"
const DeviceTypeInterfacesElemTypeA100BaseFx DeviceTypeInterfacesElemType = "100base-fx"
const DeviceTypeInterfacesElemTypeA100BaseLfx DeviceTypeInterfacesElemType = "100base-lfx"
const DeviceTypeInterfacesElemTypeA100BaseT1 DeviceTypeInterfacesElemType = "100base-t1"
const DeviceTypeInterfacesElemTypeA100BaseTx DeviceTypeInterfacesElemType = "100base-tx"
const DeviceTypeInterfacesElemTypeA100GbaseKp4 DeviceTypeInterfacesElemType = "100gbase-kp4"
const DeviceTypeInterfacesElemTypeA100GbaseKr2 DeviceTypeInterfacesElemType = "100gbase-kr2"
const DeviceTypeInterfacesElemTypeA100GbaseKr4 DeviceTypeInterfacesElemType = "100gbase-kr4"
const DeviceTypeInterfacesElemTypeA100GbaseXCfp DeviceTypeInterfacesElemType = "100gbase-x-cfp"
const DeviceTypeInterfacesElemTypeA100GbaseXCfp2 DeviceTypeInterfacesElemType = "100gbase-x-cfp2"
const DeviceTypeInterfacesElemTypeA100GbaseXCfp4 DeviceTypeInterfacesElemType = "100gbase-x-cfp4"
const DeviceTypeInterfacesElemTypeA100GbaseXCpak DeviceTypeInterfacesElemType = "100gbase-x-cpak"
const DeviceTypeInterfacesElemTypeA100GbaseXCxp DeviceTypeInterfacesElemType = "100gbase-x-cxp"
const DeviceTypeInterfacesElemTypeA100GbaseXDsfp DeviceTypeInterfacesElemType = "100gbase-x-dsfp"
const DeviceTypeInterfacesElemTypeA100GbaseXQsfp28 DeviceTypeInterfacesElemType = "100gbase-x-qsfp28"
const DeviceTypeInterfacesElemTypeA100GbaseXQsfpdd DeviceTypeInterfacesElemType = "100gbase-x-qsfpdd"
const DeviceTypeInterfacesElemTypeA100GbaseXSfpdd DeviceTypeInterfacesElemType = "100gbase-x-sfpdd"
const DeviceTypeInterfacesElemTypeA10GEpon DeviceTypeInterfacesElemType = "10g-epon"
const DeviceTypeInterfacesElemTypeA10GbaseCx4 DeviceTypeInterfacesElemType = "10gbase-cx4"
const DeviceTypeInterfacesElemTypeA10GbaseKr DeviceTypeInterfacesElemType = "10gbase-kr"
const DeviceTypeInterfacesElemTypeA10GbaseKx4 DeviceTypeInterfacesElemType = "10gbase-kx4"
const DeviceTypeInterfacesElemTypeA10GbaseT DeviceTypeInterfacesElemType = "10gbase-t"
const DeviceTypeInterfacesElemTypeA10GbaseXSfpp DeviceTypeInterfacesElemType = "10gbase-x-sfpp"
const DeviceTypeInterfacesElemTypeA10GbaseXX2 DeviceTypeInterfacesElemType = "10gbase-x-x2"
const DeviceTypeInterfacesElemTypeA10GbaseXXenpak DeviceTypeInterfacesElemType = "10gbase-x-xenpak"
const DeviceTypeInterfacesElemTypeA10GbaseXXfp DeviceTypeInterfacesElemType = "10gbase-x-xfp"
const DeviceTypeInterfacesElemTypeA128GfcQsfp28 DeviceTypeInterfacesElemType = "128gfc-qsfp28"
const DeviceTypeInterfacesElemTypeA16GfcSfpp DeviceTypeInterfacesElemType = "16gfc-sfpp"
const DeviceTypeInterfacesElemTypeA1GfcSfp DeviceTypeInterfacesElemType = "1gfc-sfp"
const DeviceTypeInterfacesElemTypeA200GbaseXCfp2 DeviceTypeInterfacesElemType = "200gbase-x-cfp2"
const DeviceTypeInterfacesElemTypeA200GbaseXQsfp56 DeviceTypeInterfacesElemType = "200gbase-x-qsfp56"
const DeviceTypeInterfacesElemTypeA200GbaseXQsfpdd DeviceTypeInterfacesElemType = "200gbase-x-qsfpdd"
const DeviceTypeInterfacesElemTypeA25GbaseKr DeviceTypeInterfacesElemType = "25gbase-kr"
const DeviceTypeInterfacesElemTypeA25GbaseT DeviceTypeInterfacesElemType = "2.5gbase-t"
const DeviceTypeInterfacesElemTypeA25GbaseXSfp28 DeviceTypeInterfacesElemType = "25gbase-x-sfp28"
const DeviceTypeInterfacesElemTypeA2GfcSfp DeviceTypeInterfacesElemType = "2gfc-sfp"
const DeviceTypeInterfacesElemTypeA32GfcSfp28 DeviceTypeInterfacesElemType = "32gfc-sfp28"
const DeviceTypeInterfacesElemTypeA400GbaseXCdfp DeviceTypeInterfacesElemType = "400gbase-x-cdfp"
const DeviceTypeInterfacesElemTypeA400GbaseXCfp2 DeviceTypeInterfacesElemType = "400gbase-x-cfp2"
const DeviceTypeInterfacesElemTypeA400GbaseXCfp8 DeviceTypeInterfacesElemType = "400gbase-x-cfp8"
const DeviceTypeInterfacesElemTypeA400GbaseXOsfp DeviceTypeInterfacesElemType = "400gbase-x-osfp"
const DeviceTypeInterfacesElemTypeA400GbaseXOsfpRhs DeviceTypeInterfacesElemType = "400gbase-x-osfp-rhs"
const DeviceTypeInterfacesElemTypeA400GbaseXQsfp112 DeviceTypeInterfacesElemType = "400gbase-x-qsfp112"
const DeviceTypeInterfacesElemTypeA400GbaseXQsfpdd DeviceTypeInterfacesElemType = "400gbase-x-qsfpdd"
const DeviceTypeInterfacesElemTypeA40GbaseKr4 DeviceTypeInterfacesElemType = "40gbase-kr4"
const DeviceTypeInterfacesElemTypeA40GbaseXQsfpp DeviceTypeInterfacesElemType = "40gbase-x-qsfpp"
const DeviceTypeInterfacesElemTypeA4GfcSfp DeviceTypeInterfacesElemType = "4gfc-sfp"
const DeviceTypeInterfacesElemTypeA50GbaseKr DeviceTypeInterfacesElemType = "50gbase-kr"
const DeviceTypeInterfacesElemTypeA50GbaseXSfp28 DeviceTypeInterfacesElemType = "50gbase-x-sfp28"
const DeviceTypeInterfacesElemTypeA50GbaseXSfp56 DeviceTypeInterfacesElemType = "50gbase-x-sfp56"
const DeviceTypeInterfacesElemTypeA5GbaseT DeviceTypeInterfacesElemType = "5gbase-t"
const DeviceTypeInterfacesElemTypeA64GfcQsfpp DeviceTypeInterfacesElemType = "64gfc-qsfpp"
const DeviceTypeInterfacesElemTypeA800GbaseXOsfp DeviceTypeInterfacesElemType = "800gbase-x-osfp"
const DeviceTypeInterfacesElemTypeA800GbaseXQsfpdd DeviceTypeInterfacesElemType = "800gbase-x-qsfpdd"
const DeviceTypeInterfacesElemTypeA8GfcSfpp DeviceTypeInterfacesElemType = "8gfc-sfpp"
const DeviceTypeInterfacesElemTypeBridge DeviceTypeInterfacesElemType = "bridge"
const DeviceTypeInterfacesElemTypeCdma DeviceTypeInterfacesElemType = "cdma"
const DeviceTypeInterfacesElemTypeCiscoFlexstack DeviceTypeInterfacesElemType = "cisco-flexstack"
const DeviceTypeInterfacesElemTypeCiscoFlexstackPlus DeviceTypeInterfacesElemType = "cisco-flexstack-plus"
const DeviceTypeInterfacesElemTypeCiscoStackwise DeviceTypeInterfacesElemType = "cisco-stackwise"
const DeviceTypeInterfacesElemTypeCiscoStackwise160 DeviceTypeInterfacesElemType = "cisco-stackwise-160"
const DeviceTypeInterfacesElemTypeCiscoStackwise1T DeviceTypeInterfacesElemType = "cisco-stackwise-1t"
const DeviceTypeInterfacesElemTypeCiscoStackwise320 DeviceTypeInterfacesElemType = "cisco-stackwise-320"
const DeviceTypeInterfacesElemTypeCiscoStackwise480 DeviceTypeInterfacesElemType = "cisco-stackwise-480"
const DeviceTypeInterfacesElemTypeCiscoStackwise80 DeviceTypeInterfacesElemType = "cisco-stackwise-80"
const DeviceTypeInterfacesElemTypeCiscoStackwisePlus DeviceTypeInterfacesElemType = "cisco-stackwise-plus"
const DeviceTypeInterfacesElemTypeDocsis DeviceTypeInterfacesElemType = "docsis"
const DeviceTypeInterfacesElemTypeE1 DeviceTypeInterfacesElemType = "e1"
const DeviceTypeInterfacesElemTypeE3 DeviceTypeInterfacesElemType = "e3"
const DeviceTypeInterfacesElemTypeEpon DeviceTypeInterfacesElemType = "epon"
const DeviceTypeInterfacesElemTypeExtremeSummitstack DeviceTypeInterfacesElemType = "extreme-summitstack"
const DeviceTypeInterfacesElemTypeExtremeSummitstack128 DeviceTypeInterfacesElemType = "extreme-summitstack-128"
const DeviceTypeInterfacesElemTypeExtremeSummitstack256 DeviceTypeInterfacesElemType = "extreme-summitstack-256"
const DeviceTypeInterfacesElemTypeExtremeSummitstack512 DeviceTypeInterfacesElemType = "extreme-summitstack-512"
const DeviceTypeInterfacesElemTypeGpon DeviceTypeInterfacesElemType = "gpon"
const DeviceTypeInterfacesElemTypeGsm DeviceTypeInterfacesElemType = "gsm"
const DeviceTypeInterfacesElemTypeIeee80211A DeviceTypeInterfacesElemType = "ieee802.11a"
const DeviceTypeInterfacesElemTypeIeee80211Ac DeviceTypeInterfacesElemType = "ieee802.11ac"
const DeviceTypeInterfacesElemTypeIeee80211Ad DeviceTypeInterfacesElemType = "ieee802.11ad"
const DeviceTypeInterfacesElemTypeIeee80211Ax DeviceTypeInterfacesElemType = "ieee802.11ax"
const DeviceTypeInterfacesElemTypeIeee80211Ay DeviceTypeInterfacesElemType = "ieee802.11ay"
const DeviceTypeInterfacesElemTypeIeee80211G DeviceTypeInterfacesElemType = "ieee802.11g"
const DeviceTypeInterfacesElemTypeIeee80211N DeviceTypeInterfacesElemType = "ieee802.11n"
const DeviceTypeInterfacesElemTypeIeee802151 DeviceTypeInterfacesElemType = "ieee802.15.1"
const DeviceTypeInterfacesElemTypeInfinibandDdr DeviceTypeInterfacesElemType = "infiniband-ddr"
const DeviceTypeInterfacesElemTypeInfinibandEdr DeviceTypeInterfacesElemType = "infiniband-edr"
const DeviceTypeInterfacesElemTypeInfinibandFdr DeviceTypeInterfacesElemType = "infiniband-fdr"
const DeviceTypeInterfacesElemTypeInfinibandFdr10 DeviceTypeInterfacesElemType = "infiniband-fdr10"
const DeviceTypeInterfacesElemTypeInfinibandHdr DeviceTypeInterfacesElemType = "infiniband-hdr"
const DeviceTypeInterfacesElemTypeInfinibandNdr DeviceTypeInterfacesElemType = "infiniband-ndr"
const DeviceTypeInterfacesElemTypeInfinibandQdr DeviceTypeInterfacesElemType = "infiniband-qdr"
const DeviceTypeInterfacesElemTypeInfinibandSdr DeviceTypeInterfacesElemType = "infiniband-sdr"
const DeviceTypeInterfacesElemTypeInfinibandXdr DeviceTypeInterfacesElemType = "infiniband-xdr"
const DeviceTypeInterfacesElemTypeJuniperVcp DeviceTypeInterfacesElemType = "juniper-vcp"
const DeviceTypeInterfacesElemTypeLag DeviceTypeInterfacesElemType = "lag"
const DeviceTypeInterfacesElemTypeLte DeviceTypeInterfacesElemType = "lte"
const DeviceTypeInterfacesElemTypeNgPon2 DeviceTypeInterfacesElemType = "ng-pon2"
const DeviceTypeInterfacesElemTypeOther DeviceTypeInterfacesElemType = "other"
const DeviceTypeInterfacesElemTypeOtherWireless DeviceTypeInterfacesElemType = "other-wireless"
const DeviceTypeInterfacesElemTypeSonetOc12 DeviceTypeInterfacesElemType = "sonet-oc12"
const DeviceTypeInterfacesElemTypeSonetOc192 DeviceTypeInterfacesElemType = "sonet-oc192"
const DeviceTypeInterfacesElemTypeSonetOc1920 DeviceTypeInterfacesElemType = "sonet-oc1920"
const DeviceTypeInterfacesElemTypeSonetOc3 DeviceTypeInterfacesElemType = "sonet-oc3"
const DeviceTypeInterfacesElemTypeSonetOc3840 DeviceTypeInterfacesElemType = "sonet-oc3840"
const DeviceTypeInterfacesElemTypeSonetOc48 DeviceTypeInterfacesElemType = "sonet-oc48"
const DeviceTypeInterfacesElemTypeSonetOc768 DeviceTypeInterfacesElemType = "sonet-oc768"
const DeviceTypeInterfacesElemTypeT1 DeviceTypeInterfacesElemType = "t1"
const DeviceTypeInterfacesElemTypeT3 DeviceTypeInterfacesElemType = "t3"
const DeviceTypeInterfacesElemTypeVirtual DeviceTypeInterfacesElemType = "virtual"
const DeviceTypeInterfacesElemTypeXdsl DeviceTypeInterfacesElemType = "xdsl"
const DeviceTypeInterfacesElemTypeXgPon DeviceTypeInterfacesElemType = "xg-pon"
const DeviceTypeInterfacesElemTypeXgsPon DeviceTypeInterfacesElemType = "xgs-pon"

type DeviceTypeInventoryItemsElem struct {
	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Manufacturer corresponds to the JSON schema field "manufacturer".
	Manufacturer *string `json:"manufacturer,omitempty" yaml:"manufacturer,omitempty" mapstructure:"manufacturer,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// PartId corresponds to the JSON schema field "part_id".
	PartId *string `json:"part_id,omitempty" yaml:"part_id,omitempty" mapstructure:"part_id,omitempty"`
}

type DeviceTypeModuleBaysElem struct {
	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Position corresponds to the JSON schema field "position".
	Position *string `json:"position,omitempty" yaml:"position,omitempty" mapstructure:"position,omitempty"`
}

type DeviceTypePowerOutletsElem struct {
	// FeedLeg corresponds to the JSON schema field "feed_leg".
	FeedLeg *DeviceTypePowerOutletsElemFeedLeg `json:"feed_leg,omitempty" yaml:"feed_leg,omitempty" mapstructure:"feed_leg,omitempty"`

	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// PowerPort corresponds to the JSON schema field "power_port".
	PowerPort *string `json:"power_port,omitempty" yaml:"power_port,omitempty" mapstructure:"power_port,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypePowerOutletsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypePowerOutletsElemFeedLeg string

const DeviceTypePowerOutletsElemFeedLegA DeviceTypePowerOutletsElemFeedLeg = "A"
const DeviceTypePowerOutletsElemFeedLegB DeviceTypePowerOutletsElemFeedLeg = "B"
const DeviceTypePowerOutletsElemFeedLegC DeviceTypePowerOutletsElemFeedLeg = "C"

type DeviceTypePowerOutletsElemType string

const DeviceTypePowerOutletsElemTypeCS6360C DeviceTypePowerOutletsElemType = "CS6360C"
const DeviceTypePowerOutletsElemTypeCS6364C DeviceTypePowerOutletsElemType = "CS6364C"
const DeviceTypePowerOutletsElemTypeCS8164C DeviceTypePowerOutletsElemType = "CS8164C"
const DeviceTypePowerOutletsElemTypeCS8264C DeviceTypePowerOutletsElemType = "CS8264C"
const DeviceTypePowerOutletsElemTypeCS8364C DeviceTypePowerOutletsElemType = "CS8364C"
const DeviceTypePowerOutletsElemTypeCS8464C DeviceTypePowerOutletsElemType = "CS8464C"
const DeviceTypePowerOutletsElemTypeDcTerminal DeviceTypePowerOutletsElemType = "dc-terminal"
const DeviceTypePowerOutletsElemTypeHardwired DeviceTypePowerOutletsElemType = "hardwired"
const DeviceTypePowerOutletsElemTypeHdotCx DeviceTypePowerOutletsElemType = "hdot-cx"
const DeviceTypePowerOutletsElemTypeIec603092PE4H DeviceTypePowerOutletsElemType = "iec-60309-2p-e-4h"
const DeviceTypePowerOutletsElemTypeIec603092PE6H DeviceTypePowerOutletsElemType = "iec-60309-2p-e-6h"
const DeviceTypePowerOutletsElemTypeIec603092PE9H DeviceTypePowerOutletsElemType = "iec-60309-2p-e-9h"
const DeviceTypePowerOutletsElemTypeIec603093PE4H DeviceTypePowerOutletsElemType = "iec-60309-3p-e-4h"
const DeviceTypePowerOutletsElemTypeIec603093PE6H DeviceTypePowerOutletsElemType = "iec-60309-3p-e-6h"
const DeviceTypePowerOutletsElemTypeIec603093PE9H DeviceTypePowerOutletsElemType = "iec-60309-3p-e-9h"
const DeviceTypePowerOutletsElemTypeIec603093PNE4H DeviceTypePowerOutletsElemType = "iec-60309-3p-n-e-4h"
const DeviceTypePowerOutletsElemTypeIec603093PNE6H DeviceTypePowerOutletsElemType = "iec-60309-3p-n-e-6h"
const DeviceTypePowerOutletsElemTypeIec603093PNE9H DeviceTypePowerOutletsElemType = "iec-60309-3p-n-e-9h"
const DeviceTypePowerOutletsElemTypeIec60309PNE4H DeviceTypePowerOutletsElemType = "iec-60309-p-n-e-4h"
const DeviceTypePowerOutletsElemTypeIec60309PNE6H DeviceTypePowerOutletsElemType = "iec-60309-p-n-e-6h"
const DeviceTypePowerOutletsElemTypeIec60309PNE9H DeviceTypePowerOutletsElemType = "iec-60309-p-n-e-9h"
const DeviceTypePowerOutletsElemTypeIec60320C13 DeviceTypePowerOutletsElemType = "iec-60320-c13"
const DeviceTypePowerOutletsElemTypeIec60320C15 DeviceTypePowerOutletsElemType = "iec-60320-c15"
const DeviceTypePowerOutletsElemTypeIec60320C19 DeviceTypePowerOutletsElemType = "iec-60320-c19"
const DeviceTypePowerOutletsElemTypeIec60320C21 DeviceTypePowerOutletsElemType = "iec-60320-c21"
const DeviceTypePowerOutletsElemTypeIec60320C5 DeviceTypePowerOutletsElemType = "iec-60320-c5"
const DeviceTypePowerOutletsElemTypeIec60320C7 DeviceTypePowerOutletsElemType = "iec-60320-c7"
const DeviceTypePowerOutletsElemTypeIec609061 DeviceTypePowerOutletsElemType = "iec-60906-1"
const DeviceTypePowerOutletsElemTypeItaE DeviceTypePowerOutletsElemType = "ita-e"
const DeviceTypePowerOutletsElemTypeItaF DeviceTypePowerOutletsElemType = "ita-f"
const DeviceTypePowerOutletsElemTypeItaG DeviceTypePowerOutletsElemType = "ita-g"
const DeviceTypePowerOutletsElemTypeItaH DeviceTypePowerOutletsElemType = "ita-h"
const DeviceTypePowerOutletsElemTypeItaI DeviceTypePowerOutletsElemType = "ita-i"
const DeviceTypePowerOutletsElemTypeItaJ DeviceTypePowerOutletsElemType = "ita-j"
const DeviceTypePowerOutletsElemTypeItaK DeviceTypePowerOutletsElemType = "ita-k"
const DeviceTypePowerOutletsElemTypeItaL DeviceTypePowerOutletsElemType = "ita-l"
const DeviceTypePowerOutletsElemTypeItaM DeviceTypePowerOutletsElemType = "ita-m"
const DeviceTypePowerOutletsElemTypeItaMultistandard DeviceTypePowerOutletsElemType = "ita-multistandard"
const DeviceTypePowerOutletsElemTypeItaN DeviceTypePowerOutletsElemType = "ita-n"
const DeviceTypePowerOutletsElemTypeItaO DeviceTypePowerOutletsElemType = "ita-o"
const DeviceTypePowerOutletsElemTypeNbr1413610A DeviceTypePowerOutletsElemType = "nbr-14136-10a"
const DeviceTypePowerOutletsElemTypeNbr1413620A DeviceTypePowerOutletsElemType = "nbr-14136-20a"
const DeviceTypePowerOutletsElemTypeNema1030R DeviceTypePowerOutletsElemType = "nema-10-30r"
const DeviceTypePowerOutletsElemTypeNema1050R DeviceTypePowerOutletsElemType = "nema-10-50r"
const DeviceTypePowerOutletsElemTypeNema115R DeviceTypePowerOutletsElemType = "nema-1-15r"
const DeviceTypePowerOutletsElemTypeNema1420R DeviceTypePowerOutletsElemType = "nema-14-20r"
const DeviceTypePowerOutletsElemTypeNema1430R DeviceTypePowerOutletsElemType = "nema-14-30r"
const DeviceTypePowerOutletsElemTypeNema1450R DeviceTypePowerOutletsElemType = "nema-14-50r"
const DeviceTypePowerOutletsElemTypeNema1460R DeviceTypePowerOutletsElemType = "nema-14-60r"
const DeviceTypePowerOutletsElemTypeNema1515R DeviceTypePowerOutletsElemType = "nema-15-15r"
const DeviceTypePowerOutletsElemTypeNema1520R DeviceTypePowerOutletsElemType = "nema-15-20r"
const DeviceTypePowerOutletsElemTypeNema1530R DeviceTypePowerOutletsElemType = "nema-15-30r"
const DeviceTypePowerOutletsElemTypeNema1550R DeviceTypePowerOutletsElemType = "nema-15-50r"
const DeviceTypePowerOutletsElemTypeNema1560R DeviceTypePowerOutletsElemType = "nema-15-60r"
const DeviceTypePowerOutletsElemTypeNema515R DeviceTypePowerOutletsElemType = "nema-5-15r"
const DeviceTypePowerOutletsElemTypeNema520R DeviceTypePowerOutletsElemType = "nema-5-20r"
const DeviceTypePowerOutletsElemTypeNema530R DeviceTypePowerOutletsElemType = "nema-5-30r"
const DeviceTypePowerOutletsElemTypeNema550R DeviceTypePowerOutletsElemType = "nema-5-50r"
const DeviceTypePowerOutletsElemTypeNema615R DeviceTypePowerOutletsElemType = "nema-6-15r"
const DeviceTypePowerOutletsElemTypeNema620R DeviceTypePowerOutletsElemType = "nema-6-20r"
const DeviceTypePowerOutletsElemTypeNema630R DeviceTypePowerOutletsElemType = "nema-6-30r"
const DeviceTypePowerOutletsElemTypeNema650R DeviceTypePowerOutletsElemType = "nema-6-50r"
const DeviceTypePowerOutletsElemTypeNemaL1030R DeviceTypePowerOutletsElemType = "nema-l10-30r"
const DeviceTypePowerOutletsElemTypeNemaL115R DeviceTypePowerOutletsElemType = "nema-l1-15r"
const DeviceTypePowerOutletsElemTypeNemaL1420R DeviceTypePowerOutletsElemType = "nema-l14-20r"
const DeviceTypePowerOutletsElemTypeNemaL1430R DeviceTypePowerOutletsElemType = "nema-l14-30r"
const DeviceTypePowerOutletsElemTypeNemaL1450R DeviceTypePowerOutletsElemType = "nema-l14-50r"
const DeviceTypePowerOutletsElemTypeNemaL1460R DeviceTypePowerOutletsElemType = "nema-l14-60r"
const DeviceTypePowerOutletsElemTypeNemaL1520R DeviceTypePowerOutletsElemType = "nema-l15-20r"
const DeviceTypePowerOutletsElemTypeNemaL1530R DeviceTypePowerOutletsElemType = "nema-l15-30r"
const DeviceTypePowerOutletsElemTypeNemaL1550R DeviceTypePowerOutletsElemType = "nema-l15-50r"
const DeviceTypePowerOutletsElemTypeNemaL1560R DeviceTypePowerOutletsElemType = "nema-l15-60r"
const DeviceTypePowerOutletsElemTypeNemaL2120R DeviceTypePowerOutletsElemType = "nema-l21-20r"
const DeviceTypePowerOutletsElemTypeNemaL2130R DeviceTypePowerOutletsElemType = "nema-l21-30r"
const DeviceTypePowerOutletsElemTypeNemaL2230R DeviceTypePowerOutletsElemType = "nema-l22-30r"
const DeviceTypePowerOutletsElemTypeNemaL515R DeviceTypePowerOutletsElemType = "nema-l5-15r"
const DeviceTypePowerOutletsElemTypeNemaL520R DeviceTypePowerOutletsElemType = "nema-l5-20r"
const DeviceTypePowerOutletsElemTypeNemaL530R DeviceTypePowerOutletsElemType = "nema-l5-30r"
const DeviceTypePowerOutletsElemTypeNemaL550R DeviceTypePowerOutletsElemType = "nema-l5-50r"
const DeviceTypePowerOutletsElemTypeNemaL615R DeviceTypePowerOutletsElemType = "nema-l6-15r"
const DeviceTypePowerOutletsElemTypeNemaL620R DeviceTypePowerOutletsElemType = "nema-l6-20r"
const DeviceTypePowerOutletsElemTypeNemaL630R DeviceTypePowerOutletsElemType = "nema-l6-30r"
const DeviceTypePowerOutletsElemTypeNemaL650R DeviceTypePowerOutletsElemType = "nema-l6-50r"
const DeviceTypePowerOutletsElemTypeNeutrikPowercon20A DeviceTypePowerOutletsElemType = "neutrik-powercon-20a"
const DeviceTypePowerOutletsElemTypeNeutrikPowercon32A DeviceTypePowerOutletsElemType = "neutrik-powercon-32a"
const DeviceTypePowerOutletsElemTypeNeutrikPowerconTrue1 DeviceTypePowerOutletsElemType = "neutrik-powercon-true1"
const DeviceTypePowerOutletsElemTypeNeutrikPowerconTrue1Top DeviceTypePowerOutletsElemType = "neutrik-powercon-true1-top"
const DeviceTypePowerOutletsElemTypeOther DeviceTypePowerOutletsElemType = "other"
const DeviceTypePowerOutletsElemTypeSafDGrid DeviceTypePowerOutletsElemType = "saf-d-grid"
const DeviceTypePowerOutletsElemTypeUbiquitiSmartpower DeviceTypePowerOutletsElemType = "ubiquiti-smartpower"
const DeviceTypePowerOutletsElemTypeUsbA DeviceTypePowerOutletsElemType = "usb-a"
const DeviceTypePowerOutletsElemTypeUsbC DeviceTypePowerOutletsElemType = "usb-c"
const DeviceTypePowerOutletsElemTypeUsbMicroB DeviceTypePowerOutletsElemType = "usb-micro-b"

type DeviceTypePowerPortsElem struct {
	// AllocatedDraw corresponds to the JSON schema field "allocated_draw".
	AllocatedDraw *int `json:"allocated_draw,omitempty" yaml:"allocated_draw,omitempty" mapstructure:"allocated_draw,omitempty"`

	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// MaximumDraw corresponds to the JSON schema field "maximum_draw".
	MaximumDraw *int `json:"maximum_draw,omitempty" yaml:"maximum_draw,omitempty" mapstructure:"maximum_draw,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypePowerPortsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypePowerPortsElemType string

const DeviceTypePowerPortsElemTypeCs6361C DeviceTypePowerPortsElemType = "cs6361c"
const DeviceTypePowerPortsElemTypeCs6365C DeviceTypePowerPortsElemType = "cs6365c"
const DeviceTypePowerPortsElemTypeCs8165C DeviceTypePowerPortsElemType = "cs8165c"
const DeviceTypePowerPortsElemTypeCs8265C DeviceTypePowerPortsElemType = "cs8265c"
const DeviceTypePowerPortsElemTypeCs8365C DeviceTypePowerPortsElemType = "cs8365c"
const DeviceTypePowerPortsElemTypeCs8465C DeviceTypePowerPortsElemType = "cs8465c"
const DeviceTypePowerPortsElemTypeDcTerminal DeviceTypePowerPortsElemType = "dc-terminal"
const DeviceTypePowerPortsElemTypeHardwired DeviceTypePowerPortsElemType = "hardwired"
const DeviceTypePowerPortsElemTypeIec603092PE4H DeviceTypePowerPortsElemType = "iec-60309-2p-e-4h"
const DeviceTypePowerPortsElemTypeIec603092PE6H DeviceTypePowerPortsElemType = "iec-60309-2p-e-6h"
const DeviceTypePowerPortsElemTypeIec603092PE9H DeviceTypePowerPortsElemType = "iec-60309-2p-e-9h"
const DeviceTypePowerPortsElemTypeIec603093PE4H DeviceTypePowerPortsElemType = "iec-60309-3p-e-4h"
const DeviceTypePowerPortsElemTypeIec603093PE6H DeviceTypePowerPortsElemType = "iec-60309-3p-e-6h"
const DeviceTypePowerPortsElemTypeIec603093PE9H DeviceTypePowerPortsElemType = "iec-60309-3p-e-9h"
const DeviceTypePowerPortsElemTypeIec603093PNE4H DeviceTypePowerPortsElemType = "iec-60309-3p-n-e-4h"
const DeviceTypePowerPortsElemTypeIec603093PNE6H DeviceTypePowerPortsElemType = "iec-60309-3p-n-e-6h"
const DeviceTypePowerPortsElemTypeIec603093PNE9H DeviceTypePowerPortsElemType = "iec-60309-3p-n-e-9h"
const DeviceTypePowerPortsElemTypeIec60309PNE4H DeviceTypePowerPortsElemType = "iec-60309-p-n-e-4h"
const DeviceTypePowerPortsElemTypeIec60309PNE6H DeviceTypePowerPortsElemType = "iec-60309-p-n-e-6h"
const DeviceTypePowerPortsElemTypeIec60309PNE9H DeviceTypePowerPortsElemType = "iec-60309-p-n-e-9h"
const DeviceTypePowerPortsElemTypeIec60320C14 DeviceTypePowerPortsElemType = "iec-60320-c14"
const DeviceTypePowerPortsElemTypeIec60320C16 DeviceTypePowerPortsElemType = "iec-60320-c16"
const DeviceTypePowerPortsElemTypeIec60320C20 DeviceTypePowerPortsElemType = "iec-60320-c20"
const DeviceTypePowerPortsElemTypeIec60320C22 DeviceTypePowerPortsElemType = "iec-60320-c22"
const DeviceTypePowerPortsElemTypeIec60320C6 DeviceTypePowerPortsElemType = "iec-60320-c6"
const DeviceTypePowerPortsElemTypeIec60320C8 DeviceTypePowerPortsElemType = "iec-60320-c8"
const DeviceTypePowerPortsElemTypeIec609061 DeviceTypePowerPortsElemType = "iec-60906-1"
const DeviceTypePowerPortsElemTypeItaC DeviceTypePowerPortsElemType = "ita-c"
const DeviceTypePowerPortsElemTypeItaE DeviceTypePowerPortsElemType = "ita-e"
const DeviceTypePowerPortsElemTypeItaEf DeviceTypePowerPortsElemType = "ita-ef"
const DeviceTypePowerPortsElemTypeItaF DeviceTypePowerPortsElemType = "ita-f"
const DeviceTypePowerPortsElemTypeItaG DeviceTypePowerPortsElemType = "ita-g"
const DeviceTypePowerPortsElemTypeItaH DeviceTypePowerPortsElemType = "ita-h"
const DeviceTypePowerPortsElemTypeItaI DeviceTypePowerPortsElemType = "ita-i"
const DeviceTypePowerPortsElemTypeItaJ DeviceTypePowerPortsElemType = "ita-j"
const DeviceTypePowerPortsElemTypeItaK DeviceTypePowerPortsElemType = "ita-k"
const DeviceTypePowerPortsElemTypeItaL DeviceTypePowerPortsElemType = "ita-l"
const DeviceTypePowerPortsElemTypeItaM DeviceTypePowerPortsElemType = "ita-m"
const DeviceTypePowerPortsElemTypeItaN DeviceTypePowerPortsElemType = "ita-n"
const DeviceTypePowerPortsElemTypeItaO DeviceTypePowerPortsElemType = "ita-o"
const DeviceTypePowerPortsElemTypeNbr1413610A DeviceTypePowerPortsElemType = "nbr-14136-10a"
const DeviceTypePowerPortsElemTypeNbr1413620A DeviceTypePowerPortsElemType = "nbr-14136-20a"
const DeviceTypePowerPortsElemTypeNema1030P DeviceTypePowerPortsElemType = "nema-10-30p"
const DeviceTypePowerPortsElemTypeNema1050P DeviceTypePowerPortsElemType = "nema-10-50p"
const DeviceTypePowerPortsElemTypeNema115P DeviceTypePowerPortsElemType = "nema-1-15p"
const DeviceTypePowerPortsElemTypeNema1420P DeviceTypePowerPortsElemType = "nema-14-20p"
const DeviceTypePowerPortsElemTypeNema1430P DeviceTypePowerPortsElemType = "nema-14-30p"
const DeviceTypePowerPortsElemTypeNema1450P DeviceTypePowerPortsElemType = "nema-14-50p"
const DeviceTypePowerPortsElemTypeNema1460P DeviceTypePowerPortsElemType = "nema-14-60p"
const DeviceTypePowerPortsElemTypeNema1515P DeviceTypePowerPortsElemType = "nema-15-15p"
const DeviceTypePowerPortsElemTypeNema1520P DeviceTypePowerPortsElemType = "nema-15-20p"
const DeviceTypePowerPortsElemTypeNema1530P DeviceTypePowerPortsElemType = "nema-15-30p"
const DeviceTypePowerPortsElemTypeNema1550P DeviceTypePowerPortsElemType = "nema-15-50p"
const DeviceTypePowerPortsElemTypeNema1560P DeviceTypePowerPortsElemType = "nema-15-60p"
const DeviceTypePowerPortsElemTypeNema515P DeviceTypePowerPortsElemType = "nema-5-15p"
const DeviceTypePowerPortsElemTypeNema520P DeviceTypePowerPortsElemType = "nema-5-20p"
const DeviceTypePowerPortsElemTypeNema530P DeviceTypePowerPortsElemType = "nema-5-30p"
const DeviceTypePowerPortsElemTypeNema550P DeviceTypePowerPortsElemType = "nema-5-50p"
const DeviceTypePowerPortsElemTypeNema615P DeviceTypePowerPortsElemType = "nema-6-15p"
const DeviceTypePowerPortsElemTypeNema620P DeviceTypePowerPortsElemType = "nema-6-20p"
const DeviceTypePowerPortsElemTypeNema630P DeviceTypePowerPortsElemType = "nema-6-30p"
const DeviceTypePowerPortsElemTypeNema650P DeviceTypePowerPortsElemType = "nema-6-50p"
const DeviceTypePowerPortsElemTypeNemaL1030P DeviceTypePowerPortsElemType = "nema-l10-30p"
const DeviceTypePowerPortsElemTypeNemaL115P DeviceTypePowerPortsElemType = "nema-l1-15p"
const DeviceTypePowerPortsElemTypeNemaL1420P DeviceTypePowerPortsElemType = "nema-l14-20p"
const DeviceTypePowerPortsElemTypeNemaL1430P DeviceTypePowerPortsElemType = "nema-l14-30p"
const DeviceTypePowerPortsElemTypeNemaL1450P DeviceTypePowerPortsElemType = "nema-l14-50p"
const DeviceTypePowerPortsElemTypeNemaL1460P DeviceTypePowerPortsElemType = "nema-l14-60p"
const DeviceTypePowerPortsElemTypeNemaL1520P DeviceTypePowerPortsElemType = "nema-l15-20p"
const DeviceTypePowerPortsElemTypeNemaL1530P DeviceTypePowerPortsElemType = "nema-l15-30p"
const DeviceTypePowerPortsElemTypeNemaL1550P DeviceTypePowerPortsElemType = "nema-l15-50p"
const DeviceTypePowerPortsElemTypeNemaL1560P DeviceTypePowerPortsElemType = "nema-l15-60p"
const DeviceTypePowerPortsElemTypeNemaL2120P DeviceTypePowerPortsElemType = "nema-l21-20p"
const DeviceTypePowerPortsElemTypeNemaL2130P DeviceTypePowerPortsElemType = "nema-l21-30p"
const DeviceTypePowerPortsElemTypeNemaL2230P DeviceTypePowerPortsElemType = "nema-l22-30p"
const DeviceTypePowerPortsElemTypeNemaL515P DeviceTypePowerPortsElemType = "nema-l5-15p"
const DeviceTypePowerPortsElemTypeNemaL520P DeviceTypePowerPortsElemType = "nema-l5-20p"
const DeviceTypePowerPortsElemTypeNemaL530P DeviceTypePowerPortsElemType = "nema-l5-30p"
const DeviceTypePowerPortsElemTypeNemaL550P DeviceTypePowerPortsElemType = "nema-l5-50p"
const DeviceTypePowerPortsElemTypeNemaL615P DeviceTypePowerPortsElemType = "nema-l6-15p"
const DeviceTypePowerPortsElemTypeNemaL620P DeviceTypePowerPortsElemType = "nema-l6-20p"
const DeviceTypePowerPortsElemTypeNemaL630P DeviceTypePowerPortsElemType = "nema-l6-30p"
const DeviceTypePowerPortsElemTypeNemaL650P DeviceTypePowerPortsElemType = "nema-l6-50p"
const DeviceTypePowerPortsElemTypeNeutrikPowercon20 DeviceTypePowerPortsElemType = "neutrik-powercon-20"
const DeviceTypePowerPortsElemTypeNeutrikPowercon32 DeviceTypePowerPortsElemType = "neutrik-powercon-32"
const DeviceTypePowerPortsElemTypeNeutrikPowerconTrue1 DeviceTypePowerPortsElemType = "neutrik-powercon-true1"
const DeviceTypePowerPortsElemTypeNeutrikPowerconTrue1Top DeviceTypePowerPortsElemType = "neutrik-powercon-true1-top"
const DeviceTypePowerPortsElemTypeOther DeviceTypePowerPortsElemType = "other"
const DeviceTypePowerPortsElemTypeSafDGrid DeviceTypePowerPortsElemType = "saf-d-grid"
const DeviceTypePowerPortsElemTypeUbiquitiSmartpower DeviceTypePowerPortsElemType = "ubiquiti-smartpower"
const DeviceTypePowerPortsElemTypeUsb3B DeviceTypePowerPortsElemType = "usb-3-b"
const DeviceTypePowerPortsElemTypeUsb3MicroB DeviceTypePowerPortsElemType = "usb-3-micro-b"
const DeviceTypePowerPortsElemTypeUsbA DeviceTypePowerPortsElemType = "usb-a"
const DeviceTypePowerPortsElemTypeUsbB DeviceTypePowerPortsElemType = "usb-b"
const DeviceTypePowerPortsElemTypeUsbC DeviceTypePowerPortsElemType = "usb-c"
const DeviceTypePowerPortsElemTypeUsbMicroA DeviceTypePowerPortsElemType = "usb-micro-a"
const DeviceTypePowerPortsElemTypeUsbMicroAb DeviceTypePowerPortsElemType = "usb-micro-ab"
const DeviceTypePowerPortsElemTypeUsbMicroB DeviceTypePowerPortsElemType = "usb-micro-b"
const DeviceTypePowerPortsElemTypeUsbMiniA DeviceTypePowerPortsElemType = "usb-mini-a"
const DeviceTypePowerPortsElemTypeUsbMiniB DeviceTypePowerPortsElemType = "usb-mini-b"

type DeviceTypeRearPortsElem struct {
	// Color corresponds to the JSON schema field "color".
	Color *string `json:"color,omitempty" yaml:"color,omitempty" mapstructure:"color,omitempty"`

	// Label corresponds to the JSON schema field "label".
	Label *string `json:"label,omitempty" yaml:"label,omitempty" mapstructure:"label,omitempty"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name" mapstructure:"name"`

	// Poe corresponds to the JSON schema field "poe".
	Poe *bool `json:"poe,omitempty" yaml:"poe,omitempty" mapstructure:"poe,omitempty"`

	// Positions corresponds to the JSON schema field "positions".
	Positions *int `json:"positions,omitempty" yaml:"positions,omitempty" mapstructure:"positions,omitempty"`

	// Type corresponds to the JSON schema field "type".
	Type DeviceTypeRearPortsElemType `json:"type" yaml:"type" mapstructure:"type"`
}

type DeviceTypeRearPortsElemType string

const DeviceTypeRearPortsElemTypeA110Punch DeviceTypeRearPortsElemType = "110-punch"
const DeviceTypeRearPortsElemTypeA4P2C DeviceTypeRearPortsElemType = "4p2c"
const DeviceTypeRearPortsElemTypeA4P4C DeviceTypeRearPortsElemType = "4p4c"
const DeviceTypeRearPortsElemTypeA6P2C DeviceTypeRearPortsElemType = "6p2c"
const DeviceTypeRearPortsElemTypeA6P4C DeviceTypeRearPortsElemType = "6p4c"
const DeviceTypeRearPortsElemTypeA6P6C DeviceTypeRearPortsElemType = "6p6c"
const DeviceTypeRearPortsElemTypeA8P2C DeviceTypeRearPortsElemType = "8p2c"
const DeviceTypeRearPortsElemTypeA8P4C DeviceTypeRearPortsElemType = "8p4c"
const DeviceTypeRearPortsElemTypeA8P6C DeviceTypeRearPortsElemType = "8p6c"
const DeviceTypeRearPortsElemTypeA8P8C DeviceTypeRearPortsElemType = "8p8c"
const DeviceTypeRearPortsElemTypeBnc DeviceTypeRearPortsElemType = "bnc"
const DeviceTypeRearPortsElemTypeCs DeviceTypeRearPortsElemType = "cs"
const DeviceTypeRearPortsElemTypeF DeviceTypeRearPortsElemType = "f"
const DeviceTypeRearPortsElemTypeFc DeviceTypeRearPortsElemType = "fc"
const DeviceTypeRearPortsElemTypeGg45 DeviceTypeRearPortsElemType = "gg45"
const DeviceTypeRearPortsElemTypeLc DeviceTypeRearPortsElemType = "lc"
const DeviceTypeRearPortsElemTypeLcApc DeviceTypeRearPortsElemType = "lc-apc"
const DeviceTypeRearPortsElemTypeLcPc DeviceTypeRearPortsElemType = "lc-pc"
const DeviceTypeRearPortsElemTypeLcUpc DeviceTypeRearPortsElemType = "lc-upc"
const DeviceTypeRearPortsElemTypeLsh DeviceTypeRearPortsElemType = "lsh"
const DeviceTypeRearPortsElemTypeLshApc DeviceTypeRearPortsElemType = "lsh-apc"
const DeviceTypeRearPortsElemTypeLshPc DeviceTypeRearPortsElemType = "lsh-pc"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeInterfacesElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeInterfacesElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeInterfacesElemType, v)
	}
	*j = DeviceTypeInterfacesElemType(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeInterfacesElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeInterfacesElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypeInterfacesElem: required")
	}
	type Plain DeviceTypeInterfacesElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeInterfacesElem(plain)
	return nil
}

var enumValues_DeviceTypePowerOutletsElemFeedLeg = []interface{}{
	"A",
	"B",
	"C",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypePowerPortsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypePowerPortsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypePowerPortsElem: required")
	}
	type Plain DeviceTypePowerPortsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypePowerPortsElem(plain)
	return nil
}

const DeviceTypeRearPortsElemTypeLx5 DeviceTypeRearPortsElemType = "lx5"

var enumValues_DeviceTypeRearPortsElemType = []interface{}{
	"8p8c",
	"8p6c",
	"8p4c",
	"8p2c",
	"6p6c",
	"6p4c",
	"6p2c",
	"4p4c",
	"4p2c",
	"gg45",
	"tera-4p",
	"tera-2p",
	"tera-1p",
	"110-punch",
	"bnc",
	"f",
	"n",
	"mrj21",
	"fc",
	"lc",
	"lc-pc",
	"lc-upc",
	"lc-apc",
	"lsh",
	"lsh-pc",
	"lsh-upc",
	"lsh-apc",
	"lx5",
	"lx5-pc",
	"lx5-upc",
	"lx5-apc",
	"mpo",
	"mtrj",
	"sc",
	"sc-pc",
	"sc-upc",
	"sc-apc",
	"st",
	"cs",
	"sn",
	"sma-905",
	"sma-906",
	"urm-p2",
	"urm-p4",
	"urm-p8",
	"splice",
	"other",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeRearPortsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeRearPortsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeRearPortsElemType, v)
	}
	*j = DeviceTypeRearPortsElemType(v)
	return nil
}

var enumValues_DeviceTypeInterfacesElemType = []interface{}{
	"virtual",
	"bridge",
	"lag",
	"100base-fx",
	"100base-lfx",
	"100base-tx",
	"100base-t1",
	"1000base-t",
	"2.5gbase-t",
	"5gbase-t",
	"10gbase-t",
	"10gbase-cx4",
	"1000base-x-gbic",
	"1000base-x-sfp",
	"10gbase-x-sfpp",
	"10gbase-x-xfp",
	"10gbase-x-xenpak",
	"10gbase-x-x2",
	"25gbase-x-sfp28",
	"50gbase-x-sfp56",
	"40gbase-x-qsfpp",
	"50gbase-x-sfp28",
	"100gbase-x-cfp",
	"100gbase-x-cfp2",
	"200gbase-x-cfp2",
	"400gbase-x-cfp2",
	"100gbase-x-cfp4",
	"100gbase-x-cxp",
	"100gbase-x-cpak",
	"100gbase-x-dsfp",
	"100gbase-x-sfpdd",
	"100gbase-x-qsfp28",
	"100gbase-x-qsfpdd",
	"200gbase-x-qsfp56",
	"200gbase-x-qsfpdd",
	"400gbase-x-qsfp112",
	"400gbase-x-qsfpdd",
	"400gbase-x-osfp",
	"400gbase-x-osfp-rhs",
	"400gbase-x-cdfp",
	"400gbase-x-cfp8",
	"800gbase-x-qsfpdd",
	"800gbase-x-osfp",
	"1000base-kx",
	"10gbase-kr",
	"10gbase-kx4",
	"25gbase-kr",
	"40gbase-kr4",
	"50gbase-kr",
	"100gbase-kp4",
	"100gbase-kr2",
	"100gbase-kr4",
	"ieee802.11a",
	"ieee802.11g",
	"ieee802.11n",
	"ieee802.11ac",
	"ieee802.11ad",
	"ieee802.11ax",
	"ieee802.11ay",
	"ieee802.15.1",
	"other-wireless",
	"gsm",
	"cdma",
	"lte",
	"sonet-oc3",
	"sonet-oc12",
	"sonet-oc48",
	"sonet-oc192",
	"sonet-oc768",
	"sonet-oc1920",
	"sonet-oc3840",
	"1gfc-sfp",
	"2gfc-sfp",
	"4gfc-sfp",
	"8gfc-sfpp",
	"16gfc-sfpp",
	"32gfc-sfp28",
	"64gfc-qsfpp",
	"128gfc-qsfp28",
	"infiniband-sdr",
	"infiniband-ddr",
	"infiniband-qdr",
	"infiniband-fdr10",
	"infiniband-fdr",
	"infiniband-edr",
	"infiniband-hdr",
	"infiniband-ndr",
	"infiniband-xdr",
	"t1",
	"e1",
	"t3",
	"e3",
	"xdsl",
	"docsis",
	"gpon",
	"xg-pon",
	"xgs-pon",
	"ng-pon2",
	"epon",
	"10g-epon",
	"cisco-stackwise",
	"cisco-stackwise-plus",
	"cisco-flexstack",
	"cisco-flexstack-plus",
	"cisco-stackwise-80",
	"cisco-stackwise-160",
	"cisco-stackwise-320",
	"cisco-stackwise-480",
	"cisco-stackwise-1t",
	"juniper-vcp",
	"extreme-summitstack",
	"extreme-summitstack-128",
	"extreme-summitstack-256",
	"extreme-summitstack-512",
	"other",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeInterfacesElemPoeType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeInterfacesElemPoeType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeInterfacesElemPoeType, v)
	}
	*j = DeviceTypeInterfacesElemPoeType(v)
	return nil
}

var enumValues_DeviceTypeInterfacesElemPoeType = []interface{}{
	"type1-ieee802.3af",
	"type2-ieee802.3at",
	"type3-ieee802.3bt",
	"type4-ieee802.3bt",
	"passive-24v-2pair",
	"passive-24v-4pair",
	"passive-48v-2pair",
	"passive-48v-4pair",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeInterfacesElemPoeMode) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeInterfacesElemPoeMode {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeInterfacesElemPoeMode, v)
	}
	*j = DeviceTypeInterfacesElemPoeMode(v)
	return nil
}

var enumValues_DeviceTypeInterfacesElemPoeMode = []interface{}{
	"pd",
	"pse",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeFrontPortsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeFrontPortsElem: required")
	}
	if v, ok := raw["rear_port"]; !ok || v == nil {
		return fmt.Errorf("field rear_port in DeviceTypeFrontPortsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypeFrontPortsElem: required")
	}
	type Plain DeviceTypeFrontPortsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeFrontPortsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeFrontPortsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeFrontPortsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeFrontPortsElemType, v)
	}
	*j = DeviceTypeFrontPortsElemType(v)
	return nil
}

var enumValues_DeviceTypeFrontPortsElemType = []interface{}{
	"8p8c",
	"8p6c",
	"8p4c",
	"8p2c",
	"6p6c",
	"6p4c",
	"6p2c",
	"4p4c",
	"4p2c",
	"gg45",
	"tera-4p",
	"tera-2p",
	"tera-1p",
	"110-punch",
	"bnc",
	"f",
	"n",
	"mrj21",
	"fc",
	"lc",
	"lc-pc",
	"lc-upc",
	"lc-apc",
	"lsh",
	"lsh-pc",
	"lsh-upc",
	"lsh-apc",
	"lx5",
	"lx5-pc",
	"lx5-upc",
	"lx5-apc",
	"mpo",
	"mtrj",
	"sc",
	"sc-pc",
	"sc-upc",
	"sc-apc",
	"st",
	"cs",
	"sn",
	"sma-905",
	"sma-906",
	"urm-p2",
	"urm-p4",
	"urm-p8",
	"splice",
	"other",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeDeviceBaysElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeDeviceBaysElem: required")
	}
	type Plain DeviceTypeDeviceBaysElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeDeviceBaysElem(plain)
	return nil
}

var enumValues_DeviceTypeConsolePortsElemType = []interface{}{
	"de-9",
	"db-25",
	"rj-11",
	"rj-12",
	"rj-45",
	"mini-din-8",
	"usb-a",
	"usb-b",
	"usb-c",
	"usb-mini-a",
	"usb-mini-b",
	"usb-micro-a",
	"usb-micro-b",
	"usb-micro-ab",
	"other",
}

const DeviceTypeRearPortsElemTypeTera4P DeviceTypeRearPortsElemType = "tera-4p"
const DeviceTypeRearPortsElemTypeTera2P DeviceTypeRearPortsElemType = "tera-2p"
const DeviceTypeRearPortsElemTypeTera1P DeviceTypeRearPortsElemType = "tera-1p"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeConsoleServerPortsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeConsoleServerPortsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypeConsoleServerPortsElem: required")
	}
	type Plain DeviceTypeConsoleServerPortsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeConsoleServerPortsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeConsoleServerPortsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeConsoleServerPortsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeConsoleServerPortsElemType, v)
	}
	*j = DeviceTypeConsoleServerPortsElemType(v)
	return nil
}

var enumValues_DeviceTypeConsoleServerPortsElemType = []interface{}{
	"de-9",
	"db-25",
	"rj-11",
	"rj-12",
	"rj-45",
	"mini-din-8",
	"usb-a",
	"usb-b",
	"usb-c",
	"usb-mini-a",
	"usb-mini-b",
	"usb-micro-a",
	"usb-micro-b",
	"usb-micro-ab",
	"other",
}

const DeviceTypeRearPortsElemTypeN DeviceTypeRearPortsElemType = "n"
const DeviceTypeRearPortsElemTypeMrj21 DeviceTypeRearPortsElemType = "mrj21"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeConsolePortsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeConsolePortsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypeConsolePortsElem: required")
	}
	type Plain DeviceTypeConsolePortsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeConsolePortsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeInventoryItemsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeInventoryItemsElem: required")
	}
	type Plain DeviceTypeInventoryItemsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeInventoryItemsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeModuleBaysElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeModuleBaysElem: required")
	}
	type Plain DeviceTypeModuleBaysElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeModuleBaysElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypePowerPortsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypePowerPortsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypePowerPortsElemType, v)
	}
	*j = DeviceTypePowerPortsElemType(v)
	return nil
}

var enumValues_DeviceTypePowerPortsElemType = []interface{}{
	"iec-60320-c6",
	"iec-60320-c8",
	"iec-60320-c14",
	"iec-60320-c16",
	"iec-60320-c20",
	"iec-60320-c22",
	"iec-60309-p-n-e-4h",
	"iec-60309-p-n-e-6h",
	"iec-60309-p-n-e-9h",
	"iec-60309-2p-e-4h",
	"iec-60309-2p-e-6h",
	"iec-60309-2p-e-9h",
	"iec-60309-3p-e-4h",
	"iec-60309-3p-e-6h",
	"iec-60309-3p-e-9h",
	"iec-60309-3p-n-e-4h",
	"iec-60309-3p-n-e-6h",
	"iec-60309-3p-n-e-9h",
	"iec-60906-1",
	"nbr-14136-10a",
	"nbr-14136-20a",
	"nema-1-15p",
	"nema-5-15p",
	"nema-5-20p",
	"nema-5-30p",
	"nema-5-50p",
	"nema-6-15p",
	"nema-6-20p",
	"nema-6-30p",
	"nema-6-50p",
	"nema-10-30p",
	"nema-10-50p",
	"nema-14-20p",
	"nema-14-30p",
	"nema-14-50p",
	"nema-14-60p",
	"nema-15-15p",
	"nema-15-20p",
	"nema-15-30p",
	"nema-15-50p",
	"nema-15-60p",
	"nema-l1-15p",
	"nema-l5-15p",
	"nema-l5-20p",
	"nema-l5-30p",
	"nema-l5-50p",
	"nema-l6-15p",
	"nema-l6-20p",
	"nema-l6-30p",
	"nema-l6-50p",
	"nema-l10-30p",
	"nema-l14-20p",
	"nema-l14-30p",
	"nema-l14-50p",
	"nema-l14-60p",
	"nema-l15-20p",
	"nema-l15-30p",
	"nema-l15-50p",
	"nema-l15-60p",
	"nema-l21-20p",
	"nema-l21-30p",
	"nema-l22-30p",
	"cs6361c",
	"cs6365c",
	"cs8165c",
	"cs8265c",
	"cs8365c",
	"cs8465c",
	"ita-c",
	"ita-e",
	"ita-f",
	"ita-ef",
	"ita-g",
	"ita-h",
	"ita-i",
	"ita-j",
	"ita-k",
	"ita-l",
	"ita-m",
	"ita-n",
	"ita-o",
	"usb-a",
	"usb-b",
	"usb-c",
	"usb-mini-a",
	"usb-mini-b",
	"usb-micro-a",
	"usb-micro-b",
	"usb-micro-ab",
	"usb-3-b",
	"usb-3-micro-b",
	"dc-terminal",
	"saf-d-grid",
	"neutrik-powercon-20",
	"neutrik-powercon-32",
	"neutrik-powercon-true1",
	"neutrik-powercon-true1-top",
	"ubiquiti-smartpower",
	"hardwired",
	"other",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypePowerOutletsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypePowerOutletsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypePowerOutletsElem: required")
	}
	type Plain DeviceTypePowerOutletsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypePowerOutletsElem(plain)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypePowerOutletsElemFeedLeg) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypePowerOutletsElemFeedLeg {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypePowerOutletsElemFeedLeg, v)
	}
	*j = DeviceTypePowerOutletsElemFeedLeg(v)
	return nil
}

const DeviceTypeRearPortsElemTypeLshUpc DeviceTypeRearPortsElemType = "lsh-upc"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypePowerOutletsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypePowerOutletsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypePowerOutletsElemType, v)
	}
	*j = DeviceTypePowerOutletsElemType(v)
	return nil
}

const DeviceTypeRearPortsElemTypeLx5Pc DeviceTypeRearPortsElemType = "lx5-pc"

var enumValues_DeviceTypePowerOutletsElemType = []interface{}{
	"iec-60320-c5",
	"iec-60320-c7",
	"iec-60320-c13",
	"iec-60320-c15",
	"iec-60320-c19",
	"iec-60320-c21",
	"iec-60309-p-n-e-4h",
	"iec-60309-p-n-e-6h",
	"iec-60309-p-n-e-9h",
	"iec-60309-2p-e-4h",
	"iec-60309-2p-e-6h",
	"iec-60309-2p-e-9h",
	"iec-60309-3p-e-4h",
	"iec-60309-3p-e-6h",
	"iec-60309-3p-e-9h",
	"iec-60309-3p-n-e-4h",
	"iec-60309-3p-n-e-6h",
	"iec-60309-3p-n-e-9h",
	"iec-60906-1",
	"nbr-14136-10a",
	"nbr-14136-20a",
	"nema-1-15r",
	"nema-5-15r",
	"nema-5-20r",
	"nema-5-30r",
	"nema-5-50r",
	"nema-6-15r",
	"nema-6-20r",
	"nema-6-30r",
	"nema-6-50r",
	"nema-10-30r",
	"nema-10-50r",
	"nema-14-20r",
	"nema-14-30r",
	"nema-14-50r",
	"nema-14-60r",
	"nema-15-15r",
	"nema-15-20r",
	"nema-15-30r",
	"nema-15-50r",
	"nema-15-60r",
	"nema-l1-15r",
	"nema-l5-15r",
	"nema-l5-20r",
	"nema-l5-30r",
	"nema-l5-50r",
	"nema-l6-15r",
	"nema-l6-20r",
	"nema-l6-30r",
	"nema-l6-50r",
	"nema-l10-30r",
	"nema-l14-20r",
	"nema-l14-30r",
	"nema-l14-50r",
	"nema-l14-60r",
	"nema-l15-20r",
	"nema-l15-30r",
	"nema-l15-50r",
	"nema-l15-60r",
	"nema-l21-20r",
	"nema-l21-30r",
	"nema-l22-30r",
	"CS6360C",
	"CS6364C",
	"CS8164C",
	"CS8264C",
	"CS8364C",
	"CS8464C",
	"ita-e",
	"ita-f",
	"ita-g",
	"ita-h",
	"ita-i",
	"ita-j",
	"ita-k",
	"ita-l",
	"ita-m",
	"ita-n",
	"ita-o",
	"ita-multistandard",
	"usb-a",
	"usb-micro-b",
	"usb-c",
	"dc-terminal",
	"hdot-cx",
	"saf-d-grid",
	"neutrik-powercon-20a",
	"neutrik-powercon-32a",
	"neutrik-powercon-true1",
	"neutrik-powercon-true1-top",
	"ubiquiti-smartpower",
	"hardwired",
	"other",
}

const DeviceTypeRearPortsElemTypeLx5Upc DeviceTypeRearPortsElemType = "lx5-upc"
const DeviceTypeRearPortsElemTypeLx5Apc DeviceTypeRearPortsElemType = "lx5-apc"
const DeviceTypeRearPortsElemTypeMpo DeviceTypeRearPortsElemType = "mpo"
const DeviceTypeRearPortsElemTypeMtrj DeviceTypeRearPortsElemType = "mtrj"
const DeviceTypeRearPortsElemTypeSc DeviceTypeRearPortsElemType = "sc"
const DeviceTypeRearPortsElemTypeScPc DeviceTypeRearPortsElemType = "sc-pc"
const DeviceTypeRearPortsElemTypeScUpc DeviceTypeRearPortsElemType = "sc-upc"
const DeviceTypeRearPortsElemTypeScApc DeviceTypeRearPortsElemType = "sc-apc"
const DeviceTypeRearPortsElemTypeSt DeviceTypeRearPortsElemType = "st"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeConsolePortsElemType) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeConsolePortsElemType {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeConsolePortsElemType, v)
	}
	*j = DeviceTypeConsolePortsElemType(v)
	return nil
}

const DeviceTypeRearPortsElemTypeSn DeviceTypeRearPortsElemType = "sn"
const DeviceTypeRearPortsElemTypeSma905 DeviceTypeRearPortsElemType = "sma-905"
const DeviceTypeRearPortsElemTypeSma906 DeviceTypeRearPortsElemType = "sma-906"
const DeviceTypeRearPortsElemTypeUrmP2 DeviceTypeRearPortsElemType = "urm-p2"
const DeviceTypeRearPortsElemTypeUrmP4 DeviceTypeRearPortsElemType = "urm-p4"
const DeviceTypeRearPortsElemTypeUrmP8 DeviceTypeRearPortsElemType = "urm-p8"
const DeviceTypeRearPortsElemTypeSplice DeviceTypeRearPortsElemType = "splice"
const DeviceTypeRearPortsElemTypeOther DeviceTypeRearPortsElemType = "other"

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeAirflow) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeAirflow {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeAirflow, v)
	}
	*j = DeviceTypeAirflow(v)
	return nil
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeRearPortsElem) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in DeviceTypeRearPortsElem: required")
	}
	if v, ok := raw["type"]; !ok || v == nil {
		return fmt.Errorf("field type in DeviceTypeRearPortsElem: required")
	}
	type Plain DeviceTypeRearPortsElem
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceTypeRearPortsElem(plain)
	return nil
}

type DeviceTypeSubdeviceRole string

var enumValues_DeviceTypeSubdeviceRole = []interface{}{
	"parent",
	"child",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeSubdeviceRole) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeSubdeviceRole {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeSubdeviceRole, v)
	}
	*j = DeviceTypeSubdeviceRole(v)
	return nil
}

const DeviceTypeSubdeviceRoleParent DeviceTypeSubdeviceRole = "parent"
const DeviceTypeSubdeviceRoleChild DeviceTypeSubdeviceRole = "child"

type DeviceTypeWeightUnit string

var enumValues_DeviceTypeWeightUnit = []interface{}{
	"kg",
	"g",
	"lb",
	"oz",
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *DeviceTypeWeightUnit) UnmarshalJSON(b []byte) error {
	var v string
	if err := json.Unmarshal(b, &v); err != nil {
		return err
	}
	var ok bool
	for _, expected := range enumValues_DeviceTypeWeightUnit {
		if reflect.DeepEqual(v, expected) {
			ok = true
			break
		}
	}
	if !ok {
		return fmt.Errorf("invalid value (expected one of %#v): %#v", enumValues_DeviceTypeWeightUnit, v)
	}
	*j = DeviceTypeWeightUnit(v)
	return nil
}

const DeviceTypeWeightUnitKg DeviceTypeWeightUnit = "kg"
const DeviceTypeWeightUnitG DeviceTypeWeightUnit = "g"
const DeviceTypeWeightUnitLb DeviceTypeWeightUnit = "lb"
const DeviceTypeWeightUnitOz DeviceTypeWeightUnit = "oz"

var enumValues_DeviceTypeAirflow = []interface{}{
	"front-to-rear",
	"rear-to-front",
	"left-to-right",
	"right-to-left",
	"side-to-rear",
	"passive",
	"mixed",
}

// UnmarshalYAML implements json.Unmarshaler.
func (j *DeviceType) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["manufacturer"]; !ok || v == nil {
		return fmt.Errorf("field manufacturer in DeviceType: required")
	}
	if v, ok := raw["model"]; !ok || v == nil {
		return fmt.Errorf("field model in DeviceType: required")
	}
	if v, ok := raw["slug"]; !ok || v == nil {
		return fmt.Errorf("field slug in DeviceType: required")
	}
	type Plain DeviceType
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceType(plain)
	return nil
}

// UnmarshalJSON implements yaml.Unmarshaler.
func (j *DeviceType) UnmarshalYAML(b []byte) error {
	var raw map[string]interface{}
	if err := yaml.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["manufacturer"]; !ok || v == nil {
		return fmt.Errorf("field manufacturer in DeviceType: required")
	}
	if v, ok := raw["model"]; !ok || v == nil {
		return fmt.Errorf("field model in DeviceType: required")
	}
	if v, ok := raw["slug"]; !ok || v == nil {
		return fmt.Errorf("field slug in DeviceType: required")
	}
	type Plain DeviceType
	var plain Plain
	if err := yaml.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = DeviceType(plain)
	return nil
}

func UnmarshalDeviceType(path string) (DeviceType, error) {
	deviceType := DeviceType{}

	// unmarshal the file into a devicetype
	data, err := os.ReadFile(path)
	if err != nil {
		return deviceType, err
	}

	err = yaml.Unmarshal(data, &deviceType)
	if err != nil {
		return deviceType, err
	}

	return deviceType, nil
}
