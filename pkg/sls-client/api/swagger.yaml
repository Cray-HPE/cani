openapi: 3.0.0
info:
  title: System Layout Service
  description: "System Layout Service (SLS) holds information on the complete, designed\
    \ system.\nSLS gets this information from an input file on the system.\nBesides\
    \ information like what hardware should be present in a system, SLS\nalso stores\
    \ information about what network connections exist and what power\nconnections\
    \ exist. SLS details the physical locations of network hardware,\ncompute nodes\
    \ and cabinets. Further, it stores information about the network,\nsuch as which\
    \ port on which switch should be connected to each compute node.\nThe API allows\
    \ updating this information as well.\n\n\nNote that SLS is not responsible for\
    \ verifying that the system is set up\ncorrectly. It only lets the Shasta system\
    \ know what the system should be\nconfigured with. SLS does not store the details\
    \ of the actual\nhardware like hardware identifiers. Instead it stores a generalized\
    \ abstraction\nof the system that other services may use. SLS thus does not need\
    \ to change as\nhardware within the system is replaced. Interaction with SLS is\
    \ required if\nthe system setup changes – for example, if system cabling is altered\
    \ or during \ninstallation, expansion, or reduction. SLS does not interact with\
    \ the hardware.\n\nEach object in SLS has the following basic properties:\n* Parent\
    \ – Each object in SLS has a parent object except the system root (s0).\n* Children\
    \ – Objects may have children.\n* xname – Every object has an xname – a unique\
    \ identifier for that object.\n* Type – a hardware type like \"comptype_ncard\"\
    , \"comptype_cabinet\".\n* Class – kind of hardware like \"River\" or \"Mountain\"\
    \n* TypeString – a human readable type like \"Cabinet\"\n\nSome objects may have\
    \ additional properties depending on their type. For example, additional\nproperties\
    \ for cabinets include \"Network\", \"IP6Prefix\", \"IP4Base\", \"MACprefix\"\
    \ etc.\n\n\n## Resources\n\n### /hardware\n\nCreate hardware entries in SLS. This\
    \ resource can be used when you add new\ncomponents or expand your system. Interaction\
    \ with this resource is not required if a\ncomponent is removed or replaced.\n\
    \n### /hardware/{xname}\n\nRetrieve, update, or delete information about specific\
    \ xnames.\n\n\n### /search/hardware\n\nUses HTTP query parameters to find hardware\
    \ entries with matching properties. Returns a\nJSON list of xnames. If multiple\
    \ query parameters are passed, any returned hardware must\nmatch all parameters.\n\
    \nFor example, a query string of \"?parent=x0\" would return a list of all children\
    \ of cabinet\nx0. A query string of \"?type=comptype_node\" would return a list\
    \ of all compute\nnodes.\n\nValid query parameters are: xname, parent, class,\
    \ type, power_connector, node_nics, networks, peers.\n\n\n### /search/networks\n\
    \nUses HTTP query parameters to find network entries with matching properties.\n\
    \n### /networks\n\nCreate new network objects or retrieve networks available in\
    \ the system.\n\n### /networks/{network}\n\nRetrieve, update, or delete information\
    \ about specific networks.\n\n### /dumpstate\n\nDumps the current database state\
    \ of the service. This may be useful\nwhen you are backing up the system or planning\
    \ a reinstall of the system.\n\n### /loadstate\n\nUpload and overwrite the current\
    \ database with the contents of the posted data. The posted\ndata should be a\
    \ state dump from /dumpstate. This may be useful to restore the SLS database\n\
    after you have reinstalled the system.\n\n\n## Workflows\n\n### Backup and Restore\
    \ the SLS Database for Reinstallation\n\n#### GET /dumpstate\n\nPerform a dump\
    \ of the current state of the SLS data. This should be done before reinstalling\n\
    the system. The database dump is a JSON blob in an SLS-specific format.\n\n####\
    \ POST /loadstate\n\nReimport the dump from /dumpstate and restore the SLS database\
    \ after reinstall.\n    \n### Expand System\n\n#### POST /hardware\n\nAdd the\
    \ new hardware objects.\n\n#### GET /hardware/{xname}\n\nReview hardware properties\
    \ of the xname from the JSON array.\n\n### Remove Hardware\n\n#### DELETE /hardware\n\
    \nRemove hardware from SLS\n\n### Modify Hardware Properties\n\n#### PATCH /hardware\n\
    \nModify hardware properties in SLS. Only additional properties can be modified.\
    \ Basic properties\nlike xname, parent, children, type, class, typestring cannot\
    \ be modified. \n             \n"
  license:
    name: Cray Proprietary
  version: "0.1"
servers:
- url: https://api-gw-service-nmn.local/apis/sls/v1
  description: The production SLS API server. Access from outside the mesh.
- url: http://cray-sls
  description: Access from inside the mesh.
tags:
- name: hardware
  description: Endpoints which request information about hardware
- name: search
  description: Endpoints having to do with searching for hardware
- name: dumpstate
  description: Endpoints that handle debug or state management
- name: misc
  description: Other endpoints
paths:
  /health:
    get:
      tags:
      - misc
      summary: Query the health of the service
      description: |-
        The `health` resource returns health information about the SLS service and its dependencies.  This actively checks the connection between  SLS and the following:
          * Vault
          * Database


        This is primarily intended as a diagnostic tool to investigate the functioning of the SLS service.
      responses:
        "200":
          description: "[OK](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.1)\
            \ Network API call success"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "405":
          description: "Operation Not Permitted.  For /health, only GET operations\
            \ are allowed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
  /liveness:
    get:
      tags:
      - misc
      - cli_ignore
      summary: Kubernetes liveness endpoint to monitor service health
      description: "The `liveness` resource works in conjunction with the Kubernetes\
        \ liveness probe to determine when the service is no longer responding to\
        \ requests.  Too many failures of the liveness probe will result in the service\
        \ being shut down and restarted.  \n\nThis is primarily an endpoint for the\
        \ automated Kubernetes system."
      responses:
        "204":
          description: "[No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)\
            \ Network API call success"
        "405":
          description: "Operation Not Permitted.  For /liveness, only GET operations\
            \ are allowed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
  /readiness:
    get:
      tags:
      - misc
      - cli_ignore
      summary: Kubernetes readiness endpoint to monitor service health
      description: |-
        The `readiness` resource works in conjunction with the Kubernetes readiness probe to determine when the service is no longer healthy and able to respond correctly to requests.  Too many failures of the readiness probe will result in the traffic being routed away from this service and eventually the service will be shut down and restarted if in an unready state for too long.

        This is primarily an endpoint for the automated Kubernetes system.
      responses:
        "204":
          description: "[No Content](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.2.5)\
            \ Network API call success"
        "405":
          description: "Operation Not Permitted.  For /readiness, only GET operations\
            \ are allowed."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Problem7807'
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem7807'
      x-private: true
  /version:
    get:
      tags:
      - misc
      summary: Retrieve versioning information on the information in SLS
      description: "Retrieve the current version of the SLS mapping. Information returned\
        \ is a JSON array with two keys:\n* Counter: A monotonically increasing counter.\
        \ This counter is incremented every time\n  a change is made to the map stored\
        \ in SLS. This shall be 0 if no data is uploaded to SLS\n* LastUpdated: An\
        \ ISO 8601 datetime representing the time of the last change to SLS. \n  This\
        \ shall be set to the Unix Epoch if no data has ever been stored in SLS."
      responses:
        "200":
          description: Information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionResponse'
        "500":
          description: "An error occurred, see text of response for more information"
  /hardware:
    get:
      tags:
      - hardware
      summary: Retrieve a list of hardware in the system.
      description: Retrieve a JSON list of the networks available in the system.  Return
        value is an array of hardware objects representing all the hardware in the
        system.
      responses:
        "200":
          description: Request successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hardware'
                x-content-type: application/json
    post:
      tags:
      - hardware
      summary: Create a new hardware object
      description: Create a new hardware object.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hardware_post'
      responses:
        "201":
          description: Request successful. The item was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hardware'
        "400":
          description: Bad request. See body for details
        "409":
          description: Conflict. The requested resource already exists
        "500":
          description: Unexpected error. See body for details
  /hardware/{xname}:
    get:
      tags:
      - hardware
      summary: Retrieve information about the requested xname
      description: Retrieve information about the requested xname. All properties
        are returned as a JSON array.
      parameters:
      - name: xname
        in: path
        description: The xname to look up or alter.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/xname'
      responses:
        "200":
          description: Request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hardware'
    put:
      tags:
      - hardware
      summary: Update a hardware object
      description: "Update a hardware object.  Parent objects will be created, if\
        \ possible."
      parameters:
      - name: xname
        in: path
        description: The xname to look up or alter.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/xname'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/hardware_put'
      responses:
        "200":
          description: Request successful. The item was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hardware'
        "201":
          description: Request successful. The item was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hardware'
        "400":
          description: Bad request. See body for details
        "500":
          description: Unexpected error. See body for details
    delete:
      tags:
      - hardware
      summary: Delete the xname
      description: "Delete the requested xname from SLS. Note that if you delete a\
        \ parent object, then the children are also deleted from SLS. If the child\
        \ object happens to be a parent, then the deletion can cascade down levels.\
        \ If you delete a child object, it does not affect the parent."
      parameters:
      - name: xname
        in: path
        description: The xname to look up or alter.
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/xname'
      responses:
        "200":
          description: OK. xname removed
        "404":
          description: Xname not found
        "409":
          description: Conflict. The xname probably still had children.
  /search/hardware:
    get:
      tags:
      - search
      summary: Search for nodes matching a set of criteria
      description: Search for nodes matching a set of criteria. Any of the properties
        of any entry in the database may be used as search keys.
      parameters:
      - name: xname
        in: query
        description: Matches the specified xname
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/xname'
      - name: parent
        in: query
        description: Matches all objects that are direct children of the given xname
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/xname'
      - name: class
        in: query
        description: Matches all objects of the given class
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/hardware_class'
      - name: type
        in: query
        description: Matches all objects of the given type
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/hardware_type'
      - name: power_connector
        in: query
        description: Matches all objects with the given xname in their power_connector
          property
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/xname'
      - name: object
        in: query
        description: Matches all objects with the given xname in their object property.
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/xname'
      - name: node_nics
        in: query
        description: Matches all objects with the given xname in their node_nics property
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/xname'
      - name: networks
        in: query
        description: Matches all objects with the given xname in their networks property
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: peers
        in: query
        description: Matches all objects with the given xname in their peers property
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/xname'
      responses:
        "200":
          description: Search completed successfully.  The return is an array of xnames
            that match the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/hardware'
                x-content-type: application/json
        "400":
          description: Bad request. See body for details.
        "404":
          description: Search did not find any matching hardware.
        "500":
          description: An unexpected error occurred. See body for details.
  /search/networks:
    get:
      tags:
      - search
      summary: Perform a search for networks matching a set of criteria.
      description: Perform a search for networks matching a set of criteria.  Any
        of the properties of any entry in the database may be used as search keys.
      parameters:
      - name: name
        in: query
        description: Matches the specified network name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: full_name
        in: query
        description: Matches the specified network full name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: Matches the specified network type
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/network_type'
      - name: ip_address
        in: query
        description: Matches all networks that could contain the specified IP address
          in their IP ranges
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/network_ip_range'
      responses:
        "404":
          description: Search did not find any matching networks.
        "200":
          description: Search completed successfully.  Return is an array of networks
            matching the search criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/network'
                x-content-type: application/json
  /networks:
    get:
      tags:
      - network
      summary: Retrieve a list of networks in the system
      description: |
        Retrieve a JSON list of the networks available in the system.  Return value
        is an array of strings with each string representing the name field of the network object.
      responses:
        "200":
          description: Request successful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/network'
                x-content-type: application/json
    post:
      tags:
      - network
      - cli_from_file
      summary: Create a new network
      description: Create a new network. Must include all fields at the time of upload.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/network'
      responses:
        "201":
          description: Network created
        "400":
          description: Bad request. See body for details
        "409":
          description: Network with that name already exists
  /networks/{network}:
    get:
      tags:
      - network
      summary: Retrieve a network item
      description: Retrieve the specific network.
      parameters:
      - name: network
        in: path
        description: The network to look up or alter.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network'
        "404":
          description: No network item found with requested name
    put:
      tags:
      - network
      - cli_from_file
      summary: Update a network object
      description: "Update a network object. Parent objects will be created, if possible."
      parameters:
      - name: network
        in: path
        description: The network to look up or alter.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/network'
      responses:
        "200":
          description: Request successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/network'
        "400":
          description: Bad request. See body for details
        "409":
          description: Conflict. The requested resource already exists
    delete:
      tags:
      - network
      summary: Delete the named network
      description: Delete the specific network from SLS.
      parameters:
      - name: network
        in: path
        description: The network to look up or alter.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK. Network removed
        "404":
          description: Network not found
  /dumpstate:
    get:
      tags:
      - dumpstate
      summary: Retrieve a dump of current service state
      description: Get a dump of current service state. The format of this is implementation-specific.
      responses:
        "200":
          description: State dumped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slsState'
        "500":
          description: An error occurred in state dumping.  See body for details
  /loadstate:
    post:
      tags:
      - dumpstate
      - cli_from_file
      summary: Load services state and overwrite current service state
      description: '"Load services state and overwrite current service state. The
        format of the upload is implementation specific."'
      requestBody:
        description: "A JSON dictionary, where each item has a key equal to the xname\
          \ of the object it contains.  Each value is a JSON representation of an\
          \ object SLS should maintain."
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/loadstate_body'
      responses:
        "201":
          description: State loaded successfully
        "400":
          description: Loading state failed.  See body for error
components:
  schemas:
    versionResponse:
      type: object
      properties:
        counter:
          type: integer
          description: A monotonically increasing counter that increases every time
            a change is made to SLS
        last_updated:
          type: string
          description: An ISO-8601 datetime representing when a change was last made
            to SLS
          format: date-time
      example:
        last_updated: 2000-01-23T04:56:07.000+00:00
        counter: 0
    network:
      required:
      - ExtraProperties
      - FullName
      - IPRanges
      - Name
      - Type
      type: object
      properties:
        Name:
          pattern: "[^ ]+"
          type: string
          example: HSN
        FullName:
          type: string
          example: High Speed Network
        IPRanges:
          type: array
          items:
            $ref: '#/components/schemas/network_ip_range'
        Type:
          $ref: '#/components/schemas/network_type'
        LastUpdated:
          $ref: '#/components/schemas/last_updated'
        LastUpdatedTime:
          $ref: '#/components/schemas/last_updated_time'
        ExtraProperties:
          $ref: '#/components/schemas/network_extra_properties'
      example:
        Type: slingshot10
        FullName: High Speed Network
        ExtraProperties:
          Comment: Comment
          Subnets:
          - DHCPEnd: DHCPEnd
            IPReservations:
            - Comment: Comment
              Aliases:
              - rgw-vip.local
              - rgw-vip.local
              IPAddress: IPAddress
              Name: S3
            - Comment: Comment
              Aliases:
              - rgw-vip.local
              - rgw-vip.local
              IPAddress: IPAddress
              Name: S3
            Comment: Comment
            Gateway: Gateway
            FullName: Cabinet 1008 HSN
            CIDR: 10.253.0.0/16
            VlanID: 60
            DHCPStart: DHCPStart
            Name: cabinet_1008_hsn"
          - DHCPEnd: DHCPEnd
            IPReservations:
            - Comment: Comment
              Aliases:
              - rgw-vip.local
              - rgw-vip.local
              IPAddress: IPAddress
              Name: S3
            - Comment: Comment
              Aliases:
              - rgw-vip.local
              - rgw-vip.local
              IPAddress: IPAddress
              Name: S3
            Comment: Comment
            Gateway: Gateway
            FullName: Cabinet 1008 HSN
            CIDR: 10.253.0.0/16
            VlanID: 60
            DHCPStart: DHCPStart
            Name: cabinet_1008_hsn"
          VlanRange:
          - 6
          - 6
          CIDR: 10.253.0.0/16
          MTU: 9000
        LastUpdatedTime: LastUpdatedTime
        LastUpdated: 0
        IPRanges:
        - IPRanges
        - IPRanges
        Name: HSN
    network_ip_range:
      pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}|[0-9a-fA-F:]+/[0-9]{1,3}"
      type: string
    network_type:
      pattern: slingshot10|slingshot11|cassini|ethernet|OPA|infiniband|mixed
      type: string
      example: slingshot10
    network_extra_properties:
      required:
      - CIDR
      - MTU
      - Subnets
      - VlanRange
      type: object
      properties:
        CIDR:
          pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}|[0-9a-fA-F:]+/[0-9]{1,3}"
          type: string
          example: 10.253.0.0/16
        VlanRange:
          type: array
          items:
            type: integer
        MTU:
          type: integer
          example: 9000
        Subnets:
          type: array
          items:
            $ref: '#/components/schemas/network_ipv4_subnet'
        Comment:
          type: string
      example:
        Comment: Comment
        Subnets:
        - DHCPEnd: DHCPEnd
          IPReservations:
          - Comment: Comment
            Aliases:
            - rgw-vip.local
            - rgw-vip.local
            IPAddress: IPAddress
            Name: S3
          - Comment: Comment
            Aliases:
            - rgw-vip.local
            - rgw-vip.local
            IPAddress: IPAddress
            Name: S3
          Comment: Comment
          Gateway: Gateway
          FullName: Cabinet 1008 HSN
          CIDR: 10.253.0.0/16
          VlanID: 60
          DHCPStart: DHCPStart
          Name: cabinet_1008_hsn"
        - DHCPEnd: DHCPEnd
          IPReservations:
          - Comment: Comment
            Aliases:
            - rgw-vip.local
            - rgw-vip.local
            IPAddress: IPAddress
            Name: S3
          - Comment: Comment
            Aliases:
            - rgw-vip.local
            - rgw-vip.local
            IPAddress: IPAddress
            Name: S3
          Comment: Comment
          Gateway: Gateway
          FullName: Cabinet 1008 HSN
          CIDR: 10.253.0.0/16
          VlanID: 60
          DHCPStart: DHCPStart
          Name: cabinet_1008_hsn"
        VlanRange:
        - 6
        - 6
        CIDR: 10.253.0.0/16
        MTU: 9000
    network_ipv4_subnet:
      required:
      - CIDR
      - FullName
      - Gateway
      - Name
      - VlanID
      type: object
      properties:
        Name:
          pattern: "[^ ]+"
          type: string
          example: cabinet_1008_hsn"
        FullName:
          type: string
          example: Cabinet 1008 HSN
        CIDR:
          pattern: "[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}|[0-9a-fA-F:]+/[0-9]{1,3}"
          type: string
          example: 10.253.0.0/16
        VlanID:
          type: integer
          example: 60
        Gateway:
          type: string
          format: ipv4
        DHCPStart:
          type: string
          format: ipv4
        DHCPEnd:
          type: string
          format: ipv4
        IPReservations:
          type: array
          items:
            $ref: '#/components/schemas/network_ip_reservation'
        Comment:
          type: string
      example:
        DHCPEnd: DHCPEnd
        IPReservations:
        - Comment: Comment
          Aliases:
          - rgw-vip.local
          - rgw-vip.local
          IPAddress: IPAddress
          Name: S3
        - Comment: Comment
          Aliases:
          - rgw-vip.local
          - rgw-vip.local
          IPAddress: IPAddress
          Name: S3
        Comment: Comment
        Gateway: Gateway
        FullName: Cabinet 1008 HSN
        CIDR: 10.253.0.0/16
        VlanID: 60
        DHCPStart: DHCPStart
        Name: cabinet_1008_hsn"
    network_ip_reservation:
      required:
      - IPAddress
      - Name
      type: object
      properties:
        IPAddress:
          type: string
          format: ipv4
        Name:
          pattern: "[^ ]+"
          type: string
          example: S3
        Aliases:
          type: array
          items:
            type: string
            example: rgw-vip.local
        Comment:
          type: string
      example:
        Comment: Comment
        Aliases:
        - rgw-vip.local
        - rgw-vip.local
        IPAddress: IPAddress
        Name: S3
    xname:
      pattern: "^s0$|^d([0-9]+)$|^x([0-9]{1,4})d([0-1])$|^x([0-9]{1,4})m([0-3])$|^x([0-9]{1,4})m([0-3])p([0-7])$|^x([0-9]{1,4})m([0-3])i([0-3])$|^x([0-9]{1,4})m([0-3])p([0-7])j([1-9][0-9]*)$|^x([0-9]{1,4})e([0-1])$|^x([0-9]{1,4})$|^x([0-9]{1,4})b([0])$|^x([0-9]{1,4})c([0-7])$|^x([0-9]{1,4})c([0-7])b([0])$|^x([0-9]{1,4})c([0-7])f([0])$|^x([0-9]{1,4})c([0-7])t([0-2])$|^x([0-9]{1,4})c([0-7])s([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)f([0])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)e([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)j([1-2])$|^x([0-9]{1,4})c([0-7])r([0-9]+)e([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)h([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)a([0-7])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)d([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)p([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)$|^x([0-9]{1,4})c([0-7])r([0-9]+)f([01])$|^x([0-9]{1,4})c([0-7])r([0-9]+)t([0-9]+)f([0-1])$|^x([0-9]{1,4})c([0-7])r([0-9]+)b([0-9]+)$|^x([0-9]{1,4})c([0-7])r([0-9]+)b([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)a([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)j([1-9][0-9]*)$|^x([0-9]{1,4})c([0-7])r([0-9]+)j([1-9][0-9]*)p([012])$|^x([0-9]{1,4})c([0-7])r([0-9]+)a([0-3])l([0-9]+)$|^x([0-9]{1,4})c([0-7])w([1-9][0-9]*)$|^x([0-9]{1,4})c([0-7])w([0-9]+)j([1-9][0-9]*)$"
      type: string
      description: The xname of this piece of hardware
      example: x0c0s0b0
    hardware_type:
      pattern: ^CDU$|^CabinetCDU$|^Cabinet$|^CabinetBMC$|^CabinetPDUController$|^CabinetPDU$|^CabinetPDUNic$|^CabinetPDUOutlet$|^Chassis$|^ChassisBMC$|^CMMRectifier$|^CMMFpga$|^CEC$|^ComputeModule$|^RouterModule$|^NodeBMC$|^NodeBMCNic$|^NodeEnclosure$|^NodePowerConnector$|^Node$|^Processor$|^NodeNIC$|^NodeHsnNIC$|^Memory$|^NodeAccel$|^NodeFpga$|^HSNAsic$|^RouterFpga$|^RouterTORFpga$|^RouterBMC$|^RouterBMCNic$|^HSNBoard$|^HSNLink$|^HSNConnector$|^HSNConnectorPort$|^MgmtSwitch$|^MgmtSwitchConnector$|^SMSBox$|^System$
      type: string
      description: The type of this piece of hardware.  This is an optional hint during
        upload; it will be ignored if it does not match the xname
      example: comptype_ncard
      enum:
      - comptype_cdu
      - comptype_cdu_mgmt_switch
      - comptype_cab_cdu
      - comptype_cabinet
      - comptype_cab_pdu_controller
      - comptype_cab_pdu
      - comptype_cab_pdu_nic
      - comptype_cab_pdu_outlet
      - comptype_cab_pdu_pwr_connector
      - comptype_chassis
      - comptype_chassis_bmc
      - comptype_cmm_rectifier
      - comptype_cmm_fpga
      - comptype_cec
      - comptype_compmod
      - comptype_rtrmod
      - comptype_ncard
      - comptype_bmc_nic
      - comptype_node_enclosure
      - comptype_compmod_power_connector
      - comptype_node
      - comptype_node_processor
      - comptype_node_nic
      - comptype_node_hsn_nic
      - comptype_dimm
      - comptype_node_accel
      - comptype_node_fpga
      - comptype_hsn_asic
      - comptype_rtr_fpga
      - comptype_rtr_tor_fpga
      - comptype_rtr_bmc
      - comptype_rtr_bmc_nic
      - comptype_hsn_board
      - comptype_hsn_link
      - comptype_hsn_connector
      - comptype_hsn_connector_port
      - comptype_mgmt_switch
      - comptype_mgmt_switch_connector
      - comptype_hl_switch
    hardware_type_string:
      type: string
      enum:
      - CDU
      - CDUMgmtSwitch
      - CabinetCDU
      - Cabinet
      - CabinetBMC
      - CabinetPDUController
      - CabinetPDU
      - CabinetPDUNic
      - CabinetPDUOutlet
      - CabinetPDUPowerConnector
      - Chassis
      - ChassisBMC
      - ChassisBMCNic
      - CMMRectifier
      - CMMFpga
      - CEC
      - ComputeModule
      - RouterModule
      - NodeBMC
      - NodeBMCNic
      - NodeEnclosure
      - NodeEnclosurePowerSupply
      - NodePowerConnector
      - Node
      - Processor
      - StorageGroup
      - Drive
      - NodeNic
      - NodeHsnNic
      - Memory
      - NodeAccel
      - NodeAccelRiser
      - NodeFpga
      - HSNAsic
      - RouterFpga
      - RouterTOR
      - RouterTORFpga
      - RouterBMC
      - RouterBMCNic
      - RouterPowerConnector
      - HSNBoard
      - HSNLink
      - HSNConnector
      - HSNConnectorPort
      - MgmtSwitch
      - MgmtHLSwitchEnclosure
      - MgmtHLSwitch
      - MgmtSwitchConnector
      - System
    hardware_class:
      type: string
      description: The hardware class.
      example: Mountain
      enum:
      - River
      - Mountain
      - Hill
    last_updated:
      type: integer
      description: The unix timestamp of the last time this entry was created or updated
      readOnly: true
    last_updated_time:
      type: string
      description: The human-readable time this object was last created or updated.
      readOnly: true
    hardware_put:
      required:
      - Class
      type: object
      properties:
        Class:
          $ref: '#/components/schemas/hardware_class'
        ExtraProperties:
          $ref: '#/components/schemas/hardware_extra_properties'
    hardware_post:
      required:
      - Class
      - Xname
      type: object
      properties:
        Xname:
          $ref: '#/components/schemas/xname'
        Class:
          $ref: '#/components/schemas/hardware_class'
        ExtraProperties:
          $ref: '#/components/schemas/hardware_extra_properties'
    hardware:
      required:
      - Class
      - Xname
      type: object
      properties:
        Parent:
          pattern: "^s0$|^d([0-9]+)$|^x([0-9]{1,4})d([0-1])$|^x([0-9]{1,4})m([0-3])$|^x([0-9]{1,4})m([0-3])p([0-7])$|^x([0-9]{1,4})m([0-3])i([0-3])$|^x([0-9]{1,4})m([0-3])p([0-7])j([1-9][0-9]*)$|^x([0-9]{1,4})e([0-1])$|^x([0-9]{1,4})$|^x([0-9]{1,4})b([0])$|^x([0-9]{1,4})c([0-7])$|^x([0-9]{1,4})c([0-7])b([0])$|^x([0-9]{1,4})c([0-7])f([0])$|^x([0-9]{1,4})c([0-7])t([0-2])$|^x([0-9]{1,4})c([0-7])s([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)f([0])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)e([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)j([1-2])$|^x([0-9]{1,4})c([0-7])r([0-9]+)e([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)h([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)a([0-7])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)d([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)p([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)$|^x([0-9]{1,4})c([0-7])r([0-9]+)f([01])$|^x([0-9]{1,4})c([0-7])r([0-9]+)t([0-9]+)f([0-1])$|^x([0-9]{1,4})c([0-7])r([0-9]+)b([0-9]+)$|^x([0-9]{1,4})c([0-7])r([0-9]+)b([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)a([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)j([1-9][0-9]*)$|^x([0-9]{1,4})c([0-7])r([0-9]+)j([1-9][0-9]*)p([012])$|^x([0-9]{1,4})c([0-7])r([0-9]+)a([0-3])l([0-9]+)$|^x([0-9]{1,4})c([0-7])w([1-9][0-9]*)$|^x([0-9]{1,4})c([0-7])w([0-9]+)j([1-9][0-9]*)$"
          type: string
          description: The xname of the parent of this piece of hardware
          readOnly: true
          example: x0c0s0
        Xname:
          $ref: '#/components/schemas/xname'
        Children:
          type: array
          readOnly: true
          items:
            pattern: "^s0$|^d([0-9]+)$|^x([0-9]{1,4})d([0-1])$|^x([0-9]{1,4})m([0-3])$|^x([0-9]{1,4})m([0-3])p([0-7])$|^x([0-9]{1,4})m([0-3])i([0-3])$|^x([0-9]{1,4})m([0-3])p([0-7])j([1-9][0-9]*)$|^x([0-9]{1,4})e([0-1])$|^x([0-9]{1,4})$|^x([0-9]{1,4})b([0])$|^x([0-9]{1,4})c([0-7])$|^x([0-9]{1,4})c([0-7])b([0])$|^x([0-9]{1,4})c([0-7])f([0])$|^x([0-9]{1,4})c([0-7])t([0-2])$|^x([0-9]{1,4})c([0-7])s([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)f([0])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)e([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)j([1-2])$|^x([0-9]{1,4})c([0-7])r([0-9]+)e([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)h([0-3])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)a([0-7])$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)d([0-9]+)$|^x([0-9]{1,4})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)p([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)$|^x([0-9]{1,4})c([0-7])r([0-9]+)f([01])$|^x([0-9]{1,4})c([0-7])r([0-9]+)t([0-9]+)f([0-1])$|^x([0-9]{1,4})c([0-7])r([0-9]+)b([0-9]+)$|^x([0-9]{1,4})c([0-7])r([0-9]+)b([0-9]+)i([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)a([0-3])$|^x([0-9]{1,4})c([0-7])r([0-9]+)j([1-9][0-9]*)$|^x([0-9]{1,4})c([0-7])r([0-9]+)j([1-9][0-9]*)p([012])$|^x([0-9]{1,4})c([0-7])r([0-9]+)a([0-3])l([0-9]+)$|^x([0-9]{1,4})c([0-7])w([1-9][0-9]*)$|^x([0-9]{1,4})c([0-7])w([0-9]+)j([1-9][0-9]*)$"
            type: string
            description: The xname of a child of this piece of hardware
            example: x0c0s0b0n0
        Type:
          $ref: '#/components/schemas/hardware_type'
        TypeString:
          $ref: '#/components/schemas/hardware_type_string'
        Class:
          $ref: '#/components/schemas/hardware_class'
        LastUpdated:
          $ref: '#/components/schemas/last_updated'
        LastUpdatedTime:
          $ref: '#/components/schemas/last_updated_time'
        ExtraProperties:
          $ref: '#/components/schemas/hardware_extra_properties'
      example:
        Type: comptype_ncard
        Parent: x0c0s0
        Xname: x0c0s0b0
        ExtraProperties: ""
        LastUpdatedTime: LastUpdatedTime
        Class: Mountain
        Children:
        - x0c0s0b0n0
        - x0c0s0b0n0
        LastUpdated: 0
        TypeString: CDU
    hardware_extra_properties_system:
      type: object
      properties:
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.id':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
    hardware_extra_properties_bmc_nic:
      required:
      - IP4addr
      - IP6addr
      - Password
      - Username
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        IP6addr:
          type: string
          description: "The ipv6 address that should be assigned to this BMC, or \"\
            DHCPv6\". If omitted, \"DHCPv6\" is assumed."
          example: DHCPv6
        IP4addr:
          type: string
          description: "The ipv4 address that should be assigned to this BMC, or \"\
            DHCPv4\".  If omitted, \"DHCPv4\" is assumed."
          example: 10.1.1.1
        Username:
          type: string
          description: The username that should be used to access the device (or be
            assigned to the device)
          example: user_name
        Password:
          type: string
          description: The password that should be used to access the device
          format: password
          example: vault://tok
    hardware_extra_properties_cab_pdu_nic:
      required:
      - Networks
      - Peers
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Networks:
          type: array
          description: An array of network names that this NIC is connected to
          items:
            $ref: '#/components/schemas/xname'
        Peers:
          type: array
          description: "An array of xnames this NIC is connected directly to.  These\
            \ ideally connector xnames, not switches"
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties_cab_pdu_pwr_connector:
      required:
      - PoweredBy
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        PoweredBy:
          $ref: '#/components/schemas/xname'
    hardware_extra_properties_cabinet:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Model:
          type: string
        Networks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/hardware_extra_properties_cabinet_networks'
        DHCPRelaySwitches:
          type: array
          items:
            type: string
    hardware_extra_properties_cabinet_networks:
      type: object
      properties:
        CIDR:
          type: string
        Gateway:
          type: string
        VLan:
          type: integer
        IPv6Prefix:
          type: string
        MACPrefix:
          type: string
    hardware_extra_properties_cdu_mgmt_switch:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Brand:
          type: string
        Model:
          type: string
        Aliases:
          type: array
          items:
            type: string
    hardware_extra_properties_chassis:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
    hardware_extra_properties_chassis_bmc:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Aliases:
          type: array
          items:
            type: string
    hardware_extra_properties_compmod:
      required:
      - PowerConnector
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        PowerConnector:
          type: array
          description: "An array of xnames, where each xname has type==*_pwr_connector.\
            \  Empty for Mountain switch cards"
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties_compmod_power_connector:
      required:
      - PoweredBy
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        PoweredBy:
          $ref: '#/components/schemas/xname'
    hardware_extra_properties_mgmt_hl_switch:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        IP6addr:
          type: string
        IP4addr:
          type: string
        Brand:
          type: string
        Model:
          type: string
        SNMPAuthPassword:
          type: string
        SNMPAuthProtocol:
          type: string
        SNMPPrivPassword:
          type: string
        SNMPPrivProtocol:
          type: string
        SNMPUsername:
          type: string
        Aliases:
          type: array
          items:
            type: string
    hardware_extra_properties_hsn_connector:
      required:
      - NodeNics
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        NodeNics:
          type: array
          description: An array of xnames that this connector is connected to.  All
            xnames should have type==comptype_hsn_connector_port
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties_mgmt_switch:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        IP6addr:
          type: string
        IP4addr:
          type: string
        Brand:
          type: string
        Model:
          type: string
        SNMPAuthPassword:
          type: string
        SNMPAuthProtocol:
          type: string
        SNMPPrivPassword:
          type: string
        SNMPPrivProtocol:
          type: string
        SNMPUsername:
          type: string
        Aliases:
          type: array
          items:
            type: string
    hardware_extra_properties_mgmt_switch_connector:
      required:
      - NodeNics
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        NodeNics:
          type: array
          description: An array of xnames that the hardware_mgmt_switch_connector
            is connected to.  Excludes the parent.
          items:
            $ref: '#/components/schemas/xname'
        VendorName:
          type: string
          description: "The vendor-assigned name for this port, as it appears in the\
            \ switch management software.  Typically this is something like \"GigabitEthernet\
            \ 1/31\" (Berkeley-style names), but may be any string."
    hardware_extra_properties_ncard:
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        IP6addr:
          type: string
          description: "The ipv6 address that should be assigned to this BMC, or \"\
            DHCPv6\".  If omitted, \"DHCPv6\" is assumed."
          example: DHCPv6
        IP4addr:
          type: string
          description: "The ipv4 address that should be assigned to this BMC, or \"\
            DHCPv4\".  If omitted, \"DHCPv4\" is assumed."
          example: 10.1.1.1
        Username:
          type: string
          description: The username that should be used to access the device (or be
            assigned to the device)
          example: user_name
        Password:
          type: string
          description: The password that should be used to access the device (or be
            assigned to the device)
          example: vault://tok
    hardware_extra_properties_node:
      required:
      - Aliases
      - Role
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        NID:
          minimum: 0
          type: integer
          example: 2
        Role:
          type: string
          example: Application
        SubRole:
          type: string
          example: Application
        Aliases:
          type: array
          items:
            type: string
    hardware_extra_properties_node_hsn_nic:
      required:
      - Networks
      - Peers
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Networks:
          type: array
          description: An array of network names that this NIC is connected to
          items:
            $ref: '#/components/schemas/xname'
        Peers:
          type: array
          description: "An array of xnames this NIC is connected directly to.  These\
            \ ideally connector xnames, not switches"
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties_node_nic:
      required:
      - Networks
      - Peers
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Networks:
          type: array
          description: An array of network names that this NIC is connected to
          items:
            $ref: '#/components/schemas/xname'
        Peers:
          type: array
          description: "An array of xnames this NIC is connected directly to.  These\
            \ ideally connector xnames, not switches"
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties_rtr_bmc:
      required:
      - IP4addr
      - IP6addr
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        IP6addr:
          type: string
          description: "The ipv6 address that should be assigned to this BMC, or \"\
            DHCPv6\".  If omitted, \"DHCPv6\" is assumed."
          example: DHCPv6
        IP4addr:
          type: string
          description: "The ipv4 address that should be assigned to this BMC, or \"\
            DHCPv4\".  If omitted, \"DHCPv4\" is assumed."
          example: 10.1.1.1
        Username:
          type: string
          description: The username that should be used to access the device (or be
            assigned to the device)
          example: user_name
        Password:
          type: string
          description: The password that should be used to access the device (or be
            assigned to the device)
          example: vault://tok
    hardware_extra_properties_rtr_bmc_nic:
      required:
      - Networks
      - Peers
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        Networks:
          type: array
          description: An array of network names that this NIC is connected to
          items:
            $ref: '#/components/schemas/xname'
        Peers:
          type: array
          description: "An array of xnames this NIC is connected directly to.  These\
            \ ideally connector xnames, not switches"
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties_rtrmod:
      required:
      - PowerConnector
      type: object
      properties:
        '@cani.id':
          type: string
        '@cani.lastModified':
          type: string
        '@cani.slsSchemaVersion':
          type: string
        '@cani.status':
          $ref: '#/components/schemas/CANIStatus'
        PowerConnector:
          type: array
          description: "An array of xnames, where each xname has type==*_pwr_connector.\
            \  Empty for Mountain switch cards"
          items:
            $ref: '#/components/schemas/xname'
    hardware_extra_properties:
      oneOf:
      - $ref: '#/components/schemas/hardware_extra_properties_bmc_nic'
      - $ref: '#/components/schemas/hardware_extra_properties_cab_pdu_nic'
      - $ref: '#/components/schemas/hardware_extra_properties_cab_pdu_pwr_connector'
      - $ref: '#/components/schemas/hardware_extra_properties_cabinet_networks'
      - $ref: '#/components/schemas/hardware_extra_properties_cdu_mgmt_switch'
      - $ref: '#/components/schemas/hardware_extra_properties_chassis_bmc'
      - $ref: '#/components/schemas/hardware_extra_properties_compmod'
      - $ref: '#/components/schemas/hardware_extra_properties_compmod_power_connector'
      - $ref: '#/components/schemas/hardware_extra_properties_mgmt_hl_switch'
      - $ref: '#/components/schemas/hardware_extra_properties_hsn_connector'
      - $ref: '#/components/schemas/hardware_extra_properties_mgmt_switch'
      - $ref: '#/components/schemas/hardware_extra_properties_mgmt_switch_connector'
      - $ref: '#/components/schemas/hardware_extra_properties_ncard'
      - $ref: '#/components/schemas/hardware_extra_properties_node'
      - $ref: '#/components/schemas/hardware_extra_properties_node_hsn_nic'
      - $ref: '#/components/schemas/hardware_extra_properties_node_nic'
      - $ref: '#/components/schemas/hardware_extra_properties_rtr_bmc'
      - $ref: '#/components/schemas/hardware_extra_properties_rtr_bmc_nic'
      - $ref: '#/components/schemas/hardware_extra_properties_rtrmod'
      - $ref: '#/components/schemas/hardware_extra_properties_system'
    slsState:
      type: object
      properties:
        Hardware:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/hardware'
        Networks:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/network'
      example:
        Networks:
          key:
            Type: slingshot10
            FullName: High Speed Network
            ExtraProperties:
              Comment: Comment
              Subnets:
              - DHCPEnd: DHCPEnd
                IPReservations:
                - Comment: Comment
                  Aliases:
                  - rgw-vip.local
                  - rgw-vip.local
                  IPAddress: IPAddress
                  Name: S3
                - Comment: Comment
                  Aliases:
                  - rgw-vip.local
                  - rgw-vip.local
                  IPAddress: IPAddress
                  Name: S3
                Comment: Comment
                Gateway: Gateway
                FullName: Cabinet 1008 HSN
                CIDR: 10.253.0.0/16
                VlanID: 60
                DHCPStart: DHCPStart
                Name: cabinet_1008_hsn"
              - DHCPEnd: DHCPEnd
                IPReservations:
                - Comment: Comment
                  Aliases:
                  - rgw-vip.local
                  - rgw-vip.local
                  IPAddress: IPAddress
                  Name: S3
                - Comment: Comment
                  Aliases:
                  - rgw-vip.local
                  - rgw-vip.local
                  IPAddress: IPAddress
                  Name: S3
                Comment: Comment
                Gateway: Gateway
                FullName: Cabinet 1008 HSN
                CIDR: 10.253.0.0/16
                VlanID: 60
                DHCPStart: DHCPStart
                Name: cabinet_1008_hsn"
              VlanRange:
              - 6
              - 6
              CIDR: 10.253.0.0/16
              MTU: 9000
            LastUpdatedTime: LastUpdatedTime
            LastUpdated: 0
            IPRanges:
            - IPRanges
            - IPRanges
            Name: HSN
        Hardware:
          key:
            Type: comptype_ncard
            Parent: x0c0s0
            Xname: x0c0s0b0
            ExtraProperties: ""
            LastUpdatedTime: LastUpdatedTime
            Class: Mountain
            Children:
            - x0c0s0b0n0
            - x0c0s0b0n0
            LastUpdated: 0
            TypeString: CDU
    Problem7807:
      required:
      - type
      type: object
      properties:
        type:
          type: string
          example: about:blank
        detail:
          type: string
          example: Detail about this specific problem occurrence. See RFC7807
        instance:
          type: string
          example: ""
        status:
          type: number
          format: int32
          example: 400
        title:
          type: string
          example: "Description of HTTP Status code, e.g. 400"
      description: RFC 7807 compliant error payload.  All fields are optional except
        the 'type' field.
    CANIStatus:
      type: string
      enum:
      - empty
      - staged
      - provisioned
      - decommissioned
    inline_response_200:
      required:
      - DBConnection
      - Vault
      type: object
      properties:
        Vault:
          type: string
          description: Status of the Vault.
        DBConnection:
          type: string
          description: Status of the connection with the database.
      example:
        Vault: Not checked
        DBConnection: Ready
    loadstate_body:
      type: object
      properties:
        sls_dump:
          $ref: '#/components/schemas/slsState'
