/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.1 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// JobStatusValue * `pending` - Pending * `scheduled` - Scheduled * `running` - Running * `completed` - Completed * `errored` - Errored * `failed` - Failed
type JobStatusValue string

// List of Job_status_value
const (
	JOBSTATUSVALUE_PENDING   JobStatusValue = "pending"
	JOBSTATUSVALUE_SCHEDULED JobStatusValue = "scheduled"
	JOBSTATUSVALUE_RUNNING   JobStatusValue = "running"
	JOBSTATUSVALUE_COMPLETED JobStatusValue = "completed"
	JOBSTATUSVALUE_ERRORED   JobStatusValue = "errored"
	JOBSTATUSVALUE_FAILED    JobStatusValue = "failed"
)

// All allowed values of JobStatusValue enum
var AllowedJobStatusValueEnumValues = []JobStatusValue{
	"pending",
	"scheduled",
	"running",
	"completed",
	"errored",
	"failed",
}

func (v *JobStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobStatusValue(value)
	for _, existing := range AllowedJobStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobStatusValue", value)
}

// NewJobStatusValueFromValue returns a pointer to a valid JobStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobStatusValueFromValue(v string) (*JobStatusValue, error) {
	ev := JobStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobStatusValue: valid values are %v", v, AllowedJobStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobStatusValue) IsValid() bool {
	for _, existing := range AllowedJobStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Job_status_value value
func (v JobStatusValue) Ptr() *JobStatusValue {
	return &v
}

type NullableJobStatusValue struct {
	value *JobStatusValue
	isSet bool
}

func (v NullableJobStatusValue) Get() *JobStatusValue {
	return v.value
}

func (v *NullableJobStatusValue) Set(val *JobStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableJobStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableJobStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobStatusValue(val *JobStatusValue) *NullableJobStatusValue {
	return &NullableJobStatusValue{value: val, isSet: true}
}

func (v NullableJobStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
