/*
NetBox REST API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.7.1 (3.7)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package netbox

import (
	"encoding/json"
	"fmt"
)

// JobStatusLabel the model 'JobStatusLabel'
type JobStatusLabel string

// List of Job_status_label
const (
	JOBSTATUSLABEL_PENDING   JobStatusLabel = "Pending"
	JOBSTATUSLABEL_SCHEDULED JobStatusLabel = "Scheduled"
	JOBSTATUSLABEL_RUNNING   JobStatusLabel = "Running"
	JOBSTATUSLABEL_COMPLETED JobStatusLabel = "Completed"
	JOBSTATUSLABEL_ERRORED   JobStatusLabel = "Errored"
	JOBSTATUSLABEL_FAILED    JobStatusLabel = "Failed"
)

// All allowed values of JobStatusLabel enum
var AllowedJobStatusLabelEnumValues = []JobStatusLabel{
	"Pending",
	"Scheduled",
	"Running",
	"Completed",
	"Errored",
	"Failed",
}

func (v *JobStatusLabel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobStatusLabel(value)
	for _, existing := range AllowedJobStatusLabelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobStatusLabel", value)
}

// NewJobStatusLabelFromValue returns a pointer to a valid JobStatusLabel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobStatusLabelFromValue(v string) (*JobStatusLabel, error) {
	ev := JobStatusLabel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobStatusLabel: valid values are %v", v, AllowedJobStatusLabelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobStatusLabel) IsValid() bool {
	for _, existing := range AllowedJobStatusLabelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Job_status_label value
func (v JobStatusLabel) Ptr() *JobStatusLabel {
	return &v
}

type NullableJobStatusLabel struct {
	value *JobStatusLabel
	isSet bool
}

func (v NullableJobStatusLabel) Get() *JobStatusLabel {
	return v.value
}

func (v *NullableJobStatusLabel) Set(val *JobStatusLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableJobStatusLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableJobStatusLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobStatusLabel(val *JobStatusLabel) *NullableJobStatusLabel {
	return &NullableJobStatusLabel{value: val, isSet: true}
}

func (v NullableJobStatusLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobStatusLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
